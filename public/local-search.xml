<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>synchronized 相关内容整理</title>
    <link href="/2021/07/15/Synchronized/"/>
    <url>/2021/07/15/Synchronized/</url>
    
    <content type="html"><![CDATA[<h1 id="synchronized-相关内容整理"><a href="#synchronized-相关内容整理" class="headerlink" title="synchronized 相关内容整理"></a>synchronized 相关内容整理</h1><blockquote><p>synchronized 就是 JVM 提供的内置锁。</p></blockquote><hr><h2 id="知识脑图"><a href="#知识脑图" class="headerlink" title="知识脑图"></a>知识脑图</h2><p><img src="https://chenqwwq.oss-cn-hangzhou.aliyuncs.com/note/assets/image-20210715211623026.png" alt="image-20210715211623026"></p><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>synchronized 是 Java 提供的同步原语，背后是 Java虚拟机(JVM) 提供的 Monitor 机制。</p><blockquote><p>Java 中任何一个对象都可以作为监视器 (Monitor) 对象，因为 Monitor 是通过 C++ 实现的对于 Object 类的扩展机制，该对象保存了锁相关的数据结构，例如保存阻塞线程列表等。</p></blockquote><p>被 synchronized 修饰的代码段一次只能由单个线程执行，以互斥锁的形式保证了代码的线程安全。</p><p><strong>synchronized 具有可重入性，单线程可以重复对一个对象上锁，而不会自我阻塞，但是解锁还是一次性的。</strong></p><p><strong>synchronized 保证了程序的可见性和原子性以及有序性。<font size="2">(volatile只能保证可见性以及一定程度上的有序性,而无原子性)</font></strong></p><p><strong>synchronized 不具备公平性,会导致饥饿，而使线程阻塞时间过长。</strong></p><blockquote><p><code>饥饿</code>就是指线程因为获取不到想要的资源而长时间不能执行。</p></blockquote><p>另外和 synchronized 搭配使用的还有 wait()/notify()/notifyAll() 三个方法。</p><blockquote><p><strong>调用该三个方法之前必须要获取到对应的 Monitor 锁。</strong></p><p>因为所有的 Object 类都可以作为 Monitor 锁，所以这三个方法直接放在 Object 类也合情合理。</p></blockquote><br><br><h2 id="synchronized的锁形式"><a href="#synchronized的锁形式" class="headerlink" title="synchronized的锁形式"></a>synchronized的锁形式</h2><p><code>synchronized </code>有三种上锁形式,分别会对不同的对象上锁:</p><ol><li><p>修饰实例方法</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">// 此时的上锁对象为当前的实例</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">void</span> <span class="hljs-title">syncMethod</span><span class="hljs-params">()</span></span>&#123;&#125;;<br></code></pre></div></td></tr></table></figure></li><li><p>修饰代码块</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">syncMethod</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-comment">// 此时上锁为lock对象.也可为Class对象 eg: lock.class</span><br>    <span class="hljs-keyword">synchronized</span>(lock)&#123;&#125;<br>&#125;<br></code></pre></div></td></tr></table></figure></li><li><p>修饰静态方法</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">// 此时的上锁对象为Class对象</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">void</span> <span class="hljs-title">syncMethod</span><span class="hljs-params">()</span></span>&#123;&#125;;<br></code></pre></div></td></tr></table></figure></li></ol><br><br><h2 id="synchronized的虚拟机层实现"><a href="#synchronized的虚拟机层实现" class="headerlink" title="synchronized的虚拟机层实现"></a>synchronized的虚拟机层实现</h2><p>synchronized 根据不同的上锁形式会有不同的实现方式。</p><ol><li><p><strong>在修饰代码块时使用的是明确的<code>monitorenter</code>和<code>monitorexit</code>两个指令</strong> </p><p> <img src="https://chenqwwq.oss-cn-hangzhou.aliyuncs.com/note/assets/javap_moitorenter_exit.png"></p><blockquote><p>退出实际上是两次的，在方法执行完毕之后还会执行一次 monitorexit</p></blockquote> <br></li><li><p><strong>在修饰方法(包括静态方法)时由方法调用指令读取运行时常量池方法中的 <code>ACC_SYNCHRONIZED</code> 隐式实现</strong></p><p>   <img src="https://chenqwwq.oss-cn-hangzhou.aliyuncs.com/note/assets/javap_acc_synchronized.jpg" alt="image-20210220102424150"></p></li></ol><br><br><h2 id="Mark-Word"><a href="#Mark-Word" class="headerlink" title="Mark Word"></a>Mark Word</h2><p><code>Mark Word</code> 是 <code>Java对象头</code>结构中除类型指针外的另一部分,用于记录 <code>HashCode</code> ，对象的年龄分代,锁状态标志等运行时数据。</p><blockquote><p>Java 的对象头包含了 <strong>Mark Word，类型指针和对齐填充。</strong></p></blockquote><p>下图中就比较清晰的展示了,不同情况下<code>Mark Word</code>的不同结构.</p><p><img src="https://chenqwwq.oss-cn-hangzhou.aliyuncs.com/note/assets/markword.jpg"></p><blockquote><p>Mark Word 相当于是锁的记录，查看 Mark Word 就可以确定当前 Monitor 锁的状态。</p><p>Class 对象也继承与 Object 对象，所以也能作为 Monitor 锁对象。</p></blockquote><br><br><h2 id="Monitor-监视器-管程"><a href="#Monitor-监视器-管程" class="headerlink" title="Monitor 监视器(管程)"></a>Monitor 监视器(管程)</h2><p>Monitor 是虚拟机内建的用来实现同步的机制，原则上Java的每一个对象都可以作为 Monitor。</p><blockquote><p><code>Monitor</code>的实现还是依赖于操作系统的<code>Mutex Lock</code>(互斥锁)来实现的，对于操作系统层面的实现不深究。</p><p>因为线程的阻塞，恢复以及 mutex 的调用等都涉及到用户态到内核态的切换，所以性能有限。</p></blockquote><p><img src="https://chenqwwq.oss-cn-hangzhou.aliyuncs.com/note/assets/JVM_Monitor.jpeg" alt="img"></p><p>上图可以简单说明整个 Monitor 机制的工作方法。</p><p>Entry Set 存放所有竞争线程集合，Wait Set 存放所有的等待线程的集合。</p><blockquote><p>都是用 Set 表示了，所以 synchronized 并不是公平锁，存在饥饿的情况。</p></blockquote><p>进入同步代码块的时候，线程先加入到 Entry Set，如果获取到锁则变为 Owner，期间调用了 wait() 方法后，进入 Wait Set，调用了 notify() 之后回到 Entry Set 继续竞争锁资源，代码块执行完毕则会退出。</p><p>只有 Owner 代表的线程才可以执行标识的代码块，也就保证了锁的互斥性。</p><blockquote><p>Monitor 是以 C++ 实现的，虚拟机内建的互斥锁机制，Java中还可以使用 ReentrantLock 和 Condition 对象实现更加灵活的控制。</p><p>Condition 中也有 await()/signal()/signalAll() 等配套方法。</p></blockquote><br><br><h2 id="wait-notify-notifyAll"><a href="#wait-notify-notifyAll" class="headerlink" title="wait()/notify()/notifyAll()"></a>wait()/notify()/notifyAll()</h2><blockquote><p><strong>以上三个方法都需要在获取到 Monitor 锁的状态下执行，也就是说在 synchronized 代码块中执行。</strong></p></blockquote><p>wait() 会释放当前的 Monitor 锁，并使线程进入 WAITING 或者 TIMED_WAITING 状态，在上图中就是进入到 Wait Set 中，另外的wait() 可以指定超时时间。 </p><p>notify() 会从当前的 Monitor 的 Wait Set 中随机唤醒一个等待的线程，notifyAll() 则是唤醒全部的线程。</p><blockquote><p>notify() 唤醒的线程会进入到 Entry Set，而不是直接获取到锁，当前线程也不会直接释放锁。</p><p>所以如果通过 wait() 阻塞的线程重新执行时候需要重新判断执行条件。</p></blockquote><br><br><h2 id="synchronized的优化-HotSpot"><a href="#synchronized的优化-HotSpot" class="headerlink" title="synchronized的优化(HotSpot)"></a>synchronized的优化<font size="2">(HotSpot)</font></h2><p><code>JDK1.6</code> 之前 <code>synchronized</code> 一直为重量级锁,直接使用互斥锁阻塞线程，也就导致了一定的性能问题。</p><blockquote><p>性能问题主要来源于线程状态的切换，以及用户态和内核态之间的来回切换。</p></blockquote><p><code>HopSpot</code> 在 <code>JDK1.6 </code>之后加入了<strong>偏向锁,自旋锁,自适应自旋锁,轻量级锁等优化</strong>.</p><p>锁级别从低到高依次是：无锁状态、偏向锁状态、轻量级锁状态和重量级锁状态，<strong>绝大多数情况下，锁可以升级但不能降级。</strong></p><br><h3 id="锁的转换关系"><a href="#锁的转换关系" class="headerlink" title="锁的转换关系"></a>锁的转换关系</h3><p><img src="https://chenqwwq.oss-cn-hangzhou.aliyuncs.com/note/assets/java_synchronized.jpg"></p><ul><li>我觉得上图已经很好的展示了几个状态之间的转化,就不在赘述了.<font size="1">(估计也讲不好)</font></li></ul><br><h4 id="偏向锁相关问题"><a href="#偏向锁相关问题" class="headerlink" title="偏向锁相关问题"></a>偏向锁相关问题</h4><ul><li>2019-3-6 补充</li></ul><p>和群友讨论的时候发现的问题:<strong>如果使用了偏向锁,那么势必会占据 MarkWord 中 HashCode 的位置，那么此时的 HashCode 又保存在哪里？</strong></p><p>在以下的文章中看的了答案,简单来说就是:</p><ul><li>HashCode 和偏向线程Id并不会共存,且 HashCode 的优先级高于偏向线程ID</li><li>如果处于偏向锁时,计算了 HashCode，那么锁会直接膨胀为重量级锁或者轻量级锁。</li><li>如果存在 HashCode , MarkWord 即为不可偏向状态。</li><li>因为轻量级锁会将 Mark Word 复制到虚拟机的栈帧，所以轻量级锁和 HashCode 是可以共存的。</li></ul><blockquote><p>并不是十分确定。</p></blockquote><br><h3 id="自旋锁-amp-自适应自旋锁"><a href="#自旋锁-amp-自适应自旋锁" class="headerlink" title="自旋锁 &amp; 自适应自旋锁"></a>自旋锁 &amp; 自适应自旋锁</h3><p>引入自旋锁是因为在很多时候线程并不会长时间持有锁,此时使用 <code>Metux</code> 阻塞线程没过一会儿又唤醒就得不偿失。</p><blockquote><p><strong>自旋锁就是一个循环,在等待持有锁的线程释放锁的过程中,不阻塞线程而让线程处于一直循环尝试获取锁的状态,从而避免了线程切换,阻塞的开销。</strong></p></blockquote><p>自旋锁在自旋的过程中也会占用一部分的 CPU 时间，若一直无限制自旋也会白白浪费 CPU 资源，所以在此基础之上又引入了<strong>自适应自旋锁</strong>.</p><p>自适应自旋锁是对自旋锁的优化,<strong>为自旋的次数或者时间设定一个上限,若超过这个上限一般会选择挂起线程或别的操作.</strong></p><br><h3 id="锁消除"><a href="#锁消除" class="headerlink" title="锁消除"></a>锁消除</h3><p>锁消除就是<strong>在逃逸分析技术的支持下</strong>,消除非公用资源的上锁步骤,从而提高性能.</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test</span><span class="hljs-params">()</span></span>&#123;<br>    StringBuffer s = <span class="hljs-keyword">new</span> StringBuffer();<br>    String a1 = <span class="hljs-string">&quot;CheN&quot;</span>;<br>    String a2 = <span class="hljs-string">&quot;bXxx&quot;</span>;<br>    s.append(a1);<br>    s.append(a2);<br>&#125;<br></code></pre></div></td></tr></table></figure><p>如上面这段代码展示,其中 <code>StringBuffer</code> 类是线程安全的，方法都会有 <code>synchronized</code> 修饰，所以最少也会有偏向锁的机制在发挥作用，但 a1 和 a2 的作用域就在 test 方法中,完全不会逃逸到方法体外，也不会引起线程安全问题，此时甚至偏向锁都显得很没必要。</p><br><h3 id="锁粗化"><a href="#锁粗化" class="headerlink" title="锁粗化"></a>锁粗化</h3><p>在一段代码中,若同步区域被限制的过小会导致线程频繁的进行锁的释放和获取操作.而此时锁粗化的作用就出来了,<strong>虚拟机探测到该类情况会直接将锁的同步区域扩展到整个操作的外部</strong>,从而消除无谓的锁操作.</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;i &lt; <span class="hljs-number">10</span>;i++)&#123;<br>    <span class="hljs-comment">// 此时虚拟机会直接将锁的范围扩展到循环之外</span><br>    <span class="hljs-keyword">synchronized</span>(<span class="hljs-keyword">this</span>)&#123;<br>      doSomething();<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><br><br><h2 id="相关文章"><a href="#相关文章" class="headerlink" title="相关文章"></a>相关文章</h2><ul><li><a href="https://blog.csdn.net/javazejian/article/details/72828483">深入理解Java并发之synchronized实现原理</a></li><li><a href="https://juejin.im/post/5b42c2546fb9a04f8751eabc">Java并发——关键字synchronized解析</a></li><li><a href="https://blog.csdn.net/saintyyu/article/details/108295657">HashCode和偏向锁</a></li><li><a href="https://mp.weixin.qq.com/s?__biz=MzkxNTE3NjQ3MA==&mid=2247488192&idx=1&sn=85fa12be29fef85d41c571b2c853de5d&chksm=c1627fb9f615f6af30d979b3e69bd7223e9e5e3e801a59f12cd492d00ea32623d55177f5e523&mpshare=1&scene=24&srcid=03027ZCVnPeq49L3bb4hjg9z&sharer_sharetime=1614644481827&sharer_shareid=22f066e400946fcffb59089626c6a1f2#rd">synchronized的源码级理解</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>jvm</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>RabbitMQ 如何保证消息不丢失</title>
    <link href="/2021/06/16/RabbitMQ%20%E5%A6%82%E4%BD%95%E4%BF%9D%E8%AF%81%E6%B6%88%E6%81%AF%E4%B8%8D%E4%B8%A2%E5%A4%B1/"/>
    <url>/2021/06/16/RabbitMQ%20%E5%A6%82%E4%BD%95%E4%BF%9D%E8%AF%81%E6%B6%88%E6%81%AF%E4%B8%8D%E4%B8%A2%E5%A4%B1/</url>
    
    <content type="html"><![CDATA[<h1 id="RabbitMQ-如何保证消息不丢失"><a href="#RabbitMQ-如何保证消息不丢失" class="headerlink" title="RabbitMQ 如何保证消息不丢失?"></a>RabbitMQ 如何保证消息不丢失?</h1><hr><br><h2 id="脑图"><a href="#脑图" class="headerlink" title="脑图"></a>脑图</h2><p><img src="https://chenqwwq.oss-cn-hangzhou.aliyuncs.com/note/assets/RabbitMQ%E8%84%91%E5%9B%BE1.png" alt="相关脑图"></p><br><br><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>RabbitMQ 可以分为 Producer（生产者），Consumer（消费者），Exchange（交换机），Queue（队列）四个角色。</p><p>消息的流经过程就是 Producer -&gt; Exchange -&gt; Queue -&gt; Consumer。</p><blockquote><p>和 Kafka 不同，RabbitMQ 不会直接和 Queue（Topic） 打交道，而是通过 Exchange，生产者甚至不知道消息最终去了哪里。</p></blockquote><br><p>所以要保证消息不丢就必须保证以下流程：</p><ol><li>Producer 到 Exchange 的过程，确保 Exchange 接收到消息</li><li>Exchange 到 Queue 的过程，确保消息被正确的投递</li><li>Queue 到 Consumer 的过程，确保消息被正常的消费和 ack</li></ol><p>还有就是，消息在 Exchange 和 Queue 的持久性，不能因为 Broker 的宕机导致消息的丢失，所以 Exchange ，Queue 和消息都需要持久化。</p><blockquote><p>持久化对性能有损，使用时谨慎判断是否必要。</p></blockquote><br><br><h2 id="Producer-到-Exchange-的过程"><a href="#Producer-到-Exchange-的过程" class="headerlink" title="Producer 到 Exchange 的过程"></a>Producer 到 Exchange 的过程</h2><p>该过程可以通过<a href="https://www.rabbitmq.com/tutorials/tutorial-seven-java.html">生产者确认（Publisher Confirm）</a> 来保证。</p><p><strong>Confirm 机制开启之后，会为生产者的每条消息添加从1开始的id，如果 Broker 确定接收到消息，则返回一个 confirm。</strong></p><p>Confirm 机制只负责到消息是否到达 Exchange 不负责后续的消息投递等流程，另外 RabbitMQ 也提供了事务的情况，事务的作用就是确保消息一定能够全部到达 Broker。</p><br><p>Springboot 的 RabbitMQ 实现中，可以对 RabbitTemplate 添加 RabbitTemplate.ConfirmCallback 回调函数，该回调需要额外配置以下内容</p><img src="https://chenqwwq.oss-cn-hangzhou.aliyuncs.com/note/assets/rabbitmq-publish-confirm配置.png" alt="rabbitmq-publish-confirm配置" style="zoom:67%;" /><p><strong>confirm 的回调方法在消息投递出去之后触发，不论成功还是失败都会。</strong></p><p>以回执的方式明确消息是否真正到达 Broker，如果未到达则可以做下一步的处理，重发或者入库等等，方法相关入参如下：</p><img src="https://chenqwwq.oss-cn-hangzhou.aliyuncs.com/note/assets/rabbitmq-publish-confirm示例.png" alt="rabbitmq-publish-confirm示例" style="zoom:67%;" /><br><br><h2 id="Exchange-到-Queue-的过程"><a href="#Exchange-到-Queue-的过程" class="headerlink" title="Exchange 到 Queue 的过程"></a>Exchange 到 Queue 的过程</h2><p><strong>该过程可以通过 RabbitMQ 提供的 mandatory 参数设置。</strong></p><p>mandatory 参数的作用就是确保消息被正确的投递到具体的队列，如果在 Broker 中无法匹配到具体队列，那么也会触发回调。</p><br><p>Springboot 的客户端封装也提供了 RabbitTemplate.ReturnCallback 回调方法，用来监听消息的状态。</p><p>想要该参数生效，以下两个配置必须同时配置。</p><img src="https://chenqwwq.oss-cn-hangzhou.aliyuncs.com/note/assets/rabbitmq-springboot-mandatory配置.png" alt="rabbitmq-springboot-mandatory配置" style="zoom:67%;" /><p>方法相关入参如下：</p><img src="https://chenqwwq.oss-cn-hangzhou.aliyuncs.com/note/assets/rabbitmq-mandatory回调示例.png" alt="rabbitmq-mandatory回调示例" style="zoom:67%;" /><br><p>回调并没有办法直接解决消息的投递失败问题，对失败投递进行报警，然后人工排查情况才是关键。</p><blockquote><p>mandatory 的回调只有消息投递失败的时候才会触发，正常投递不会触发。</p><p>这和 publish confirm 不同，publish confirm 是不管失败还是成功都会触发回调的。</p></blockquote><br><h3 id="备份交换机"><a href="#备份交换机" class="headerlink" title="备份交换机"></a>备份交换机</h3><p><strong>RabbitMQ 中还存在一个备份交换机（alternate-exchange）的概念，如果消息在正常的交换机无法匹配到队列的时候，消息会被转发到该交换机，由该交换机进一步投递。</strong></p><p><strong>所以就可以使用备份交换机收集无法匹配到 Queue 的消息。</strong></p><p>一般该交换机被设置为 FANOUT 模式，确保消息可以被直接投递。</p><br><br><h2 id="Queue-到-Consumer-的过程"><a href="#Queue-到-Consumer-的过程" class="headerlink" title="Queue 到 Consumer 的过程"></a>Queue 到 Consumer 的过程</h2><p>RabbitMQ 中保存的消息，只有在被 ack 之后才会主动删除，所以在 ack 消息之前必须要确保消息的正常消费。</p><blockquote><p>这个也是 RabbitMQ 和 Kafka 不同的点。</p><p>Kafka 在消费者 ack 之后并不会删除消息，只有消息累积到一定阈值（时间或者大小）之后才会删除，甚至可以不删除，因此 Kafka 即使作为存储服务也没啥问题。</p></blockquote><br><h3 id="RabbitMQ-原生-ack-模式"><a href="#RabbitMQ-原生-ack-模式" class="headerlink" title="RabbitMQ 原生 ack 模式"></a>RabbitMQ 原生 ack 模式</h3><p>RabbitMQ 的消费者端提供了<strong>自动和手动两种 ack 方式</strong>。</p><p><a href="https://www.rabbitmq.com/confirms.html#acknowledgement-modes">Consumer Acknowledgement Modes and Data Safety Considerations</a></p><p><strong>在自动确认的模式下，消息被认为在发送之后就算成功处理，因此很容易造成消息丢失，但是自动确认在很大程度上提高了吞吐量。</strong></p><blockquote><p>Consumer 是直接和 Queue 接触的，一个 Queue 可以由多个 Consumer 共同消费，如果一个 Consumer 断线，那么该 Consumer 上未 ack 的消息会被转发到其他的 Consumer 上，此时又会存在重复消费的问题。</p></blockquote><p><strong>对于手动确认</strong>，RabbitMQ 定义了以下三种形式：<img src="https://chenqwwq.oss-cn-hangzhou.aliyuncs.com/note/assets/rabbitmq%E6%89%8B%E5%8A%A8ack%E7%B1%BB%E5%9E%8B.png" alt="rabbitmq手动ack类型"></p><br><p>basic.ack 就是确认消费成功，Broker 在接收到该条 ack 之后会尝试删除对应的消息。</p><p>basic.reject 和 basic.nack 的作用是一样的，区别就在于语义上，作用都是拒绝消息，并且可以通过参数确定消息是否需要重新入队列。</p><br><blockquote><p><strong>消费者连接的时候就需要指定 ack 的模式。</strong></p><p>RabbitMQ 提供了两大类 ack 模式：手动和自动</p><ol><li>自动 ack 会在消息到达消费者之后直接删除队列中的消息</li><li>手动 ack 分为 ack / nack / reject 三种。</li></ol></blockquote><br><br><h3 id="Java-原生客户端-ack-实现"><a href="#Java-原生客户端-ack-实现" class="headerlink" title="Java 原生客户端 ack 实现"></a>Java 原生客户端 ack 实现</h3><p>在创建 Consumer 的时候就需要指定 ack 的形式:</p><p><img src="https://chenqwwq.oss-cn-hangzhou.aliyuncs.com/note/assets/rabbitmq-%E5%88%9B%E5%BB%BAconsumer.png" alt="rabbitmq-创建consumer"></p><p>上图中的方法参数 autoAck 就表示是否开启<strong>自动 ack</strong>。</p><p>对于三种手动确认的方法也分别提供了方法。</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">basicAck</span><span class="hljs-params">(<span class="hljs-keyword">long</span> deliveryTag, <span class="hljs-keyword">boolean</span> multiple)</span> <span class="hljs-keyword">throws</span> IOException</span>;<br>    <br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">basicNack</span><span class="hljs-params">(<span class="hljs-keyword">long</span> deliveryTag, <span class="hljs-keyword">boolean</span> multiple, <span class="hljs-keyword">boolean</span> requeue)</span></span><br><span class="hljs-function">            <span class="hljs-keyword">throws</span> IOException</span>;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">basicReject</span><span class="hljs-params">(<span class="hljs-keyword">long</span> deliveryTag, <span class="hljs-keyword">boolean</span> requeue)</span> <span class="hljs-keyword">throws</span> IOException</span>;<br></code></pre></div></td></tr></table></figure><p>deliveryTag 可以简单理解为消息的 id。</p><p>multiple 参数的含义是是否为批量操作，例如 basicAck 方法，如果为批量操作，会将 deliveryTag 之前的消息都 ack。</p><p>requeue 参数表示是否需要重回队列，如果为 false，那么在方法调用后消息就会被丢弃或者转发到死信队列，如果为 true，消息就会重新进入队列，重新下发到消费者。</p><blockquote><p>Java 原生的 RabbitMQ 客户端基本就简单实现了。</p></blockquote><br><h3 id="SpringBoot-中的-ack-实现"><a href="#SpringBoot-中的-ack-实现" class="headerlink" title="SpringBoot 中的 ack 实现"></a>SpringBoot 中的 ack 实现</h3><p>SpringBoot 根据以上的 ack 方法抽象提供了三种 AcknowledgeMode，具体如下：</p><img src="https://chenqwwq.oss-cn-hangzhou.aliyuncs.com/note/assets/springboot-rabbitmq-ackmode.png" alt="springboot-rabbitmq-ackmode" style="zoom:67%;" /><p>None 对应的就是 RabbitMQ 的 自动 ack，在消息被下发后就认为是消费成功，Broker 可以删除该消息。</p><blockquote><p>实际开发中慎用该配置！</p><p>但是如果处理失败就无法对该条消息进行重试，因为已经从队列中删除。</p><p>自动 ack 能稍微提高消息速度，ack 之后 Broken 会立马补消息到 prefetch 个。</p></blockquote><p>MANUAL 需要用户在 listener 中手动调用 ack / nack / reject 方法。</p><p><strong>AUTO 是由 SpringBoot 控制的 ack 模式，如果 listener 返回正常，则调用 ack，如果抛异常则调用 nack。</strong></p><blockquote><p>是在 RabbitMQ 官方提供了客户端实现的基础上封装的记住。</p></blockquote><p>另外的还有 default-requeue-rejected 配置，表示在消息处理失败之后是否需要重回队列。</p><blockquote><p><strong>SpringBoot 的客户端默认是会重回队列的，所以如果 Listener 抛异常而不进一步处理，消息会进入死循环。</strong></p></blockquote><br><h2 id="阅读"><a href="#阅读" class="headerlink" title="阅读"></a>阅读</h2><p><a href="https://www.rabbitmq.com/confirms.html#publisher-confirms">Consumer Acknowledgements and Publisher Confirms</a></p>]]></content>
    
    
    <categories>
      
      <category>rabbitmq</category>
      
    </categories>
    
    
    <tags>
      
      <tag>mq</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>浅析 JVM 类加载子系统</title>
    <link href="/2021/06/05/%E6%B5%85%E6%9E%90-JVM-%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%AD%90%E7%B3%BB%E7%BB%9F/"/>
    <url>/2021/06/05/%E6%B5%85%E6%9E%90-JVM-%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%AD%90%E7%B3%BB%E7%BB%9F/</url>
    
    <content type="html"><![CDATA[<h1 id="类加载子系统"><a href="#类加载子系统" class="headerlink" title="类加载子系统"></a>类加载子系统</h1><h2 id="思维导图"><a href="#思维导图" class="headerlink" title="思维导图"></a>思维导图</h2><p><img src="https://chenqwwq.oss-cn-hangzhou.aliyuncs.com/note/assets/JVM%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%AD%90%E7%B3%BB%E7%BB%9F.png" alt="JVM 类加载子系统"></p><br><br><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>Java 的类加载子系统负责从网络或者本地文件等多途径获取以 .class 结尾的字节码文件，并解析成基本的 Class 类型。</p><p>加载子系统只负责类的加载，保证类的安全性，执行还是交给执行子系统的。</p><br><br><h2 id="类加载的流程"><a href="#类加载的流程" class="headerlink" title="类加载的流程"></a>类加载的流程</h2><div class="hljs code-wrapper"><pre class="mermaid">graph LR subgraph B [链接] D[验证] --> E[准备] E --> F[解析] endA[ 加载] --> DF --> H[初始化]</pre></div><p><strong>实际的类加载流程是交叉进行的，并不是线程执行，</strong>例如加载到二进制流之后，验证就会开始文件结构验证。</p><br><ul><li>加载</li></ul><p>加载就是通过<strong>类的全限定名</strong>获取该类的字节码文件的二进制流，并将其转化为运行时的数据结构，也就是 Class 文件。</p><br><ul><li>验证</li></ul><p>验证是指对二进制流的验证，验证是否满足 JVM 的规范，是否会威胁到 JVM 自身的运行。</p><p>验证细分有以下四个部分：<strong>文件结构验证，元数据验证，字节码验证，符号引用验证</strong>。</p><p>在文件结构验证时候，二进制流就转化为了运行时数据结构，以后的验证都是对运行时结构的验证。</p><p>符号引用验证会在解析的时候执行。</p><br><ul><li>准备</li></ul><p>准备过程是给类变量分配空间的过程，并且回给类变量赋系统初值。</p><p>系统初值是指 JVM 默认的值，例如 boolean 类型默认会为 false 等。</p><br><ul><li>解析</li></ul><p>解析是对符号引用的解析，确保符号引用是全部有效，并将其转化为直接引用。</p><p>Class 文件常量池中就包含了一部分的符号引用。</p><br><ul><li>初始化</li></ul><p>初始化是执行 <code>&lt;cinit&gt;</code> 的过程。</p><p><code>&lt;cinit&gt;</code>  就是从类文件中收集的包括静态初始化快，字面量初始化等等的语句。</p><blockquote><p>有一个注意点是静态初始化块是从上到下顺序加载并执行的，并且先于构造函数的 <init> 执行。</p></blockquote><br><br><h3 id="Class-加载和卸载"><a href="#Class-加载和卸载" class="headerlink" title="Class 加载和卸载"></a>Class 加载和卸载</h3><ul><li>加载的时机</li></ul><ol><li>创建类实例对象的时候，通过 new，reflect 等途径 </li><li>调用类的静态方法或者访问类的静态变量的时候</li><li>初始化子类时发现父类未加载，会先加载父类</li></ol><blockquote><p>不全，代补充。</p></blockquote><br><ul><li>卸载的时机</li></ul><ol><li>该类所有的实例都已被回收</li><li>该类的 ClassLoader 已经被回收</li><li>该类的 Class 对象没有在任何地方被引用</li></ol><br><h3 id="Class-对象的存放"><a href="#Class-对象的存放" class="headerlink" title="Class 对象的存放"></a>Class 对象的存放</h3><p>类加载器加载 Class 文件，输出一个 Class 类，该类的信息都保存在<strong>元空间</strong>（1.8及以上版本），元空间是一片直接内存，会以 ClassLoader 为单位划分区域，每个 ClassLoader 还会保存各自加载过的类。</p><p>装载过程中，字面量，常量会加入到各自的运行时常量池，部分符号引用此时会被解析为直接引用，另外还会保存一份虚方法表。</p><br><br><h2 id="基本的类加载器"><a href="#基本的类加载器" class="headerlink" title="基本的类加载器"></a>基本的类加载器</h2><div class="hljs code-wrapper"><pre class="mermaid">graph TDA[Bootstrap ClassLoader] --> B[Extension ClassLoader] B --> C[Application ClassLoader]</pre></div><p>以上是 JDK 中提供的三种基础的类加载器。</p><ul><li>Bootstrap ClassLoader </li></ul><p>该类加载器使用 C 语言实现，直接内置在 JVM，用于加载 Java 核心库，例如 rt.jar 或者 bootstrap 目录下的依赖。</p><p>并且出于安全考虑，该加载器只会加载 java，javax，sun 开头的类。</p><br><ul><li>Extension ClassLoader</li></ul><p>扩展的类加载器，使用 Java 语言编写，具体实现为 sun.misc.Launcher$ExtClassLoader。</p><p>用于加载 /jre/lib/ext 下的类库，以 Bootstrap ClassLoader 为其父类</p><br><ul><li>Application ClassLoader</li></ul><p>应用类加载器，具体实现为 sun.misc.Launcher$AppClassLoader。</p><p>用于加载 CLASSPATH 目录下的类，为 ExtClassLoader 的子类。</p><br><blockquote><p>Bootstrap 和 Extension 两个加载器扫描的类的目录已经被限定死了，这是后续 SPI 等实现必须要通过 TCCL 的原因之一。</p></blockquote><br><blockquote><p>还有一点重要的，Java 中判断两个 Class 是否相等，除了其本身还需要判断对应的类加载器是否一致，同个 Class 文件被不同的 ClassLoader 装载就是不同的 Class 对象。</p></blockquote><br><h2 id="ClassLoader-的基础实现"><a href="#ClassLoader-的基础实现" class="headerlink" title="ClassLoader 的基础实现"></a>ClassLoader 的基础实现</h2><p>ExtClassLoader 和 AppClassLoader 都定义在 sun.misc.Launcher 中的，Launcher 是 Java 程序启动的起点。</p><br><h3 id="Launcher-的初始化"><a href="#Launcher-的初始化" class="headerlink" title="Launcher 的初始化"></a>Launcher 的初始化</h3><p>介绍 ExtClassLoader 和 AppClassLoader 两种基本类加载器的创建过程。</p><blockquote><p>Bootstrap 是内置在 JVM 中的，Java 程序启动的时候就是由 Bootstrap 先加载 Launcher 对象。</p></blockquote><br><img src="https://chenqwwq.oss-cn-hangzhou.aliyuncs.com/note/assets/Launcher构造函数.png" alt="Launcher构造函数" style="zoom:67%;" /><p>上图， Launcher 的构造函数中主要就包含了以下三个逻辑：</p><ul><li>创建 ExtClassLoader</li><li>以 ExtClassLoader 为参数，创建 AppClassLoader</li><li><strong>设置当前线程上下文加载器为 AppClassLoader</strong></li></ul><br><br><h3 id="ClassLoader-的实现"><a href="#ClassLoader-的实现" class="headerlink" title="ClassLoader 的实现"></a>ClassLoader 的实现</h3><p>AppClassLoader 和 ExtClassLoader 都继承于 URLClassLoader，而 URLClassLoader 又是继承与 ClassLoader 的。</p><p>ClassLoader 中分别有以下几种重点方法：</p><table><thead><tr><th>方法名</th><th>作用</th></tr></thead><tbody><tr><td>loadClass(String,boolean)</td><td>加载指定的 Class 文件的二进制流数据，boolean 表示是否对 Class 对象进行解析</td></tr><tr><td>findClass(String)</td><td>搜索 Class 文件，入参为类的全限定名</td></tr><tr><td>defineClass(byte[] b, int off, int len)</td><td>该方法用于将 byte 字节流解析成 Class 对象，入参就是 byte 数组。</td></tr><tr><td>resolveClass(Class≺?≻ c)</td><td>解析并初始化 Class 类</td></tr></tbody></table><br><h4 id="loadClass-String"><a href="#loadClass-String" class="headerlink" title="#loadClass(String)"></a>#loadClass(String)</h4><p>该方法是 ClassLoader 中最主要的方法，<strong>双亲委派机制</strong> 就是在该方法中实现的，<code>ClassLoader.loadClass</code> 也是常用的用于加载某个类的常用方法。</p><blockquote><p>有个容易忽略的点是，该方法可以获得 Class 类，但是并不会触发 Class 类的初始化，也就是类加载的最后一步。</p><p>但 Class.forName 会触发类的初始化，</p></blockquote><br><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">// ClassLoader#loadClass</span><br><span class="hljs-keyword">protected</span> Class&lt;?&gt; loadClass(String name, <span class="hljs-keyword">boolean</span> resolve)<br>    <span class="hljs-keyword">throws</span> ClassNotFoundException<br>&#123;<br>    <span class="hljs-keyword">synchronized</span> (getClassLoadingLock(name)) &#123;<br>        <span class="hljs-comment">// First, check if the class has already been loaded</span><br>        <span class="hljs-comment">// 通过缓存查找是否被该类加载器加载过。</span><br>        Class&lt;?&gt; c = findLoadedClass(name);<br>        <span class="hljs-keyword">if</span> (c == <span class="hljs-keyword">null</span>) &#123;<br>            <span class="hljs-keyword">long</span> t0 = System.nanoTime();<br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-keyword">if</span> (parent != <span class="hljs-keyword">null</span>) &#123;<br>                    <span class="hljs-comment">// 通过父类加载器，加载 name 类</span><br>                    c = parent.loadClass(name, <span class="hljs-keyword">false</span>);<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    <span class="hljs-comment">// 直接通过 Bootstrap 加载类</span><br>                    c = findBootstrapClassOrNull(name);<br>                &#125;<br>...<br><br>            <span class="hljs-comment">// 都找不到</span><br>            <span class="hljs-keyword">if</span> (c == <span class="hljs-keyword">null</span>) &#123;<br>                ...<br>                <span class="hljs-comment">// 调用 findClass 方法获取 Class 类</span><br>                c = findClass(name);<br>...<br>            &#125;<br>        &#125;<br>        <span class="hljs-comment">// 是否需要解析</span><br>        <span class="hljs-keyword">if</span> (resolve) &#123;<br>            <span class="hljs-comment">// 需要就调用 resolveClass </span><br>            resolveClass(c);<br>        &#125;<br>        <span class="hljs-keyword">return</span> c;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>从上面的代码可以大概的看出类加载的逻辑:</p><ol><li><strong>尝试从缓存中获取 Class</strong></li><li><strong>通过 父类 或者 Bootstrap 获取 Class</strong></li><li><strong>通过 findClass 方法获取 Class</strong></li></ol><p>以上三种就是 Class 对象的主要获取方式，之后根据参数会判断是否需要调用 resolveClass 方法进行解析。</p><p>最后调用的 findClass 方法在 ClassLoader 中是一个空方法，也就是模板方法，等待子类继承实现，URLClassLoader 就实现了该方法。</p><p>另外在方法的注释上也表明，<strong>实现者推荐开发者实现 findClass 方法，而并不推荐直接重写 loadClass 方法。</strong></p><br><br><h2 id="双亲委派机制"><a href="#双亲委派机制" class="headerlink" title="双亲委派机制"></a>双亲委派机制</h2><p>上文说的，ClassLoader#loadClass 方法中实现了双亲委派机制的基础逻辑。</p><p><strong>所有加载的类都会优先由父类加载，从下往上传递类加载任务，如果父类无法加载再由子类进行加载。</strong></p><blockquote><p>实现中可以看到，即使没有父类加载器，也会先从 Bootstrap 加载目标类，这就保证了 Java 核心类库的安全。</p></blockquote><br><p>双亲委派的优势:</p><ol><li>避免了类的重复加载，父子之间就是一条责任链，父类加载过的类不需要子类重新加载。</li><li>提高了程序的安全性，类似 java.lang.String 就只能通过 Bootstrap 加载</li></ol><blockquote><p>代补充。</p></blockquote><p>双亲委派机制的层次性是自下而上的，下级的类加载器共享上级的类加载器所加载的类，但是下级加载的类堆上级是不可见的。</p><br><br><h2 id="线程上下文类加载器"><a href="#线程上下文类加载器" class="headerlink" title="线程上下文类加载器"></a>线程上下文类加载器</h2><p>在 Launcher 的构造函数中就出现了相关逻辑，<strong>设置了 AppClassLoader 作为当前线程的上下文加载器</strong>。</p><p>线程上下文加载器可以当做是将类加载器和线程绑定，在线程中保存一份加载器的引用，因此在任何地方都可以获取到当期线程的上下文类加载器。</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">// 获取当前线程上下文类加载器的方法</span><br>Thread.currentThread().getContextClassLoader();<br></code></pre></div></td></tr></table></figure><p><strong>该方法的出现就是为了打破双亲委派机制</strong>。</p><p>在双亲委派机制中，类加载的任务是从下往上传递的，但是总有一些意外情况，比如 Java 核心类库中的类需要加载第三方类库的实现，比如 ServiceLoader 实现的 SPI 机制。</p><p>Java 核心类库都是通过 Bootstrap 实现的，但是因为 Bootstrap 被限定了目录以及类路径前缀，所以无法被用来加载 ServiceLoader，此时就可以通过 线程上下文类加载器 实现高层的类加载器调用底层去加载类的逻辑。</p><br><blockquote><p>非常重要的一点：</p><p><strong>类优先由触发类加载的类所属的类加载器加载。</strong></p></blockquote><br><br><h2 id="打破双亲委派机制的实例"><a href="#打破双亲委派机制的实例" class="headerlink" title="打破双亲委派机制的实例"></a>打破双亲委派机制的实例</h2><h3 id="Tomcat-的类加载机制"><a href="#Tomcat-的类加载机制" class="headerlink" title="Tomcat 的类加载机制"></a>Tomcat 的类加载机制</h3><p>Tomcat 作为一个 Web Servlet 容器，肯定需要装载多个 Web 应用，多个应用之间的依赖库不可能完全一致，可能出现同个依赖不同版本的情况，也可能出现两个应用之间类名相同的情况，这个时候就需要在多个 WebApp 之间做类上的隔离，另外同一个应用不可能说相同的依赖还需要重复加载几次，所以也存在依赖复用的情况。</p><p>另外 Tomcat 还提供了 Jsp 的热加载功能，动态的卸载和加载 Jsp 类。</p><blockquote><p>JSP 最后会被转化为 Class 然后执行输出。</p></blockquote><div class="hljs code-wrapper"><pre class="mermaid">graph TDA[Bootstrap ClassLoader] --> B[Extension ClassLoader] B --> C[Application ClassLoader]C --> D[Common ClassLoader]D --> E[Catalina ClassLoader]D --> F[Shared ClassLoader]F --> G[WebApp ClassLoader]G --> H[Jsp ClassLoader]</pre></div><p>所以 Tomcat 设计了如上的一套类加载体系。</p><p>除开三种基础的类加载器，Common 就是 Tomcat 中最上层的，他加载的类对所有的 Web 应用共享，并且对 Tomcat 自身也是共享的。</p><p>Catalina 负责加载的是 Tomcat 专用的一些类，比如 Tomcat 中的 Connector 等一些基础组件，这些对 Web 应用来说是不可见的，是隔离开的。</p><p>Shared 负责加载的是所有的 Web 引用共享的类，它和 Catalina 相隔离，互相不可见。</p><p>WebApp 负责加载当应用的类库，一个应用就对应这一个 WebApp 类加载器，相互之间隔离互相不影响，并且共享 Shared 类加载器加载的共用类。</p><p>Jsp 比较特别，它是每一个类一个类加载器，用于在 Jsp 文件修改之后做热更新。</p><blockquote><p>Common，Catalina 以及 Shared 都有指定的目录，不过不是本文的重点就不说了。</p></blockquote><br><p><strong>通过以上的体系，Tomcat 实现了类之间隔离和共享的关系区分。</strong></p><p>实现上 Catalina 和 Common 以及 Shared 都是 URLClassLoader，还是遵从的双亲委派机制的。</p><p>但是 WebApp 是单独实现的，继承了 URLClassLoader，并重写了 loadClass 方法，在查找了当前的 ClassLoader 的缓存之后，并没有直接使用父类加载器加载，而是继续在本地查找，找不到再去父类查找。</p><br><h3 id="JDK-的-SPI-实现-JDBC-Driver-实现的加载"><a href="#JDK-的-SPI-实现-JDBC-Driver-实现的加载" class="headerlink" title="JDK 的 SPI 实现 - JDBC Driver 实现的加载"></a>JDK 的 SPI 实现 - JDBC Driver 实现的加载</h3><p>JDBC 的核心类定义在 Java 的核心库，由 Bootstrap 加载，但是三方的实现却是在 ClassPath 里，需要使用 Application 来加载。</p><p>在 Java 的核心类加载三方实现的时候默认就是从  Application 加载，此时就会出现 ClassNotFound。</p><br><p><strong>JDBC 就在采用的方法就是 TCCL (Thread Context Class Loader) 线程上下文类加载器。</strong></p><p>在核心类中获取当前线程中绑定的类加载器，由此优先高级别类加载器调用低级别类加载器的实现。</p><br><p>参考 DriverManager 获取 Driver 的实现。</p><p>首先该类的静态初始化块中就包含了 Driver 的类加载流程。</p><img src="https://chenqwwq.oss-cn-hangzhou.aliyuncs.com/note/assets/DriverManager的静态初始化块.png" alt="DriverManager 的静态初始化块" style="zoom:80%;" /><p>在 loadInitialDrivers 方法中调用了 ServiceLoader 的 load 方法：</p><img src="https://chenqwwq.oss-cn-hangzhou.aliyuncs.com/note/assets/DriverManager11loadInitialDrivers.png" alt="loadInitialDrivers" style="zoom:67%;" /><p>而在 ServiceLoader 中就包含了对线程上下文类加载器的调用：</p><img src="https://chenqwwq.oss-cn-hangzhou.aliyuncs.com/note/assets/ServerLoader11load.png" alt="ServerLoader#load" style="zoom:67%;" /><br><br><h3 id="Spring-的类加载机制"><a href="#Spring-的类加载机制" class="headerlink" title="Spring 的类加载机制"></a>Spring 的类加载机制</h3><p>Spring 的类加载场景比较复杂，所以基本是统一采用 TCCL 来实现类加载，Spring 研究不多，待补充。</p>]]></content>
    
    
    <categories>
      
      <category>java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>jvm</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ThreadLocal 深入解析</title>
    <link href="/2021/05/30/ThreadLocal%E5%AE%9E%E7%8E%B0%E8%A7%A3%E6%9E%90/"/>
    <url>/2021/05/30/ThreadLocal%E5%AE%9E%E7%8E%B0%E8%A7%A3%E6%9E%90/</url>
    
    <content type="html"><![CDATA[<h1 id="ThreadLocal"><a href="#ThreadLocal" class="headerlink" title="ThreadLocal"></a>ThreadLocal</h1><h2 id="思维导图"><a href="#思维导图" class="headerlink" title="思维导图"></a>思维导图</h2><p><img src="https://chenqwwq.oss-cn-hangzhou.aliyuncs.com/note/assets/ThreadLocal.png" alt="ThreadLocal思维导图"></p><br><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>ThreadLocal（线程局部变量），作用是<strong>保存每个线程的私有变量</strong>，以空间换时间的方式，为每一个线程保存一份<strong>私有</strong>变量，也就不存在所谓的并发问题。</p><blockquote><p>真实的数据并不会存在 ThreadLocal 中。</p><p>实际上，数据都保存在 Thread 对象中 Thread#threadLocals 这个成员变量里，所以一定程度上 ThreadLocal 只是一个操作该集合的工具类。</p></blockquote><br><p>以下就是 ThreadLocalMap 在Thread中的变量声明:</p><p> <img src="https://chenqwwq.oss-cn-hangzhou.aliyuncs.com/note/assets/ThreadLocalMap%E7%9A%84%E5%8F%98%E9%87%8F%E5%A3%B0%E6%98%8E.png" alt="ThreadLocalMap的变量声明"></p><blockquote><p>threadLocals 是给 ThreadLocal 用的，该类只能访问当前线程中的数据。</p><p>inheritableThreadLocal 是给 InheritableThreadLocal 用的，使用该类子线程可以访问到父线程的数据。</p></blockquote><br><h2 id="ThreadLocal-的相关操作"><a href="#ThreadLocal-的相关操作" class="headerlink" title="ThreadLocal 的相关操作"></a>ThreadLocal 的相关操作</h2><ul><li><code>ThreadLocal</code>的内部方法因为逻辑都不复杂,不需要单独出来看,就直接全放一块了.</li></ul><h3 id="数据获取-Get"><a href="#数据获取-Get" class="headerlink" title="数据获取 - Get"></a>数据获取 - Get</h3><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">  <span class="hljs-comment">// 直接获取线程私有的数据</span><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> T <span class="hljs-title">get</span><span class="hljs-params">()</span> </span>&#123;<br>       <span class="hljs-comment">// 获取当前线程</span><br>       Thread t = Thread.currentThread();<br>       <span class="hljs-comment">// getMap其实很简单就是获取`t`中的`threadLocals`,代码在`工具方法`中</span><br>       ThreadLocalMap map = getMap(t); <br>       <span class="hljs-keyword">if</span> (map != <span class="hljs-keyword">null</span>) &#123;<span class="hljs-comment">// 3.</span><br>           ThreadLocalMap.Entry e = map.getEntry(<span class="hljs-keyword">this</span>);<br>           <span class="hljs-keyword">if</span> (e != <span class="hljs-keyword">null</span>) &#123;<span class="hljs-comment">// 2.</span><br>               <span class="hljs-meta">@SuppressWarnings(&quot;unchecked&quot;)</span><br>               T result = (T)e.value;<br>               <span class="hljs-keyword">return</span> result;<br>           &#125;<br>       &#125;<br>       <span class="hljs-keyword">return</span> setInitialValue();  <span class="hljs-comment">// 1.</span><br>   &#125;<br><span class="hljs-comment">// 这个方法只有在上面`1.`处调用...不知道为什么map,thread不直接传参</span><br><span class="hljs-comment">// 该方法的功能就是为`Thread`设置`threadLocals`的初始值</span><br>   <span class="hljs-function"><span class="hljs-keyword">private</span> T <span class="hljs-title">setInitialValue</span><span class="hljs-params">()</span> </span>&#123;<br>       T value = initialValue();<br>       Thread t = Thread.currentThread();<br>       ThreadLocalMap map = getMap(t);<br>       <span class="hljs-comment">// map不为null表明是从上面的`2.`处进入该方法</span><br>       <span class="hljs-comment">// 已经初始化`threadLocals`,但并未找到当前对应的`Entry`</span><br>       <span class="hljs-comment">// 所以此时直接添加`Entry`就行</span><br>       <span class="hljs-keyword">if</span> (map != <span class="hljs-keyword">null</span>)<br>           map.set(<span class="hljs-keyword">this</span>, value);<br>       <span class="hljs-keyword">else</span><br>           createMap(t, value);<br>       <span class="hljs-keyword">return</span> value;<br>   &#125;<br>     <span class="hljs-comment">// 初始值,`protected`方便子类继承,并定义自己的初始值.</span><br>     <span class="hljs-function"><span class="hljs-keyword">protected</span> T <span class="hljs-title">initialValue</span><span class="hljs-params">()</span> </span>&#123;<br>       <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>     &#125;<br><br><span class="hljs-comment">// 创建并赋值`threadLocals`的方法</span><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">createMap</span><span class="hljs-params">(Thread t, T firstValue)</span> </span>&#123;<br>       t.threadLocals = <span class="hljs-keyword">new</span> ThreadLocalMap(<span class="hljs-keyword">this</span>, firstValue);<br>   &#125;<br></code></pre></div></td></tr></table></figure><p>整个获取的过程其实并不难：</p><ol><li>通过 Thread#currentThread 方法获取当前线程对象。</li><li>首先通过 getMap 方法获取当前线程绑定的 threadLocals。</li><li>不要为空时，以当前 ThreadLocal 对象为参数获取对应的Entry 对象，为空跳到第四步。</li><li>获取 Entry 对象中的 value ，并返回。</li><li>调用 setInitialValue方法，并返回。</li></ol><br><p>这里可以很明显的看出来，数据其实还是保存在 Thread 对象里的。</p><p>通过 setInitialValue 方法可以设定初始值。</p><blockquote><p>例如，希望统计每个线程的某个操作计数，那么就可以用如下的方法：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">ThreadLocal&lt;Integer&gt; counter = <span class="hljs-keyword">new</span> ThreadLocal&lt;Integer&gt;() &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> Integer <span class="hljs-title">initialValue</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>&#125;;<br></code></pre></div></td></tr></table></figure><p>以 0 为初始值做统计。</p></blockquote><br><br><h3 id="数据存储-Set"><a href="#数据存储-Set" class="headerlink" title="数据存储 - Set"></a>数据存储 - Set</h3><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">set</span><span class="hljs-params">(T value)</span> </span>&#123;<br>       <span class="hljs-comment">// 获取当前线程</span><br>       Thread t = Thread.currentThread();<br>       ThreadLocalMap map = getMap(t);     <span class="hljs-comment">// .1</span><br>       <span class="hljs-keyword">if</span> (map != <span class="hljs-keyword">null</span>)<br>           map.set(<span class="hljs-keyword">this</span>, value);<br>       <span class="hljs-keyword">else</span><br>           createMap(t, value);<br>&#125;<br></code></pre></div></td></tr></table></figure><p>流程简述如下：</p><ol><li>获取当前线程,并以此获取线程绑定的 ThreadLocalMap 对象。</li><li>map 不为空时,直接set。</li><li>map 为空时需要先创建 Map 并赋值。</li></ol><p><br><br></p><h2 id="ThreadLocalMap"><a href="#ThreadLocalMap" class="headerlink" title="ThreadLocalMap"></a>ThreadLocalMap</h2><p>ThreadLocalMap 类似于 HashMap ，也是使用 Hash 算法定位存取的数据结构，以 ThreadLocal 对象为 Key。</p><p>Hash 算法合理时 ThreadLocalMap 的存取操作近乎是 O(1) 的复杂度。</p><p><code>ThreadLocalMap</code> 出人意料的并没有继承任何一个类或接口，是完全独立的类，以为会像 HashMap 一样继承一下 AbstractMap。</p><br><h3 id="成员变量"><a href="#成员变量" class="headerlink" title="成员变量"></a>成员变量</h3>  <figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">// 默认的初始容量 一定要是二的次幂</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> INITIAL_CAPACITY = <span class="hljs-number">16</span>;<br><span class="hljs-comment">// 元素数组/条目数组</span><br><span class="hljs-keyword">private</span> Entry[] table;<br><span class="hljs-comment">// 大小,用于记录数组中实际存在的Entry数目</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> size = <span class="hljs-number">0</span>;<br><span class="hljs-comment">// 阈值</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> threshold; <span class="hljs-comment">// Default to 0 构造方法</span><br></code></pre></div></td></tr></table></figure><blockquote><p><strong>ThreadLocalMap 的底层数据结构是 Entry 的数组，</strong>并且默认容量为16。</p></blockquote><br><p>以下为 Entry 对象的声明形式：</p><p> <img src="https://chenqwwq-img.oss-cn-beijing.aliyuncs.com/img/image-20210221154222208.png" alt="image-20210221154222208"></p><blockquote><p>WeakReference 声明了 Entry 对象对于 Key ，也就是 ThreadLocal 对象的引用是弱引用。</p><p><strong>弱引用消除了 ThreadLocalMap 的引用对 ThreadLocal  的对象回收的影响，</strong>这是 ThreadLocal 避免内存泄漏的核心。</p></blockquote><br><h3 id="元素获取"><a href="#元素获取" class="headerlink" title="元素获取"></a>元素获取</h3><h4 id="getEntry-ThreadLocal-lt-gt-key"><a href="#getEntry-ThreadLocal-lt-gt-key" class="headerlink" title="getEntry(ThreadLocal&lt;?&gt; key)"></a>getEntry(ThreadLocal&lt;?&gt; key)</h4><ul><li>该方法就是通过 ThreadLocal 对象获取对应的数据。</li></ul><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">private</span> Entry <span class="hljs-title">getEntry</span><span class="hljs-params">(ThreadLocal&lt;?&gt; key)</span> </span>&#123;<br>    <span class="hljs-comment">// 和HashMap中一样的下标计算方式</span><br>    <span class="hljs-keyword">int</span> i = key.threadLocalHashCode &amp; (table.length - <span class="hljs-number">1</span>);<br>    Entry e = table[i];<br>    <span class="hljs-comment">// 获取到对应的Entry之后就分两步</span><br>    <span class="hljs-keyword">if</span> (e != <span class="hljs-keyword">null</span> &amp;&amp; e.get() == key)<br>        <span class="hljs-comment">// 1. e不为空且threadLocal相等</span><br>        <span class="hljs-keyword">return</span> e;<br>    <span class="hljs-keyword">else</span><br>        <span class="hljs-comment">// 2. e为空或者threadLocal不相等</span><br>        <span class="hljs-keyword">return</span> getEntryAfterMiss(key, i, e);<br>&#125;<br></code></pre></div></td></tr></table></figure><p>起手就是一个 HashCode &amp; (len - 1)，和 HashMap 类似，但ThreadLocal 的 HashCode 和 HashMap 中的直接调用 hashCode() 方法不同。</p><p>ThreadLocal 是采用递增的形式，而非直接计算对象的 HashCode。</p><br> <figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> threadLocalHashCode = nextHashCode();<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> AtomicInteger nextHashCode = <span class="hljs-keyword">new</span> AtomicInteger();  <br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> <span class="hljs-title">nextHashCode</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">return</span> nextHashCode.getAndAdd(HASH_INCREMENT);<br>&#125;<br></code></pre></div></td></tr></table></figure><p> 以上就是 HashCode 的获取方式，<strong>是以类变量的方式递增获取</strong>，相对于直接调用 hashCode() 可以更好的减少 hash 冲突。</p><blockquote><p>每次创建一个 ThreadLocal，hashCode 都会+1，所以能使数据更加均匀的散布在数组中，更好的减少 hash 冲突。</p></blockquote><br><p>如果hash计算出来的下标存在想要的元素就直接返回，如果获取元素为空还会再调用 <code>getEntryAfterMiss</code> 做冲突查询的后续处理.</p><p><br><br></p><h4 id="getEntryAfterMiss-ThreadLocal-lt-gt-key-int-i-Entry-e"><a href="#getEntryAfterMiss-ThreadLocal-lt-gt-key-int-i-Entry-e" class="headerlink" title="getEntryAfterMiss(ThreadLocal&lt;?&gt; key, int i, Entry e)"></a>getEntryAfterMiss(ThreadLocal&lt;?&gt; key, int i, Entry e)</h4><ul><li>该方法是在直接按照 <code>Hash</code> 计算下标后，没获取到对应的 <code>Entry</code> 对象的时候调用，<strong>下标处不是想要的元素就说明出现了 Hash 冲突。</strong></li></ul><p>以下为方法源码：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">private</span> Entry <span class="hljs-title">getEntryAfterMiss</span><span class="hljs-params">(ThreadLocal&lt;?&gt; key, <span class="hljs-keyword">int</span> i, Entry e)</span> </span>&#123;<br>        Entry[] tab = table;<br>        <span class="hljs-keyword">int</span> len = tab.length;<br>        <span class="hljs-comment">// 此时注意如果从上面情况`2.`进来时,</span><br>        <span class="hljs-comment">// e为空则直接返回null,不会进入while循环</span><br>        <span class="hljs-comment">// 只有e不为空且e.get() != key时才会进while循环</span><br>        <span class="hljs-keyword">while</span> (e != <span class="hljs-keyword">null</span>) &#123;<br>            ThreadLocal&lt;?&gt; k = e.get();<br>            <span class="hljs-comment">// 找到相同的k,返回得到的Entry,get操作结束</span><br>            <span class="hljs-keyword">if</span> (k == key)<br>                <span class="hljs-keyword">return</span> e;<br>            <span class="hljs-comment">// 若此时的k为空,那么e则被标记为`Stale`需要被`expunge`</span><br>            <span class="hljs-keyword">if</span> (k == <span class="hljs-keyword">null</span>)<br>                expungeStaleEntry(i);<br>            <span class="hljs-keyword">else</span><span class="hljs-comment">// 下面两个都是遍历的相关操作</span><br>                <span class="hljs-comment">// nextIndex就是+1判断是否越界</span><br>                i = nextIndex(i, len);<br>            e = tab[i];<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><blockquote><p><strong>在判断出现 hash 冲突之后，直接往后线性查找之后的数组元素。</strong></p></blockquote><br><br><h4 id="expungeStaleEntry-int-staleSlot"><a href="#expungeStaleEntry-int-staleSlot" class="headerlink" title="expungeStaleEntry(int staleSlot)"></a>expungeStaleEntry(int staleSlot)</h4><ul><li>该方法用来清除 <code>staleSlot</code> 位置的 Entry 对象,并且会<strong>清理当前节点到下一个 <code>null</code> 节点中间的过期 <code>Entry</code>.</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">/** </span><br><span class="hljs-comment">  * 清空旧的Entry对象</span><br><span class="hljs-comment">  * <span class="hljs-doctag">@param</span> staleSlot: 清理的起始位置</span><br><span class="hljs-comment">  * <span class="hljs-doctag">@param</span> return: 返回的是第一个为空的Entry下标</span><br><span class="hljs-comment">  */</span><br> <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> <span class="hljs-title">expungeStaleEntry</span><span class="hljs-params">(<span class="hljs-keyword">int</span> staleSlot)</span> </span>&#123;<br>         Entry[] tab = table;<br>         <span class="hljs-keyword">int</span> len = tab.length;<br>     <span class="hljs-comment">// 清空`staleSlot`位置的Entry</span><br>     <span class="hljs-comment">// value引用置为空之后,对象被标记为不可达,下次GC就会被回收.</span><br>         tab[staleSlot].value = <span class="hljs-keyword">null</span>;<br>         tab[staleSlot] = <span class="hljs-keyword">null</span>;<br>         size--;<br>         Entry e;<br>         <span class="hljs-keyword">int</span> i;<br>     <span class="hljs-comment">// 通过nextIndex从`staleSlot`的下一个开始向后遍历Entry数组,直到e不为空</span><br>      <span class="hljs-comment">// e赋值为当前的Entry对象</span><br>         <span class="hljs-keyword">for</span> (i = nextIndex(staleSlot, len);<br>              (e = tab[i]) != <span class="hljs-keyword">null</span>;<br>              i = nextIndex(i, len)) &#123;<br>             ThreadLocal&lt;?&gt; k = e.get();<br>             <span class="hljs-comment">// 当k为空的时候清空节点信息</span><br>             <span class="hljs-keyword">if</span> (k == <span class="hljs-keyword">null</span>) &#123;<br>                 e.value = <span class="hljs-keyword">null</span>;<br>                 tab[i] = <span class="hljs-keyword">null</span>;<br>                 size--;<br>             &#125; <span class="hljs-keyword">else</span> &#123;<span class="hljs-comment">// 以下为k存在的情况</span><br>                 <span class="hljs-keyword">int</span> h = k.threadLocalHashCode &amp; (len - <span class="hljs-number">1</span>);<br>                 <span class="hljs-comment">// 元素下标和key计算的不一样，表明是出现`Hash碰撞`之后调整的位置</span><br>                 <span class="hljs-comment">// 将当前的元素移动到下一个null位置</span><br>                 <span class="hljs-keyword">if</span> (h != i) &#123;<br>                     tab[i] = <span class="hljs-keyword">null</span>;<br>                     <span class="hljs-keyword">while</span> (tab[h] != <span class="hljs-keyword">null</span>)<br>                         h = nextIndex(h, len);<br>                     tab[h] = e;<br>                 &#125;<br>             &#125;<br>         &#125;<br>         <span class="hljs-keyword">return</span> i;<br>     &#125; <br></code></pre></div></td></tr></table></figure><p>该方法是对内存泄露的进一步处理。</p><p><strong>如果将ThreadLocal的内存泄露问题分成两个部分来看，一个是 Key，另外一个就是 Value。</strong></p><p><strong>Key 的部分依靠弱引用清除，如果外部的强引用断开之后，也就是没有地方在使用到该 Key 之后，Key 会被 GC 回收，所以引用就为 null。</strong></p><p>从而判断 Key 为 null 的 Value 就是 Stale 的对象，则靠该方法清除。</p><blockquote><p>ThreadLocal 靠弱引用清除的只有 Key 对象，还有 Value 对象则需要靠扫描，所以内存泄露的情况并不是能够完全避免的。</p></blockquote><br><br><h3 id="元素添加"><a href="#元素添加" class="headerlink" title="元素添加"></a>元素添加</h3><h4 id="set-ThreadLocal-lt-gt-key-Object-value"><a href="#set-ThreadLocal-lt-gt-key-Object-value" class="headerlink" title="set(ThreadLocal&lt;?&gt; key, Object value)"></a>set(ThreadLocal&lt;?&gt; key, Object value)</h4><ul><li>该方法就是添加元素的方法。</li></ul><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">set</span><span class="hljs-params">(ThreadLocal&lt;?&gt; key, Object value)</span> </span>&#123;<br>    Entry[] tab = table;<br>    <span class="hljs-keyword">int</span> len = tab.length;<br>    <span class="hljs-keyword">int</span> i = key.threadLocalHashCode &amp; (len-<span class="hljs-number">1</span>);<br>    <span class="hljs-comment">// 整个循环的功能就是找到相同的key覆盖value</span><br>    <span class="hljs-comment">// 或者找到key为null的节点覆盖节点信息</span><br>    <span class="hljs-comment">// 只有在e==null的时候跳出循环执行下面的代码</span><br>    <span class="hljs-keyword">for</span> (Entry e = tab[i];<br>         e != <span class="hljs-keyword">null</span>;<br>         e = tab[i = nextIndex(i, len)]) &#123;<br>        ThreadLocal&lt;?&gt; k = e.get();<br>        <span class="hljs-comment">// 找到相等的k,则直接替换value,set操作结束</span><br>        <span class="hljs-keyword">if</span> (k == key) &#123;<br>            e.value = value;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-comment">// k为空表示该节点过期,直接替换该节点</span><br>        <span class="hljs-keyword">if</span> (k == <span class="hljs-keyword">null</span>) &#123;       <span class="hljs-comment">// 1.</span><br>            replaceStaleEntry(key, value, i);<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">// 走到这一步就是找到了e为空的位置，不然在上面两个判断里都return了</span><br>    tab[i] = <span class="hljs-keyword">new</span> Entry(key, value);<br>    <span class="hljs-keyword">int</span> sz = ++size;<br>    <span class="hljs-keyword">if</span> (!cleanSomeSlots(i, sz) &amp;&amp; sz &gt;= threshold)<br>        rehash();<br>&#125;<br></code></pre></div></td></tr></table></figure><p>通过 hashCode 确定下标后，如果 Key 相等则直接覆盖原数据，如果 Key 不相等则往后线性查找元素，找到为 null 的元素直接覆盖，或者找到空余的位置赋值。</p><br><p>最后会清理旧的元素，并且判断 threshold，决定是否需要扩容。</p><blockquote><p><strong>ThreadLocalMap 处理 Hash 冲突的方法叫做 线性寻址法，在冲突之后往后搜索，找到第一个为空的下标并保存元素。</strong></p><p>线性寻址法在出现 Hash 冲突的时候处理的复杂度基本会变成 O(n)，并不能直接找一个 null 点就存储，因为数组中可能还有相同的 Key 在后面。</p></blockquote><br><br><p>replaceStaleEntry</p><ul><li>源码中只有从上面 <code>1.</code> 处进入该方法,用于<strong>替换  <code>key</code>  为空的 <code>Entry</code> 节点,顺带清除数组中的过期节点.</strong></li></ul><p>往后搜索的是第一个为空或者 Key 相等，如果先找到 Key 为空的并不能保证后续的节点没有 Key 相等的，所以在 replaceStaleEntry 方法中可能还需要处理另外一个 Key 相同的节点。</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *从`set.1.`处进入,key是插入元素ThreadLocal的hash,staleSlot为key为空的数组节点下标</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">replaceStaleEntry</span><span class="hljs-params">(ThreadLocal&lt;?&gt; key, Object value,</span></span><br><span class="hljs-params"><span class="hljs-function">                               <span class="hljs-keyword">int</span> staleSlot)</span> </span>&#123;<br>    Entry[] tab = table;<br>    <span class="hljs-keyword">int</span> len = tab.length;<br>    Entry e;<br>    <span class="hljs-keyword">int</span> slotToExpunge = staleSlot;<br>    <span class="hljs-comment">// 从传入位置,即插入时发现k为null的位置开始,向前遍历,直到数组元素为空</span><br>    <span class="hljs-comment">// 找到最前面一个key为null的值.</span><br>    <span class="hljs-comment">// 这里要吐槽一下源代码...大括号都不加 习惯真差</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = prevIndex(staleSlot, len);<br>         (e = tab[i]) != <span class="hljs-keyword">null</span>;<br>         i = prevIndex(i, len))&#123;<br><span class="hljs-comment">// 向前获取到第一个 Key 为空的对象</span><br>        <span class="hljs-keyword">if</span> (e.get() == <span class="hljs-keyword">null</span>)<br>            <span class="hljs-comment">// 因为是环状遍历所以此时slotToExpunge是可能等于staleSlot的</span><br>            slotToExpunge = i;<br>    &#125;<br>    <span class="hljs-comment">// 该段循环的功能就是向后遍历找到`key`相等的节点并替换</span><br>    <span class="hljs-comment">// 并对之后的元素进行清理</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = nextIndex(staleSlot, len);<br>         (e = tab[i]) != <span class="hljs-keyword">null</span>;<br>         i = nextIndex(i, len)) &#123;<br>        ThreadLocal&lt;?&gt; k = e.get();<br>        <span class="hljs-keyword">if</span> (k == key) &#123;<br>            <span class="hljs-comment">// 替换 e 的 value</span><br>            e.value = value;<br>            <span class="hljs-comment">// staleSlot 是因为 key 为 null 才进来的</span><br>            <span class="hljs-comment">// 所以 tab[i] 也是需要清理的节点</span><br>            tab[i] = tab[staleSlot];<br>            tab[staleSlot] = e;<br>            <span class="hljs-keyword">if</span> (slotToExpunge == staleSlot)<br>                slotToExpunge = i;<br>            cleanSomeSlots(expungeStaleEntry(slotToExpunge), len);<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-comment">// 其实我对这个`slotToExpunge == staleSlot`的判断一直挺疑惑的,为什么需要这个判断?</span><br>        <span class="hljs-keyword">if</span> (k == <span class="hljs-keyword">null</span> &amp;&amp; slotToExpunge == staleSlot)<br>            slotToExpunge = i;<br>    &#125;<br>    <span class="hljs-comment">// e==null时跳到下面代码运行</span><br>    <span class="hljs-comment">// 清空并重新赋值</span><br>    <span class="hljs-comment">// 断开 Entry 对应的数据的强引用</span><br>    tab[staleSlot].value = <span class="hljs-keyword">null</span>;<br>    tab[staleSlot] = <span class="hljs-keyword">new</span> Entry(key, value);<br>    <span class="hljs-comment">// set后的清理</span><br>    <span class="hljs-keyword">if</span> (slotToExpunge != staleSlot)<br>        cleanSomeSlots(expungeStaleEntry(slotToExpunge), len);<br>&#125;<br><br></code></pre></div></td></tr></table></figure><p><strong>如上所说，再出现 Hash 冲突的时候，往后搜索的是第一个为空的节点，并不能直接赋值，因为在后续的数组中可能还存在相同的 Key 的节点。</strong></p><p>替换元素之前会先向前搜索找到一个 Key 为 null 的节点。</p><br><br><h4 id="cleanSomeSlots"><a href="#cleanSomeSlots" class="headerlink" title="cleanSomeSlots"></a>cleanSomeSlots</h4><ul><li>该方法的功能是就是清除数组中的过期<code>Entry</code></li><li>首次清除从<code>i</code>向后开始遍历<code>log2(n)</code>次,如果之间发现过期<code>Entry</code>会直接将<code>n</code>扩充到<code>len</code>可以说全数组范围的遍历.发现过期<code>Entry</code>就调用<code>expungeStaleEntry</code>清除直到未发现<code>Entry</code>为止.</li></ul><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">  * <span class="hljs-doctag">@param</span> i 清除的起始节点位置</span><br><span class="hljs-comment">  * <span class="hljs-doctag">@param</span> n 遍历控制,每次扫描都是log2(n)次,一般取当前数组的`size`或`len`</span><br><span class="hljs-comment">  */</span><br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">cleanSomeSlots</span><span class="hljs-params">(<span class="hljs-keyword">int</span> i, <span class="hljs-keyword">int</span> n)</span> </span>&#123;<br>    <span class="hljs-comment">// 是否有清除的标记</span><br>            <span class="hljs-keyword">boolean</span> removed = <span class="hljs-keyword">false</span>;<br>    <span class="hljs-comment">// 获取底层数组的数据信息</span><br>            Entry[] tab = table;<br>            <span class="hljs-keyword">int</span> len = tab.length;<br>            <span class="hljs-keyword">do</span> &#123;<br>                i = nextIndex(i, len);<br>                Entry e = tab[i];<br>                <span class="hljs-keyword">if</span> (e != <span class="hljs-keyword">null</span> &amp;&amp; e.get() == <span class="hljs-keyword">null</span>) &#123;<br>                    <span class="hljs-comment">// 当发现有过期`Entry`时,n变为len</span><br>                    <span class="hljs-comment">// 即扩大范围,全数组范围在遍历一次</span><br>                    n = len;<br>                    removed = <span class="hljs-keyword">true</span>;<br>                    i = expungeStaleEntry(i);<br>                &#125;<br>                <span class="hljs-comment">// 无符号右移一位相当于n = n /2</span><br>                <span class="hljs-comment">// 所以在第一次会遍历`log2(n)`次</span><br>            &#125; <span class="hljs-keyword">while</span> ( (n &gt;&gt;&gt;= <span class="hljs-number">1</span>) != <span class="hljs-number">0</span>);<br>    <span class="hljs-comment">// 遍历过程中没出现过期`Entry`的情况下会返回是否有清理的标记.</span><br>            <span class="hljs-keyword">return</span> removed;<br>        &#125;<br></code></pre></div></td></tr></table></figure><br><br><h3 id="扩容调整方法"><a href="#扩容调整方法" class="headerlink" title="扩容调整方法"></a>扩容调整方法</h3><h4 id="rehash"><a href="#rehash" class="headerlink" title="rehash"></a>rehash</h4><ul><li>容量调整的先驱方法,先清理过期<code>Entry</code>,并做是否需要<code>resize</code>的判断</li><li>调整的条件是<strong>当前size大于阈值的3/4</strong>就进行扩容</li></ul><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">rehash</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-comment">// 清理过期Entry</span><br>           expungeStaleEntries();<br>    <span class="hljs-comment">// 初始阈值threshold为10</span><br>           <span class="hljs-keyword">if</span> (size &gt;= threshold - threshold / <span class="hljs-number">4</span>)<br>               resize();<br>       &#125;<br></code></pre></div></td></tr></table></figure><br><br><h4 id="resize"><a href="#resize" class="headerlink" title="resize"></a>resize</h4><ul><li>扩容的实际方法.</li></ul><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">resize</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-comment">// 获取旧数组并记录就数组大小</span><br>          Entry[] oldTab = table;<br>          <span class="hljs-keyword">int</span> oldLen = oldTab.length;<br>    <span class="hljs-comment">// 新数组大小为旧数组的两倍</span><br>          <span class="hljs-keyword">int</span> newLen = oldLen * <span class="hljs-number">2</span>;<br>          Entry[] newTab = <span class="hljs-keyword">new</span> Entry[newLen];<br>          <span class="hljs-keyword">int</span> count = <span class="hljs-number">0</span>;<br><span class="hljs-comment">// 遍历整个旧数组,并迁移元素到新数组</span><br>          <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; oldLen; ++j) &#123;<br>              Entry e = oldTab[j];<br>              <span class="hljs-comment">// 判断是否为空,空的话就算了</span><br>              <span class="hljs-keyword">if</span> (e != <span class="hljs-keyword">null</span>) &#123;<br>                  ThreadLocal&lt;?&gt; k = e.get();<br>                  <span class="hljs-comment">// k为空即表示为过期节点,当即清理了.</span><br>                  <span class="hljs-keyword">if</span> (k == <span class="hljs-keyword">null</span>) &#123;<br>                      e.value = <span class="hljs-keyword">null</span>; <br>                  &#125; <span class="hljs-keyword">else</span> &#123;<br>                      <span class="hljs-comment">// 重新计算数组下标,如果数组对应位置已存在元素</span><br>                      <span class="hljs-comment">// 则环状遍历整个数组找个空位置赋值</span><br>                      <span class="hljs-keyword">int</span> h = k.threadLocalHashCode &amp; (newLen - <span class="hljs-number">1</span>);<br>                      <span class="hljs-keyword">while</span> (newTab[h] != <span class="hljs-keyword">null</span>)<br>                          h = nextIndex(h, newLen);<br>                      newTab[h] = e;<br>                      count++;<br>                  &#125;<br>              &#125;<br>          &#125;<br><span class="hljs-comment">// 设置新属性</span><br>          setThreshold(newLen);<br>          size = count;<br>          table = newTab;<br>      &#125;<br></code></pre></div></td></tr></table></figure><br><br><h2 id="Q-amp-A"><a href="#Q-amp-A" class="headerlink" title="Q&amp;A"></a>Q&amp;A</h2><blockquote><p>Q: ThreadLocal 为何会出现内存泄露？</p></blockquote><p><strong>ThreadLocal 会出现内存泄露的主要原因是如果是强引用，那么在 ThreadLocal 类不再使用之后，ThreadLocalMap 中无法清除相关的 Entry 对象。</strong></p><p>在 ThreadLocal 不再使用之后，ThreadLocalMap 中指向 ThreadLocal 的强引用也会导致 ThreadLocal 无法被 GC 回收，同理 Value 对象也被保留了下来。</p><p><strong>也就出现了所谓的内存泄露，无用的数据无法被 GC 有效的清除。</strong></p><br><br><blockquote><p> Q: ThreadLocal 如何解决内存泄漏?</p></blockquote><p>ThreadLocal 的内存泄露可以分为 Key（也就是 ThreadLocal），以及 Value。</p><p><strong>解决 Key 的内存泄露的方法就是采用弱引用，弱引用消除了 ThreadLocalMap 对 ThreadLocal 对象的 GC 的影响。</strong></p><p>另外的在每次获取或者添加数据的时候都会判断 Key 是否被回收，如果 Key 已经被回收会连带清理 Value 对象，这也就顺带解决了 Value 的泄露问题。</p><br><br><blockquote><p> Q: ThreadLocalMap 如何解决Hash冲突？</p></blockquote><p>Hash 冲突就是指通过 Hash 计算的下标值一致，两个元素的定位一致。</p><p>HashMap 解决 Hash 冲突的方法就是<strong>拉链法</strong>，底层的数组中保存的不是单一的数据，而是一个集合(链表/红黑树)，冲突之后下挂。</p><p>采用拉链法的结果就是在Hash冲突严重时会严重影响时间复杂度，因为就算是红黑树查询的事件复杂度都是 O(Log2n)。</p><p>ThreadLocalMap 并没有采用这种方法，而是使用的<strong>开放寻址法</strong>，如果已经有数据存在冲突点，就在数组中往下遍历找到第一个空着的位置。</p><blockquote><p>需要注意的是，并不是找到空的位置就可以直接替换，还是需要遍历整个数组确保没有重复的 Key。</p></blockquote><br><br><blockquote><p> Q: ThreadLocalMap 和 HashMap 的异同</p></blockquote><p>两个都是采用 Hash 定位的数据结构，底层都是以数组的形式。</p><p>但是 HashCode 的获取方式不同，HashMap 调用对象的 hashCode() 方法，而  ThreadLocalMap 中的 Key 就是 ThreadLocal，ThreadLocal 的 HashCode 是递增分配的。</p><p>另外处理 Hash 冲突的方式不同，ThreadLocalMap 采用的开放寻址法，而 HashMap 采用的是拉链法。</p>]]></content>
    
    
    <categories>
      
      <category>java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>jdk</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>浅析 Redis 的主从模式</title>
    <link href="/2021/05/28/%E6%B5%85%E8%B0%88Redis%E7%9A%84%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6%E6%A8%A1%E5%BC%8F/"/>
    <url>/2021/05/28/%E6%B5%85%E8%B0%88Redis%E7%9A%84%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6%E6%A8%A1%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<h1 id="Redis-的主从复制"><a href="#Redis-的主从复制" class="headerlink" title="Redis 的主从复制"></a>Redis 的主从复制</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>Redis 的主从复制是 Redis 官方推出的分布式机制，解决了部分集群问题。</p><p>官方后续的一些分布式的实现，包括 Sentinel 以及 Cluster 等，多多少少都用到了复制的功能。</p><h2 id="思维脑图"><a href="#思维脑图" class="headerlink" title="思维脑图"></a>思维脑图</h2><p><img src="https://chenqwwq.oss-cn-hangzhou.aliyuncs.com/note/assets/redis-master-slaver.png" alt="redis-master-slaver"></p><h2 id="相关实现"><a href="#相关实现" class="headerlink" title="相关实现"></a>相关实现</h2><h3 id="查看节点主从信息"><a href="#查看节点主从信息" class="headerlink" title="查看节点主从信息"></a>查看节点主从信息</h3><p>通过指令 <code>info replication</code>，可以单独查看服务器此时的主从信息。如下：</p><p><img src="https://chenqwwq.oss-cn-hangzhou.aliyuncs.com/note/assets/redis_info_replication_master.png" alt="redis-info-replication"></p><blockquote><p>role 表示当前节点的身份，master 表示是主节点</p><p>connected_slave 表示当前的子节点数，以及 slave0 就表示子节点信息。</p></blockquote><br><h3 id="主从关系的建立"><a href="#主从关系的建立" class="headerlink" title="主从关系的建立"></a>主从关系的建立</h3><p>Redis 服务器可以通过 <code>SLAVEOF &lt;ip&gt; &lt;port&gt;</code> 命令或者配置文件中 <code>slavof &lt;ip&gt; &lt;port&gt;</code> 的方式，建立主从关系。</p><p>被复制的服务器称为主服务器，当前服务器则称为从服务器。</p><p>需要注意的是，Redis 只支持一主多从的方式，一个从服务器只能对应一个主服务器。</p><br><p><strong>建立主从关系之后，从服务器就无法再执行写命令了，而是完全同步主服务器的数据。</strong></p><blockquote><p>即使在执行 AOF 或者 RDB 文件的过程中发现有过期的键也不会主动删除，只能等主服务器的同步。</p><p>因为无法执行命令，无法写入，所以<strong>主从模式仅仅只扩展了读属性，写入瓶颈依然存在。</strong></p></blockquote><br><p>该种主从复制模型非常适合读多写少的环境，复制相当于为主服务器中的数据创建多个复本，也算是一种<strong>容错策略</strong>。</p><p>单点的写入也一定程度上保证了一致性的要求。</p><blockquote><p>这里的一致性都是指最终一致性，<strong>因为命令的扩散也会有延迟</strong>，卡着延迟从从服务器中读取就会有数据不一致的问题。</p><p>因此如果对一致性的要求很高，或者必须要强一致性，建议不要从从服务器读取。</p></blockquote><p>复制模式可以分为<strong>数据同步</strong>以及<strong>命令传播</strong>两个阶段。</p><p>数据同步就是从服务器刚开始连接时的操作，全盘同步主服务器上的数据。</p><p>命令传播就是主服务器将本地执行过的命令再发送到从服务器(主服务器以客户端的身份发送命令到从服务器)。</p><br><p><strong>Redis 中对应数据同步的命令有两个 SYNC 和 PSYNC。</strong></p><h3 id="SYNC-旧版复制"><a href="#SYNC-旧版复制" class="headerlink" title="SYNC - 旧版复制"></a>SYNC - 旧版复制</h3><p>旧版的数据同步就是依托于 SYNC 命令，从服务器向主服务器发送该命令表示开启同步数据流程。</p><p><img src="https://chenqwwq.oss-cn-hangzhou.aliyuncs.com/note/assets/Redis_SYNC_%E6%B5%81%E7%A8%8B.png" alt="redis-sync基础流程"></p><p>主服务器首次接收到 <code>SYNC</code> 命令之后，会执行 BGSAVE 命令生成 RDB 文件，并在此时开启<strong>命令缓冲区</strong>，记录备份期间所有执行的写命令。</p><p>BGSAVE 执行完之后，会将生成的RDB文件发送给从服务器。</p><blockquote><p>此时如果于多个从服务器连接，RDB 文件是可以直接共享的。</p></blockquote><p>从服务器在接收到主服务器发送的 RDB 文件之后，会清空本地的所有数据，全盘载入 RDB 文件中的数据。</p><p>之后主服务器还会将缓冲区中的数据发送到从服务器，从服务器执行完缓冲区中的写命令，就达到了和主服务器的完全一致。</p><br><blockquote><p>旧版的复制很简单，主要就是生成 RDB 文件并传播指令。</p><p>问题就在于太过简单，<strong>即使网络波动导致的瞬时断连，在重连之后也会进行全量同步。</strong></p></blockquote><br><h3 id="PSYNC-新版本的数据同步"><a href="#PSYNC-新版本的数据同步" class="headerlink" title="PSYNC - 新版本的数据同步"></a>PSYNC - 新版本的数据同步</h3><p>PSYNC 命令是对 SYNC 命令的进一步优化，主要是 SYNC 只能进行全量同步，效率真的就不高，为此在 Redis2.8 版本之后，新增加了一个 PSYNC 命令。</p><p>PSYNC 命令完整的形式是 <code>PSYNC &lt;runid&gt; &lt;offest&gt;</code>，<strong>在全量同步的基础上增加了一个增量同步的过程判断。</strong></p></br><p>下面是增量同步中增加的概念：</p><ol><li><p>复制偏移量</p><p>按照字面意思也很好理解，是主从服务器各自维护的<strong>以字节为单位</strong>的属性，表示复制的进度。</p><p>比如当前主服务器的复制偏移量为10000，在发送了50个字节的内容之后，就变为了10050，可以认为是主从服务器数据不一致性程度的表示。</p><p>在 Sentinel 执行故障转移的时候也会以复制偏移量作为主要的参考依据。</p><blockquote><p>一定程度上，复制偏移量就表示从节点数据的完整性。</p></blockquote><br></li><li><p>复制缓冲区</p><p>复制缓冲区是由主服务器维护的一个固定长度的 FIFO 队列，该队列会缓存近期主服务器所执行的写命令。</p><br></li><li><p>主服务器 run ID</p><p>run ID 唯一标识一个 Redis 服务器。</p><p>实际上不论主从在服务器启动时都会生成一个 run ID，由40位随机的16进制字符组成。</p><p>此处的 run ID 是在从服务器连接到主服务器是由主服务器下发的自身的 run ID，重连之后通过判断 run ID 来确定是否为同一个 Master。</p></li></ol><br><p>PSYNC 的执行流程简述如下：</p><ol><li>判断 run ID 是否相同，不相同会直接开启全量同步的逻辑，相当于直接走 SYNC。</li><li>run ID 相同表示是断线重连，判断复制偏移量是否还在复制缓冲区中，如果超出表示超时时间过长，也需要走 SYNC。</li><li>如果复制偏移量未超出复制缓冲区，则直接将复制缓冲区中的命令发送到从服务器，从而避免全量同步。</li></ol><br><h2 id="Q-amp-A"><a href="#Q-amp-A" class="headerlink" title="Q&amp;A"></a>Q&amp;A</h2><blockquote><p>Q: 主从模式的优势</p></blockquote><p>横向扩展了读性能</p><p>备份数据，强化数据安全</p><br><blockquote><p>Q: 主从模式的存在的问题</p></blockquote><p>对于写性能并没有提高，可能出于一致性的考虑，Redis 的主从模式并不允许从从服务器写入。</p><p>非强一致性，命令的扩散存在一定的延时，此时主从的数据并不一致。</p><p>单点故障问题，因为只能从主节点写入，单点故障问题很难避免，只要主节点宕机，整个集群就不可写入。</p><br><blockquote><p>Q: PSYNC 的优化</p></blockquote><p>PSYNC 借由复制缓冲区实现了对断线重连的容忍机制，如果断线时间断，可以从复制缓冲区中找到缺失的命令就可以进行部分重同步，而避免每次都是全量同步。</p>]]></content>
    
    
    <categories>
      
      <category>redis</category>
      
    </categories>
    
    
    <tags>
      
      <tag>redis</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
