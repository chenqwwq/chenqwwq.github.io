<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>浅析Redis的主从和哨兵机制</title>
    <link href="/2021/05/28/%E6%B5%85%E6%9E%90Redis%E7%9A%84%E4%B8%BB%E4%BB%8E%E5%92%8C%E5%93%A8%E5%85%B5%E6%9C%BA%E5%88%B6/"/>
    <url>/2021/05/28/%E6%B5%85%E6%9E%90Redis%E7%9A%84%E4%B8%BB%E4%BB%8E%E5%92%8C%E5%93%A8%E5%85%B5%E6%9C%BA%E5%88%B6/</url>
    
    <content type="html"><![CDATA[<h1 id="浅谈Redis的主从复制和-Sentinel"><a href="#浅谈Redis的主从复制和-Sentinel" class="headerlink" title="浅谈Redis的主从复制和 Sentinel"></a>浅谈Redis的主从复制和 Sentinel</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>Redis 的主从模式和 Sentinel 分别解决的是 Redis 的读性能瓶颈以及单点故障问题。</p><h2 id="Redis的主从复制模式"><a href="#Redis的主从复制模式" class="headerlink" title="Redis的主从复制模式"></a>Redis的主从复制模式</h2><h3 id="思维脑图"><a href="#思维脑图" class="headerlink" title="思维脑图"></a>思维脑图</h3><p><img src="https://chenqwwq-note.oss-cn-hangzhou.aliyuncs.com/img/Redis-master-slaver.png" alt="image-20210528000112558"></p><h3 id="相关原理"><a href="#相关原理" class="headerlink" title="相关原理"></a>相关原理</h3><p>Redis 可以通过 <code>SLAVEOF &lt;ip&gt; &lt;port&gt;</code> 指令或者配置文件 <code>slavof &lt;ip&gt; &lt;port&gt;</code> 的方式，让当前服务器去复制另外一个 Redis 服务器。</p><p>被复制的服务器称为主服务器，复制的服务器则称为从服务器，以此形成一种主从关系 (Master-Slave 关系)。</p><p>建立主从关系之后，从服务器就无法再执行写命令了，而是完全同步主服务器的数据。</p><blockquote><p>就算在执行 AOF 或者 RDB 文件的过程中发现有过期的键也不能删除，只能等主服务器的同步。</p><p>因为无法执行命令，无法写入，所以主从模式仅仅只扩展了读属性，写入瓶颈依然存在。</p></blockquote><p>通过指令 <code>info replication</code>，可以单独查看服务器此时的主从信息。如下：</p><p><img src="https://chenqwwq-note.oss-cn-hangzhou.aliyuncs.com/img/redis_info_replication_master.png" alt="image-20191109232601445"></p><blockquote><p>role 表示当前节点的身份，master 表示是主节点</p><p>connected_slave 表示当前的子节点数，以及 slave0 就表示子节点信息。</p></blockquote><p>该种主从复制模型非常适合读多写少的环境，而且仅从主服务器写入一定程度上也不需要担心数据一致性问题。</p><p>另外的复制相当于为主服务器中的数据创建多个复本，也算是一种容错策略。</p><p>需要注意的是这里的一致性都是指最终一致性，<strong>因为命令的扩散也会有延迟</strong>，卡着延迟从从服务器中读取就会有数据不一致的问题。</p><p>因此如果对一致性的要求很高，或者必须要强一致性，建议还是不要从从服务器读取。</p><p>复制模式可以分为<strong>数据同步</strong>以及<strong>命令传播</strong>两个阶段。</p><p>数据同步就是从服务器刚开始连接时的操作，全盘同步主服务器上的数据。</p><p>命令传播就是主服务器将本地执行过的命令再发送到从服务器(相当于主服务器以客户端的身份)</p><p>Redis中对应数据同步的命令有两个<code>SYNC</code>和<code>PSYNC</code>。</p><h4 id="旧版的数据同步"><a href="#旧版的数据同步" class="headerlink" title="旧版的数据同步"></a>旧版的数据同步</h4><p>旧版的数据同步就是依托于<code>Sync</code>命令，由从服务器发送给主服务器表示开启同步数据。</p><p><img src="https://chenqwwq-note.oss-cn-hangzhou.aliyuncs.com/img/Redis_SYNC_%E6%B5%81%E7%A8%8B.png" alt="image-20191109154905723"></p><p>主服务器首次接收到<code>Sync</code>命令之后，会执行<code>BGSAVE</code>命令生成RDB文件，并在此时开启<strong>命令缓冲区</strong>，记录之后所有执行的写命令。</p><p>BGSAVE执行完之后，会将生成的RDB文件发送给从服务器(此时如果于多个从服务器连接，RDB文件可以直接共享)。</p><p>从服务器在接收到主服务器发送的RDB文件之后，会清空本地的所有数据，载入RDB文件中的数据。</p><p>之后主服务器还会将缓冲区中的数据发送到从服务器，从服务器执行完缓冲区中的写命令，就达到了和主服务器的完全一致。</p><h4 id="新版本的数据同步"><a href="#新版本的数据同步" class="headerlink" title="新版本的数据同步"></a>新版本的数据同步</h4><p><code>PSYNC</code>命令是对<code>SYNC</code>命令的进一步优化，主要是<code>SYNC</code>只能进行全量同步。</p><p>就算是因为网络抖动造成的秒断秒连的情况可能都会需要重新生成RDB文件并同步，效率真的就不高，为此在Redis2.8版本之后，新增加了一个<code>PSYNC</code>命令。</p><p><code>PSYNC</code>命令完整的形式是<code>PSYNC &lt;runid&gt; &lt;offest&gt;</code>，在全量同步的基础上增加了一个增量同步的过程判断。</p><p>下面是增量同步相关的一些概念：</p><ol><li><p>复制偏移量</p><p>按照字面意思也很好理解，是主从服务器各自维护的以字节为单位的属性，表示复制的进度。</p><p>比如当前主服务器的复制偏移量为10000，在发送了50个字节的内容之后，就变为了10050，可以认为是主从服务器数据不一致性程度的表示。</p><p>在Sentinel执行故障转移的时候也会以复制偏移量作为主要的参考依据。</p></li><li><p>复制缓冲区</p><p>复制缓冲区是由主服务器维护的一个固定长度的FIFO队列。</p><p>该队列会缓存近期主服务器所执行的写命令。</p></li><li><p>主服务器 run ID</p><p>run ID唯一标识一个Redis服务器。</p><p>实际上不论主从在服务器启动时都会生成一个run ID，由40位随机的16进制字符组成。</p><p>此处的run ID是在从服务器连接到主服务器是由主服务器下发的自身的run ID。</p></li></ol><p>PSYNC的执行流程如下：</p><p>接收到<code>PSYNC</code>命令之后，主服务器会判断，如果runId不符合，说明主服务器已经改变，则会直接走旧版<code>SYNC</code>的逻辑。</p><p>如果是断线重连的情况则会根据双方的<code>复制偏移量</code>以及<code>复制缓冲区</code>长度的对比，来决定是部分还是完整重同步。</p><p>复制积压缓冲区里的每个字节都会有自己的偏移量属性，主服务器会判断<code>PSYNC</code>传过来的从服务器复制偏移量是否还在缓冲区中。</p><p>如果此时缓冲区中最小的偏移量都大于从服务器的复制偏移量，则还是会走旧版的<code>SYNC</code>逻辑。</p><p>如果从服务器的<strong>复制偏移量仍存在于积压缓冲区则进行部分重同步。</strong></p><p><strong>部分重同步简单来说就是发送积压缓冲区中从服务器复制偏移量之后的所有数据。</strong></p><p>Redis的主从模式允许服务器横向扩展，增加容错性以及读的性能。</p><p>但整个的存储上限仍然受单台服务器的限制，主从模式保存相同的数据仅仅是一个数据备份，</p><p>更重要的是单主结构会带来单点问题，如果主服务器宕机，基本全完。</p><h2 id="Sentinel-哨兵模式"><a href="#Sentinel-哨兵模式" class="headerlink" title="Sentinel 哨兵模式"></a>Sentinel 哨兵模式</h2><p><code>Sentinel</code>是Redis的高可用解决方案，仅仅依靠主从复制在主服务器宕机之后主服务器所在的整个模块就会进入只读状态(Redis不存在主主复制的模式)，无法写入或更新数据。</p><p><code>Sentinel模式</code>就是指一个或者多个Sentinel服务器，监视一个或多个的主服务器及其从服务器。</p><p>在主服务器宕机时，激活故障转移功能，从该主服务器下的从服务器中选取一台作为新的主服务器，从而保证整个系统在短时间内恢复可用。</p><p><code>Sentinel</code>就是特殊的<code>Redis</code>服务器，和普通的<code>Redis</code>服务器共用一部分代码，但又有一套自己的数据结构和指令集(所以GET/SET等命令也就不可用)。</p><h4 id="Sentinel建立的相关流程"><a href="#Sentinel建立的相关流程" class="headerlink" title="Sentinel建立的相关流程"></a>Sentinel建立的相关流程</h4><h5 id="1-根据配置，初始化Master服务器连接"><a href="#1-根据配置，初始化Master服务器连接" class="headerlink" title="1. 根据配置，初始化Master服务器连接"></a>1. 根据配置，初始化Master服务器连接</h5><p><code>Sentinel</code>服务器初始化时就会在自身的<code>sentinelRedisInstance.masters</code>中记录下所监视的所有主服务器信息。</p><p>连接服务器时，<code>Sentinel</code>不仅仅会建立普通的<strong>命令连接</strong>，也会建立一个<strong>订阅连接</strong>，用于创建并订阅主服务器的<code>_sentinel_:hello</code>频道。</p><p>额外创建<strong>订阅连接</strong>的原因除了订阅之外，是因为<code>Redis</code>的发布订阅模块并不提供确保到达的机制，消息发送时如果因为网络抖动而未到达接收方，那就会直接丢失这条消息。</p><p>完成第一步骤后，<code>Sentinel</code>就有了包含主服务器在内的集群拓扑。</p><h5 id="2-获取从服务器信息"><a href="#2-获取从服务器信息" class="headerlink" title="2. 获取从服务器信息"></a>2. 获取从服务器信息</h5><p><code>Sentinel</code>会以<strong>一定的频率</strong>向所监视的主服务器发送<code>INFO</code>命令，来获取对应主服务器的消息。</p><p>获取到的信息里面包括主从消息<code>Replication</code>，因此也就获取到了从服务器的信息。 </p><h5 id="3-连接从服务器"><a href="#3-连接从服务器" class="headerlink" title="3. 连接从服务器"></a>3. 连接从服务器</h5><p> 在上一步获取到从服务器的信息以后，<code>Sentinel</code>同样也会和每个从服务器建立两条连接。</p><p>并按一定频率发送<code>INFO</code>命令，获取从服务器的具体信息。</p><p>至此<code>Sentinel</code>的当前网络结构拓扑中新增了从服务器。</p><h5 id="4-向订阅的所有主从服务器的-sentinel-hello-频道发送消息"><a href="#4-向订阅的所有主从服务器的-sentinel-hello-频道发送消息" class="headerlink" title="4. 向订阅的所有主从服务器的_sentinel:hello_频道发送消息"></a>4. 向订阅的所有主从服务器的<code>_sentinel:hello_</code>频道发送消息</h5><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gradle"><span class="hljs-keyword">PUBLIC</span> _sentinel:hello_  <span class="hljs-string">&quot;s_ip,s_port,s_runId,s_epoch,m_name,m_ip,m_port,m_epoch&quot;</span><br></code></pre></td></tr></table></figure><p>消息中包含的分别是<strong>Sentinel的ip，端口，runId，年代，主服务器的name，ip，端口，年代</strong></p><p>注意，Sentinel向从服务器发送的消息，是他们所复制的主服务器的信息。</p><p>同样的消息是以一定的频率循环发送的。</p><p>因为所有的Sentinel服务器都会定于这个频道，所以也就相当于发送给所有的Sentinel服务器。</p><h5 id="5-接收-sentinel-hello-频道的消息，发现新加入的Sentinel"><a href="#5-接收-sentinel-hello-频道的消息，发现新加入的Sentinel" class="headerlink" title="5. 接收_sentinel:hello_频道的消息，发现新加入的Sentinel"></a>5. 接收<code>_sentinel:hello_</code>频道的消息，发现新加入的Sentinel</h5><p>通过频道的订阅，<code>Sentinel</code>会收到急群众其他<code>Sentinel</code>的消息。</p><p>以此为根据<code>Sentinel</code>会在该主节点的数据实例中记录下所有监听他的<code>Sentinel</code>的相关信息。</p><h5 id="6-和其他的Sentinel建立命令连接"><a href="#6-和其他的Sentinel建立命令连接" class="headerlink" title="6. 和其他的Sentinel建立命令连接"></a>6. 和其他的<code>Sentinel</code>建立命令连接</h5><p><code>Sentinel</code>之间不会建立订阅连接，仅仅只有命令连接。</p><p>至此，<code>Sentinel</code>系统完整的拓扑图构造完成。</p><p>和主服务器建立连接没得说，监视的就是主服务器的情况。</p><p>和从服务器建立连接则是为了故障转移之后的选主，需要和从服务器交互。</p><p>和其他的<code>Sentinel</code>则是因为选主，不可能在失效之后每个<code>Sentinel</code>各自选择一个从服务器升为主服务器。</p><p><img src="https://chenqwwq-note.oss-cn-hangzhou.aliyuncs.com/img/Sentinel%E7%BB%93%E6%9E%84.png" alt="image-20191109233459918"></p><h4 id="故障转移流程"><a href="#故障转移流程" class="headerlink" title="故障转移流程"></a>故障转移流程</h4><h5 id="1-主观下线检测"><a href="#1-主观下线检测" class="headerlink" title="1. 主观下线检测"></a>1. 主观下线检测</h5><p> <strong><code>Sentinel</code>每秒都会向命令连接(包括主从服务器以及其他Sentinel)发送一个<code>PING</code>命令</strong>,并通过返回确定对方当前的状态。</p><p>有效返回有以下几种:<code>PONG</code>，<code>LOADING</code>，<code>MASTERDOWN</code>。(这里暂时忽略有效返回代表的意思)</p><p>如果对方服务器在<code>down-after-milliseconds</code>毫秒内(配置文件中指明)，没有返回一个有效返回，则当前服务器认定对方为主观下线，并修改实例对象中的状态。</p><p>如果是主服务器则进入客观下线检测的流程。</p><p><strong>如果是从服务器，那么在修改完对象中的状态后，就不会有别的操作。</strong></p><p>从服务器重新开启在线状态就需要通过<code>Sentinel</code>向其主服务器发送的<code>INFO</code>命令中的返回信息。</p><h5 id="2-客观下线检测"><a href="#2-客观下线检测" class="headerlink" title="2. 客观下线检测"></a>2. 客观下线检测</h5><p><code>Sentinel</code>会发送如下命令询问别的<code>Sentinel</code>服务器是否认为该主服务器已经下线：</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs applescript">SENTINEL <span class="hljs-keyword">is</span>-master-down-<span class="hljs-keyword">by</span>-addr ip port epoch runId<br></code></pre></td></tr></table></figure><p>在接收到超过<code>quorum</code>(配置文件配置，一般是1/2)的确认下线之后，当前<code>Sentinel</code>才会认为目标服务器却是下线了，并开启以下的故障转移流程。</p><p>前三个参数都是下线的Master的，但是run Id不是。</p><p>run Id可以为符号<code>*</code>表示此次仅为客观下线检测，也可以为当前<code>Sentinel</code>的run Id，该参数用于此后的选举过程，表示希望选举自己为头节点。</p><p>对于以上命令，接收的<code>Sentinel</code>会回复三个参数：</p><ol><li><code>down_state</code>   -   目标主服务器下线状态，1为已下线，0为未下线</li><li><code>leader_runid</code>  -   表示当前<code>Sentinel</code>选定的头节点的run id，<code>*</code>表示此次仅为客观下线检测</li><li><code>leader_epoch</code>  -   表示选定的头节点的 epoch</li></ol><h5 id="3-选举头节点"><a href="#3-选举头节点" class="headerlink" title="3. 选举头节点"></a>3. 选举头节点</h5><p>首先，监视下线节点的所有<code>Sentinel</code>会协商，选举出一个Leader，来完成接下来的故障转移功能。</p><p>Redis的选举算法是对<code>Raft算法</code>简单实现。</p><p><code>Raft算法</code>是一种分布式日志共识算法，如果不了解<code>Raft算法</code>，可以参考<a href="http://thesecretlivesofdata.com/raft/">Raft算法的动画演示</a>做一个简单了解。</p><p>选举有以下规则：</p><ol><li>每次选举不论是否成功，当前<code>epoch</code>自增一次。</li><li>每次选举，每个<code>Sentinel</code>都只能选举一个头节点，且不能修改。</li><li>每个<code>Sentinel</code>都有资格成为头节点。</li><li>每个发现客观下线的<code>SENTINEL</code>都会要求其他节点选举自己为头节点。</li><li>如果超过半数以上的<code>Sentinel</code>选了同一个<code>Sentinel</code>，那么选举成功，该<code>Sentinel</code>成为头节点。</li><li>给定时限之内没有结果，则当前选举失败，开启下一轮选举。</li><li><code>SENTINEL is-master-down-by-addr</code>作为<code>Sentinel</code>节点间的通信。</li></ol><h5 id="4-故障转移"><a href="#4-故障转移" class="headerlink" title="4. 故障转移"></a>4. 故障转移</h5><p>由上一步选举产生的头节点执行故障转移操作。</p><p><strong>选择新的主服务器</strong></p><p>从下线主服务器的所有从服务器中挑选一个作为新的主服务器，发送<code>SLAVEOF NO ONE</code>命令，并以每秒一次的频率发送<code>INFO</code>命令，监控该从服务器当前的状态。</p><p><code>SLAVEOF NO ONE</code>并不一定能很快到达并执行，所以需要状态监控。</p><p><img src="https://chenqwwq-note.oss-cn-hangzhou.aliyuncs.com/img/redis_info_replication_slave.png" alt="image-20191109233931424"></p><p>就是上图中的<code>role</code>字段从<code>slave</code>变为<code>master</code>，表示从服务器已经变为主服务器。</p><p><strong>修改其他从服务器的复制目标</strong></p><p>直接发送<code>SLAVEOF ip port</code>命令，将其他从服务器的复制目标指向新的主服务器</p><p><strong>将旧主服务器降为从服务器</strong></p><p>和第二步的发送命令不同，此时旧服务器可能还处于掉线状态并没办法接受到<code>SLAVEOF</code>命令，所以此处的修改仅仅在<code>Sentinel</code>内部的数据结构中。</p>]]></content>
    
    
    <categories>
      
      <category>redis</category>
      
    </categories>
    
    
    <tags>
      
      <tag>redis</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
