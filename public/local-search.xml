<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>ThreadLocal深入解析</title>
    <link href="/2021/05/30/ThreadLocal%E5%AE%9E%E7%8E%B0%E8%A7%A3%E6%9E%90/"/>
    <url>/2021/05/30/ThreadLocal%E5%AE%9E%E7%8E%B0%E8%A7%A3%E6%9E%90/</url>
    
    <content type="html"><![CDATA[<h1 id="ThreadLocal"><a href="#ThreadLocal" class="headerlink" title="ThreadLocal"></a>ThreadLocal</h1><h2 id="思维导图"><a href="#思维导图" class="headerlink" title="思维导图"></a>思维导图</h2><p><img src="https://chenqwwq.oss-cn-hangzhou.aliyuncs.com/note/assets/ThreadLocal.png" alt="ThreadLocal思维导图"></p><br><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>ThreadLocal（线程局部变量），作用是<strong>保存每个线程的私有变量</strong>，以空间换时间的方式，为每一个线程保存一份<strong>私有</strong>变量，也就不存在所谓的并发问题。</p><blockquote><p>真实的数据并不会存在 ThreadLocal 中。</p><p>实际上，数据都保存在 Thread 对象中 Thread#threadLocals 这个成员变量里，所以一定程度上 ThreadLocal 只是一个操作该集合的工具类。</p></blockquote><br><p>以下就是 ThreadLocalMap 在Thread中的变量声明:</p><p> <img src="https://chenqwwq.oss-cn-hangzhou.aliyuncs.com/note/assets/ThreadLocalMap%E7%9A%84%E5%8F%98%E9%87%8F%E5%A3%B0%E6%98%8E.png" alt="ThreadLocalMap的变量声明"></p><blockquote><p>threadLocals 是给 ThreadLocal 用的，该类只能访问当前线程中的数据。</p><p>inheritableThreadLocal 是给 InheritableThreadLocal 用的，使用该类子线程可以访问到父线程的数据。</p></blockquote><br><h2 id="ThreadLocal-的相关操作"><a href="#ThreadLocal-的相关操作" class="headerlink" title="ThreadLocal 的相关操作"></a>ThreadLocal 的相关操作</h2><ul><li><code>ThreadLocal</code>的内部方法因为逻辑都不复杂,不需要单独出来看,就直接全放一块了.</li></ul><h3 id="数据获取-Get"><a href="#数据获取-Get" class="headerlink" title="数据获取 - Get"></a>数据获取 - Get</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs java">  <span class="hljs-comment">// 直接获取线程私有的数据</span><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> T <span class="hljs-title">get</span><span class="hljs-params">()</span> </span>&#123;<br>       <span class="hljs-comment">// 获取当前线程</span><br>       Thread t = Thread.currentThread();<br>       <span class="hljs-comment">// getMap其实很简单就是获取`t`中的`threadLocals`,代码在`工具方法`中</span><br>       ThreadLocalMap map = getMap(t); <br>       <span class="hljs-keyword">if</span> (map != <span class="hljs-keyword">null</span>) &#123;<span class="hljs-comment">// 3.</span><br>           ThreadLocalMap.Entry e = map.getEntry(<span class="hljs-keyword">this</span>);<br>           <span class="hljs-keyword">if</span> (e != <span class="hljs-keyword">null</span>) &#123;<span class="hljs-comment">// 2.</span><br>               <span class="hljs-meta">@SuppressWarnings(&quot;unchecked&quot;)</span><br>               T result = (T)e.value;<br>               <span class="hljs-keyword">return</span> result;<br>           &#125;<br>       &#125;<br>       <span class="hljs-keyword">return</span> setInitialValue();  <span class="hljs-comment">// 1.</span><br>   &#125;<br><span class="hljs-comment">// 这个方法只有在上面`1.`处调用...不知道为什么map,thread不直接传参</span><br><span class="hljs-comment">// 该方法的功能就是为`Thread`设置`threadLocals`的初始值</span><br>   <span class="hljs-function"><span class="hljs-keyword">private</span> T <span class="hljs-title">setInitialValue</span><span class="hljs-params">()</span> </span>&#123;<br>       T value = initialValue();<br>       Thread t = Thread.currentThread();<br>       ThreadLocalMap map = getMap(t);<br>       <span class="hljs-comment">// map不为null表明是从上面的`2.`处进入该方法</span><br>       <span class="hljs-comment">// 已经初始化`threadLocals`,但并未找到当前对应的`Entry`</span><br>       <span class="hljs-comment">// 所以此时直接添加`Entry`就行</span><br>       <span class="hljs-keyword">if</span> (map != <span class="hljs-keyword">null</span>)<br>           map.set(<span class="hljs-keyword">this</span>, value);<br>       <span class="hljs-keyword">else</span><br>           createMap(t, value);<br>       <span class="hljs-keyword">return</span> value;<br>   &#125;<br>     <span class="hljs-comment">// 初始值,`protected`方便子类继承,并定义自己的初始值.</span><br>     <span class="hljs-function"><span class="hljs-keyword">protected</span> T <span class="hljs-title">initialValue</span><span class="hljs-params">()</span> </span>&#123;<br>       <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>     &#125;<br><br><span class="hljs-comment">// 创建并赋值`threadLocals`的方法</span><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">createMap</span><span class="hljs-params">(Thread t, T firstValue)</span> </span>&#123;<br>       t.threadLocals = <span class="hljs-keyword">new</span> ThreadLocalMap(<span class="hljs-keyword">this</span>, firstValue);<br>   &#125;<br></code></pre></td></tr></table></figure><p>整个获取的过程其实并不难：</p><ol><li>通过 Thread#currentThread 方法获取当前线程对象。</li><li>首先通过 getMap 方法获取当前线程绑定的 threadLocals。</li><li>不要为空时，以当前 ThreadLocal 对象为参数获取对应的Entry 对象，为空跳到第四步。</li><li>获取 Entry 对象中的 value ，并返回。</li><li>调用 setInitialValue方法，并返回。</li></ol><br><p>这里可以很明显的看出来，数据其实还是保存在 Thread 对象里的。</p><p>通过 setInitialValue 方法可以设定初始值。</p><blockquote><p>例如，希望统计每个线程的某个操作计数，那么就可以用如下的方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">ThreadLocal&lt;Integer&gt; counter = <span class="hljs-keyword">new</span> ThreadLocal&lt;Integer&gt;() &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> Integer <span class="hljs-title">initialValue</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p>以 0 为初始值做统计。</p></blockquote><br><br><h3 id="数据存储-Set"><a href="#数据存储-Set" class="headerlink" title="数据存储 - Set"></a>数据存储 - Set</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">set</span><span class="hljs-params">(T value)</span> </span>&#123;<br>       <span class="hljs-comment">// 获取当前线程</span><br>       Thread t = Thread.currentThread();<br>       ThreadLocalMap map = getMap(t);     <span class="hljs-comment">// .1</span><br>       <span class="hljs-keyword">if</span> (map != <span class="hljs-keyword">null</span>)<br>           map.set(<span class="hljs-keyword">this</span>, value);<br>       <span class="hljs-keyword">else</span><br>           createMap(t, value);<br>&#125;<br></code></pre></td></tr></table></figure><p>流程简述如下：</p><ol><li>获取当前线程,并以此获取线程绑定的 ThreadLocalMap 对象。</li><li>map 不为空时,直接set。</li><li>map 为空时需要先创建 Map 并赋值。</li></ol><p><br><br></p><h2 id="ThreadLocalMap"><a href="#ThreadLocalMap" class="headerlink" title="ThreadLocalMap"></a>ThreadLocalMap</h2><p>ThreadLocalMap 类似于 HashMap ，也是使用 Hash 算法定位存取的数据结构，以 ThreadLocal 对象为 Key。</p><p>Hash 算法合理时 ThreadLocalMap 的存取操作近乎是 O(1) 的复杂度。</p><p><code>ThreadLocalMap</code> 出人意料的并没有继承任何一个类或接口，是完全独立的类，以为会像 HashMap 一样继承一下 AbstractMap。</p><br><h3 id="成员变量"><a href="#成员变量" class="headerlink" title="成员变量"></a>成员变量</h3>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 默认的初始容量 一定要是二的次幂</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> INITIAL_CAPACITY = <span class="hljs-number">16</span>;<br><span class="hljs-comment">// 元素数组/条目数组</span><br><span class="hljs-keyword">private</span> Entry[] table;<br><span class="hljs-comment">// 大小,用于记录数组中实际存在的Entry数目</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> size = <span class="hljs-number">0</span>;<br><span class="hljs-comment">// 阈值</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> threshold; <span class="hljs-comment">// Default to 0 构造方法</span><br></code></pre></td></tr></table></figure><blockquote><p><strong>ThreadLocalMap 的底层数据结构是 Entry 的数组，</strong>并且默认容量为16。</p></blockquote><br><p>以下为 Entry 对象的声明形式：</p><p> <img src="https://chenqwwq-img.oss-cn-beijing.aliyuncs.com/img/image-20210221154222208.png" alt="image-20210221154222208"></p><blockquote><p>WeakReference 声明了 Entry 对象对于 Key ，也就是 ThreadLocal 对象的引用是弱引用。</p><p><strong>弱引用消除了 ThreadLocalMap 的引用对 ThreadLocal  的对象回收的影响，</strong>这是 ThreadLocal 避免内存泄漏的核心。</p></blockquote><br><h3 id="元素获取"><a href="#元素获取" class="headerlink" title="元素获取"></a>元素获取</h3><h4 id="getEntry-ThreadLocal-lt-gt-key"><a href="#getEntry-ThreadLocal-lt-gt-key" class="headerlink" title="getEntry(ThreadLocal&lt;?&gt; key)"></a>getEntry(ThreadLocal&lt;?&gt; key)</h4><ul><li>该方法就是通过 ThreadLocal 对象获取对应的数据。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">private</span> Entry <span class="hljs-title">getEntry</span><span class="hljs-params">(ThreadLocal&lt;?&gt; key)</span> </span>&#123;<br>    <span class="hljs-comment">// 和HashMap中一样的下标计算方式</span><br>    <span class="hljs-keyword">int</span> i = key.threadLocalHashCode &amp; (table.length - <span class="hljs-number">1</span>);<br>    Entry e = table[i];<br>    <span class="hljs-comment">// 获取到对应的Entry之后就分两步</span><br>    <span class="hljs-keyword">if</span> (e != <span class="hljs-keyword">null</span> &amp;&amp; e.get() == key)<br>        <span class="hljs-comment">// 1. e不为空且threadLocal相等</span><br>        <span class="hljs-keyword">return</span> e;<br>    <span class="hljs-keyword">else</span><br>        <span class="hljs-comment">// 2. e为空或者threadLocal不相等</span><br>        <span class="hljs-keyword">return</span> getEntryAfterMiss(key, i, e);<br>&#125;<br></code></pre></td></tr></table></figure><p>起手就是一个 HashCode &amp; (len - 1)，和 HashMap 类似，但ThreadLocal 的 HashCode 和 HashMap 中的直接调用 hashCode() 方法不同。</p><p>ThreadLocal 是采用递增的形式，而非直接计算对象的 HashCode。</p><br> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> threadLocalHashCode = nextHashCode();<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> AtomicInteger nextHashCode = <span class="hljs-keyword">new</span> AtomicInteger();  <br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> <span class="hljs-title">nextHashCode</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">return</span> nextHashCode.getAndAdd(HASH_INCREMENT);<br>&#125;<br></code></pre></td></tr></table></figure><p> 以上就是 HashCode 的获取方式，<strong>是以类变量的方式递增获取</strong>，相对于直接调用 hashCode() 可以更好的减少 hash 冲突。</p><blockquote><p>每次创建一个 ThreadLocal，hashCode 都会+1，所以能使数据更加均匀的散布在数组中，更好的减少 hash 冲突。</p></blockquote><br><p>如果hash计算出来的下标存在想要的元素就直接返回，如果获取元素为空还会再调用 <code>getEntryAfterMiss</code> 做冲突查询的后续处理.</p><p><br><br></p><h4 id="getEntryAfterMiss-ThreadLocal-lt-gt-key-int-i-Entry-e"><a href="#getEntryAfterMiss-ThreadLocal-lt-gt-key-int-i-Entry-e" class="headerlink" title="getEntryAfterMiss(ThreadLocal&lt;?&gt; key, int i, Entry e)"></a>getEntryAfterMiss(ThreadLocal&lt;?&gt; key, int i, Entry e)</h4><ul><li>该方法是在直接按照 <code>Hash</code> 计算下标后，没获取到对应的 <code>Entry</code> 对象的时候调用，<strong>下标处不是想要的元素就说明出现了 Hash 冲突。</strong></li></ul><p>以下为方法源码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">private</span> Entry <span class="hljs-title">getEntryAfterMiss</span><span class="hljs-params">(ThreadLocal&lt;?&gt; key, <span class="hljs-keyword">int</span> i, Entry e)</span> </span>&#123;<br>        Entry[] tab = table;<br>        <span class="hljs-keyword">int</span> len = tab.length;<br>        <span class="hljs-comment">// 此时注意如果从上面情况`2.`进来时,</span><br>        <span class="hljs-comment">// e为空则直接返回null,不会进入while循环</span><br>        <span class="hljs-comment">// 只有e不为空且e.get() != key时才会进while循环</span><br>        <span class="hljs-keyword">while</span> (e != <span class="hljs-keyword">null</span>) &#123;<br>            ThreadLocal&lt;?&gt; k = e.get();<br>            <span class="hljs-comment">// 找到相同的k,返回得到的Entry,get操作结束</span><br>            <span class="hljs-keyword">if</span> (k == key)<br>                <span class="hljs-keyword">return</span> e;<br>            <span class="hljs-comment">// 若此时的k为空,那么e则被标记为`Stale`需要被`expunge`</span><br>            <span class="hljs-keyword">if</span> (k == <span class="hljs-keyword">null</span>)<br>                expungeStaleEntry(i);<br>            <span class="hljs-keyword">else</span><span class="hljs-comment">// 下面两个都是遍历的相关操作</span><br>                <span class="hljs-comment">// nextIndex就是+1判断是否越界</span><br>                i = nextIndex(i, len);<br>            e = tab[i];<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p><strong>在判断出现 hash 冲突之后，直接往后线性查找之后的数组元素。</strong></p></blockquote><br><br><h4 id="expungeStaleEntry-int-staleSlot"><a href="#expungeStaleEntry-int-staleSlot" class="headerlink" title="expungeStaleEntry(int staleSlot)"></a>expungeStaleEntry(int staleSlot)</h4><ul><li>该方法用来清除 <code>staleSlot</code> 位置的 Entry 对象,并且会<strong>清理当前节点到下一个 <code>null</code> 节点中间的过期 <code>Entry</code>.</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/** </span><br><span class="hljs-comment">  * 清空旧的Entry对象</span><br><span class="hljs-comment">  * <span class="hljs-doctag">@param</span> staleSlot: 清理的起始位置</span><br><span class="hljs-comment">  * <span class="hljs-doctag">@param</span> return: 返回的是第一个为空的Entry下标</span><br><span class="hljs-comment">  */</span><br> <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> <span class="hljs-title">expungeStaleEntry</span><span class="hljs-params">(<span class="hljs-keyword">int</span> staleSlot)</span> </span>&#123;<br>         Entry[] tab = table;<br>         <span class="hljs-keyword">int</span> len = tab.length;<br>     <span class="hljs-comment">// 清空`staleSlot`位置的Entry</span><br>     <span class="hljs-comment">// value引用置为空之后,对象被标记为不可达,下次GC就会被回收.</span><br>         tab[staleSlot].value = <span class="hljs-keyword">null</span>;<br>         tab[staleSlot] = <span class="hljs-keyword">null</span>;<br>         size--;<br>         Entry e;<br>         <span class="hljs-keyword">int</span> i;<br>     <span class="hljs-comment">// 通过nextIndex从`staleSlot`的下一个开始向后遍历Entry数组,直到e不为空</span><br>      <span class="hljs-comment">// e赋值为当前的Entry对象</span><br>         <span class="hljs-keyword">for</span> (i = nextIndex(staleSlot, len);<br>              (e = tab[i]) != <span class="hljs-keyword">null</span>;<br>              i = nextIndex(i, len)) &#123;<br>             ThreadLocal&lt;?&gt; k = e.get();<br>             <span class="hljs-comment">// 当k为空的时候清空节点信息</span><br>             <span class="hljs-keyword">if</span> (k == <span class="hljs-keyword">null</span>) &#123;<br>                 e.value = <span class="hljs-keyword">null</span>;<br>                 tab[i] = <span class="hljs-keyword">null</span>;<br>                 size--;<br>             &#125; <span class="hljs-keyword">else</span> &#123;<span class="hljs-comment">// 以下为k存在的情况</span><br>                 <span class="hljs-keyword">int</span> h = k.threadLocalHashCode &amp; (len - <span class="hljs-number">1</span>);<br>                 <span class="hljs-comment">// 元素下标和key计算的不一样，表明是出现`Hash碰撞`之后调整的位置</span><br>                 <span class="hljs-comment">// 将当前的元素移动到下一个null位置</span><br>                 <span class="hljs-keyword">if</span> (h != i) &#123;<br>                     tab[i] = <span class="hljs-keyword">null</span>;<br>                     <span class="hljs-keyword">while</span> (tab[h] != <span class="hljs-keyword">null</span>)<br>                         h = nextIndex(h, len);<br>                     tab[h] = e;<br>                 &#125;<br>             &#125;<br>         &#125;<br>         <span class="hljs-keyword">return</span> i;<br>     &#125; <br></code></pre></td></tr></table></figure><p>该方法是对内存泄露的进一步处理。</p><p><strong>如果将ThreadLocal的内存泄露问题分成两个部分来看，一个是 Key，另外一个就是 Value。</strong></p><p><strong>Key 的部分依靠弱引用清除，如果外部的强引用断开之后，也就是没有地方在使用到该 Key 之后，Key 会被 GC 回收，所以引用就为 null。</strong></p><p>从而判断 Key 为 null 的 Value 就是 Stale 的对象，则靠该方法清除。</p><blockquote><p>ThreadLocal 靠弱引用清除的只有 Key 对象，还有 Value 对象则需要靠扫描，所以内存泄露的情况并不是能够完全避免的。</p></blockquote><br><br><h3 id="元素添加"><a href="#元素添加" class="headerlink" title="元素添加"></a>元素添加</h3><h4 id="set-ThreadLocal-lt-gt-key-Object-value"><a href="#set-ThreadLocal-lt-gt-key-Object-value" class="headerlink" title="set(ThreadLocal&lt;?&gt; key, Object value)"></a>set(ThreadLocal&lt;?&gt; key, Object value)</h4><ul><li>该方法就是添加元素的方法。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">set</span><span class="hljs-params">(ThreadLocal&lt;?&gt; key, Object value)</span> </span>&#123;<br>    Entry[] tab = table;<br>    <span class="hljs-keyword">int</span> len = tab.length;<br>    <span class="hljs-keyword">int</span> i = key.threadLocalHashCode &amp; (len-<span class="hljs-number">1</span>);<br>    <span class="hljs-comment">// 整个循环的功能就是找到相同的key覆盖value</span><br>    <span class="hljs-comment">// 或者找到key为null的节点覆盖节点信息</span><br>    <span class="hljs-comment">// 只有在e==null的时候跳出循环执行下面的代码</span><br>    <span class="hljs-keyword">for</span> (Entry e = tab[i];<br>         e != <span class="hljs-keyword">null</span>;<br>         e = tab[i = nextIndex(i, len)]) &#123;<br>        ThreadLocal&lt;?&gt; k = e.get();<br>        <span class="hljs-comment">// 找到相等的k,则直接替换value,set操作结束</span><br>        <span class="hljs-keyword">if</span> (k == key) &#123;<br>            e.value = value;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-comment">// k为空表示该节点过期,直接替换该节点</span><br>        <span class="hljs-keyword">if</span> (k == <span class="hljs-keyword">null</span>) &#123;       <span class="hljs-comment">// 1.</span><br>            replaceStaleEntry(key, value, i);<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">// 走到这一步就是找到了e为空的位置，不然在上面两个判断里都return了</span><br>    tab[i] = <span class="hljs-keyword">new</span> Entry(key, value);<br>    <span class="hljs-keyword">int</span> sz = ++size;<br>    <span class="hljs-keyword">if</span> (!cleanSomeSlots(i, sz) &amp;&amp; sz &gt;= threshold)<br>        rehash();<br>&#125;<br></code></pre></td></tr></table></figure><p>通过 hashCode 确定下标后，如果 Key 相等则直接覆盖原数据，如果 Key 不相等则往后线性查找元素，找到为 null 的元素直接覆盖，或者找到空余的位置赋值。</p><br><p>最后会清理旧的元素，并且判断 threshold，决定是否需要扩容。</p><blockquote><p><strong>ThreadLocalMap 处理 Hash 冲突的方法叫做 线性寻址法，在冲突之后往后搜索，找到第一个为空的下标并保存元素。</strong></p><p>线性寻址法在出现 Hash 冲突的时候处理的复杂度基本会变成 O(n)，并不能直接找一个 null 点就存储，因为数组中可能还有相同的 Key 在后面。</p></blockquote><br><br><p>replaceStaleEntry</p><ul><li>源码中只有从上面 <code>1.</code> 处进入该方法,用于<strong>替换  <code>key</code>  为空的 <code>Entry</code> 节点,顺带清除数组中的过期节点.</strong></li></ul><p>往后搜索的是第一个为空或者 Key 相等，如果先找到 Key 为空的并不能保证后续的节点没有 Key 相等的，所以在 replaceStaleEntry 方法中可能还需要处理另外一个 Key 相同的节点。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *从`set.1.`处进入,key是插入元素ThreadLocal的hash,staleSlot为key为空的数组节点下标</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">replaceStaleEntry</span><span class="hljs-params">(ThreadLocal&lt;?&gt; key, Object value,</span></span><br><span class="hljs-params"><span class="hljs-function">                               <span class="hljs-keyword">int</span> staleSlot)</span> </span>&#123;<br>    Entry[] tab = table;<br>    <span class="hljs-keyword">int</span> len = tab.length;<br>    Entry e;<br>    <span class="hljs-keyword">int</span> slotToExpunge = staleSlot;<br>    <span class="hljs-comment">// 从传入位置,即插入时发现k为null的位置开始,向前遍历,直到数组元素为空</span><br>    <span class="hljs-comment">// 找到最前面一个key为null的值.</span><br>    <span class="hljs-comment">// 这里要吐槽一下源代码...大括号都不加 习惯真差</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = prevIndex(staleSlot, len);<br>         (e = tab[i]) != <span class="hljs-keyword">null</span>;<br>         i = prevIndex(i, len))&#123;<br><span class="hljs-comment">// 向前获取到第一个 Key 为空的对象</span><br>        <span class="hljs-keyword">if</span> (e.get() == <span class="hljs-keyword">null</span>)<br>            <span class="hljs-comment">// 因为是环状遍历所以此时slotToExpunge是可能等于staleSlot的</span><br>            slotToExpunge = i;<br>    &#125;<br>    <span class="hljs-comment">// 该段循环的功能就是向后遍历找到`key`相等的节点并替换</span><br>    <span class="hljs-comment">// 并对之后的元素进行清理</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = nextIndex(staleSlot, len);<br>         (e = tab[i]) != <span class="hljs-keyword">null</span>;<br>         i = nextIndex(i, len)) &#123;<br>        ThreadLocal&lt;?&gt; k = e.get();<br>        <span class="hljs-keyword">if</span> (k == key) &#123;<br>            <span class="hljs-comment">// 替换 e 的 value</span><br>            e.value = value;<br>            <span class="hljs-comment">// staleSlot 是因为 key 为 null 才进来的</span><br>            <span class="hljs-comment">// 所以 tab[i] 也是需要清理的节点</span><br>            tab[i] = tab[staleSlot];<br>            tab[staleSlot] = e;<br>            <span class="hljs-keyword">if</span> (slotToExpunge == staleSlot)<br>                slotToExpunge = i;<br>            cleanSomeSlots(expungeStaleEntry(slotToExpunge), len);<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-comment">// 其实我对这个`slotToExpunge == staleSlot`的判断一直挺疑惑的,为什么需要这个判断?</span><br>        <span class="hljs-keyword">if</span> (k == <span class="hljs-keyword">null</span> &amp;&amp; slotToExpunge == staleSlot)<br>            slotToExpunge = i;<br>    &#125;<br>    <span class="hljs-comment">// e==null时跳到下面代码运行</span><br>    <span class="hljs-comment">// 清空并重新赋值</span><br>    <span class="hljs-comment">// 断开 Entry 对应的数据的强引用</span><br>    tab[staleSlot].value = <span class="hljs-keyword">null</span>;<br>    tab[staleSlot] = <span class="hljs-keyword">new</span> Entry(key, value);<br>    <span class="hljs-comment">// set后的清理</span><br>    <span class="hljs-keyword">if</span> (slotToExpunge != staleSlot)<br>        cleanSomeSlots(expungeStaleEntry(slotToExpunge), len);<br>&#125;<br><br></code></pre></td></tr></table></figure><p><strong>如上所说，再出现 Hash 冲突的时候，往后搜索的是第一个为空的节点，并不能直接赋值，因为在后续的数组中可能还存在相同的 Key 的节点。</strong></p><p>替换元素之前会先向前搜索找到一个 Key 为 null 的节点。</p><br><br><h4 id="cleanSomeSlots"><a href="#cleanSomeSlots" class="headerlink" title="cleanSomeSlots"></a>cleanSomeSlots</h4><ul><li>该方法的功能是就是清除数组中的过期<code>Entry</code></li><li>首次清除从<code>i</code>向后开始遍历<code>log2(n)</code>次,如果之间发现过期<code>Entry</code>会直接将<code>n</code>扩充到<code>len</code>可以说全数组范围的遍历.发现过期<code>Entry</code>就调用<code>expungeStaleEntry</code>清除直到未发现<code>Entry</code>为止.</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">  * <span class="hljs-doctag">@param</span> i 清除的起始节点位置</span><br><span class="hljs-comment">  * <span class="hljs-doctag">@param</span> n 遍历控制,每次扫描都是log2(n)次,一般取当前数组的`size`或`len`</span><br><span class="hljs-comment">  */</span><br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">cleanSomeSlots</span><span class="hljs-params">(<span class="hljs-keyword">int</span> i, <span class="hljs-keyword">int</span> n)</span> </span>&#123;<br>    <span class="hljs-comment">// 是否有清除的标记</span><br>            <span class="hljs-keyword">boolean</span> removed = <span class="hljs-keyword">false</span>;<br>    <span class="hljs-comment">// 获取底层数组的数据信息</span><br>            Entry[] tab = table;<br>            <span class="hljs-keyword">int</span> len = tab.length;<br>            <span class="hljs-keyword">do</span> &#123;<br>                i = nextIndex(i, len);<br>                Entry e = tab[i];<br>                <span class="hljs-keyword">if</span> (e != <span class="hljs-keyword">null</span> &amp;&amp; e.get() == <span class="hljs-keyword">null</span>) &#123;<br>                    <span class="hljs-comment">// 当发现有过期`Entry`时,n变为len</span><br>                    <span class="hljs-comment">// 即扩大范围,全数组范围在遍历一次</span><br>                    n = len;<br>                    removed = <span class="hljs-keyword">true</span>;<br>                    i = expungeStaleEntry(i);<br>                &#125;<br>                <span class="hljs-comment">// 无符号右移一位相当于n = n /2</span><br>                <span class="hljs-comment">// 所以在第一次会遍历`log2(n)`次</span><br>            &#125; <span class="hljs-keyword">while</span> ( (n &gt;&gt;&gt;= <span class="hljs-number">1</span>) != <span class="hljs-number">0</span>);<br>    <span class="hljs-comment">// 遍历过程中没出现过期`Entry`的情况下会返回是否有清理的标记.</span><br>            <span class="hljs-keyword">return</span> removed;<br>        &#125;<br></code></pre></td></tr></table></figure><br><br><h3 id="扩容调整方法"><a href="#扩容调整方法" class="headerlink" title="扩容调整方法"></a>扩容调整方法</h3><h4 id="rehash"><a href="#rehash" class="headerlink" title="rehash"></a>rehash</h4><ul><li>容量调整的先驱方法,先清理过期<code>Entry</code>,并做是否需要<code>resize</code>的判断</li><li>调整的条件是<strong>当前size大于阈值的3/4</strong>就进行扩容</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">rehash</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-comment">// 清理过期Entry</span><br>           expungeStaleEntries();<br>    <span class="hljs-comment">// 初始阈值threshold为10</span><br>           <span class="hljs-keyword">if</span> (size &gt;= threshold - threshold / <span class="hljs-number">4</span>)<br>               resize();<br>       &#125;<br></code></pre></td></tr></table></figure><br><br><h4 id="resize"><a href="#resize" class="headerlink" title="resize"></a>resize</h4><ul><li>扩容的实际方法.</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">resize</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-comment">// 获取旧数组并记录就数组大小</span><br>          Entry[] oldTab = table;<br>          <span class="hljs-keyword">int</span> oldLen = oldTab.length;<br>    <span class="hljs-comment">// 新数组大小为旧数组的两倍</span><br>          <span class="hljs-keyword">int</span> newLen = oldLen * <span class="hljs-number">2</span>;<br>          Entry[] newTab = <span class="hljs-keyword">new</span> Entry[newLen];<br>          <span class="hljs-keyword">int</span> count = <span class="hljs-number">0</span>;<br><span class="hljs-comment">// 遍历整个旧数组,并迁移元素到新数组</span><br>          <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; oldLen; ++j) &#123;<br>              Entry e = oldTab[j];<br>              <span class="hljs-comment">// 判断是否为空,空的话就算了</span><br>              <span class="hljs-keyword">if</span> (e != <span class="hljs-keyword">null</span>) &#123;<br>                  ThreadLocal&lt;?&gt; k = e.get();<br>                  <span class="hljs-comment">// k为空即表示为过期节点,当即清理了.</span><br>                  <span class="hljs-keyword">if</span> (k == <span class="hljs-keyword">null</span>) &#123;<br>                      e.value = <span class="hljs-keyword">null</span>; <br>                  &#125; <span class="hljs-keyword">else</span> &#123;<br>                      <span class="hljs-comment">// 重新计算数组下标,如果数组对应位置已存在元素</span><br>                      <span class="hljs-comment">// 则环状遍历整个数组找个空位置赋值</span><br>                      <span class="hljs-keyword">int</span> h = k.threadLocalHashCode &amp; (newLen - <span class="hljs-number">1</span>);<br>                      <span class="hljs-keyword">while</span> (newTab[h] != <span class="hljs-keyword">null</span>)<br>                          h = nextIndex(h, newLen);<br>                      newTab[h] = e;<br>                      count++;<br>                  &#125;<br>              &#125;<br>          &#125;<br><span class="hljs-comment">// 设置新属性</span><br>          setThreshold(newLen);<br>          size = count;<br>          table = newTab;<br>      &#125;<br></code></pre></td></tr></table></figure><br><br><h2 id="Q-amp-A"><a href="#Q-amp-A" class="headerlink" title="Q &amp; A"></a>Q &amp; A</h2><blockquote><p>Q: ThreadLocal 为何会出现内存泄露？</p></blockquote><p><strong>ThreadLocal 会出现内存泄露的主要原因是如果是强引用，那么在 ThreadLocal 类不再使用之后，ThreadLocalMap 中无法清除相关的 Entry 对象。</strong></p><p>在 ThreadLocal 不再使用之后，ThreadLocalMap 中指向 ThreadLocal 的强引用也会导致 ThreadLocal 无法被 GC 回收，同理 Value 对象也被保留了下来。</p><p><strong>也就出现了所谓的内存泄露，无用的数据无法被 GC 有效的清除。</strong></p><br><br><blockquote><p> Q: ThreadLocal 如何解决内存泄漏?</p></blockquote><p>ThreadLocal 的内存泄露可以分为 Key（也就是 ThreadLocal），以及 Value。</p><p><strong>解决 Key 的内存泄露的方法就是采用弱引用，弱引用消除了 ThreadLocalMap 对 ThreadLocal 对象的 GC 的影响。</strong></p><p>另外的在每次获取或者添加数据的时候都会判断 Key 是否被回收，如果 Key 已经被回收会连带清理 Value 对象，这也就顺带解决了 Value 的泄露问题。</p><br><br><blockquote><p> Q: ThreadLocalMap 如何解决Hash冲突？</p></blockquote><p>Hash 冲突就是指通过 Hash 计算的下标值一致，两个元素的定位一致。</p><p>HashMap 解决 Hash 冲突的方法就是<strong>拉链法</strong>，底层的数组中保存的不是单一的数据，而是一个集合(链表/红黑树)，冲突之后下挂。</p><p>采用拉链法的结果就是在Hash冲突严重时会严重影响时间复杂度，因为就算是红黑树查询的事件复杂度都是 O(Log2n)。</p><p>ThreadLocalMap 并没有采用这种方法，而是使用的<strong>开放寻址法</strong>，如果已经有数据存在冲突点，就在数组中往下遍历找到第一个空着的位置。</p><blockquote><p>需要注意的是，并不是找到空的位置就可以直接替换，还是需要遍历整个数组确保没有重复的 Key。</p></blockquote><br><br><blockquote><p> Q: ThreadLocalMap 和 HashMap 的异同</p></blockquote><p>两个都是采用 Hash 定位的数据结构，底层都是以数组的形式。</p><p>但是 HashCode 的获取方式不同，HashMap 调用对象的 hashCode() 方法，而  ThreadLocalMap 中的 Key 就是 ThreadLocal，ThreadLocal 的 HashCode 是递增分配的。</p><p>另外处理 Hash 冲突的方式不同，ThreadLocalMap 采用的开放寻址法，而 HashMap 采用的是拉链法。</p>]]></content>
    
    
    <categories>
      
      <category>jdk</category>
      
    </categories>
    
    
    <tags>
      
      <tag>threadlocal</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>浅析Redis的主从模式</title>
    <link href="/2021/05/28/%E6%B5%85%E8%B0%88Redis%E7%9A%84%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6%E6%A8%A1%E5%BC%8F/"/>
    <url>/2021/05/28/%E6%B5%85%E8%B0%88Redis%E7%9A%84%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6%E6%A8%A1%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<h1 id="Redis的主从复制"><a href="#Redis的主从复制" class="headerlink" title="Redis的主从复制"></a>Redis的主从复制</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>Redis 的主从复制是 Redis 官方推出的分布式机制，解决了部分集群问题。</p><p>官方后续的一些分布式的实现，包括 Sentinel 以及 Cluster 等，多多少少都用到了复制的功能。</p><h2 id="思维脑图"><a href="#思维脑图" class="headerlink" title="思维脑图"></a>思维脑图</h2><p><img src="https://chenqwwq.oss-cn-hangzhou.aliyuncs.com/note/assets/redis-master-slaver.png" alt="redis-master-slaver"></p><h2 id="相关实现"><a href="#相关实现" class="headerlink" title="相关实现"></a>相关实现</h2><h3 id="查看节点主从信息"><a href="#查看节点主从信息" class="headerlink" title="查看节点主从信息"></a>查看节点主从信息</h3><p>通过指令 <code>info replication</code>，可以单独查看服务器此时的主从信息。如下：</p><p><img src="https://chenqwwq.oss-cn-hangzhou.aliyuncs.com/note/assets/redis_info_replication_master.png" alt="redis-info-replication"></p><blockquote><p>role 表示当前节点的身份，master 表示是主节点</p><p>connected_slave 表示当前的子节点数，以及 slave0 就表示子节点信息。</p></blockquote><br><h3 id="主从关系的建立"><a href="#主从关系的建立" class="headerlink" title="主从关系的建立"></a>主从关系的建立</h3><p>Redis 服务器可以通过 <code>SLAVEOF &lt;ip&gt; &lt;port&gt;</code> 命令或者配置文件中 <code>slavof &lt;ip&gt; &lt;port&gt;</code> 的方式，建立主从关系。</p><p>被复制的服务器称为主服务器，当前服务器则称为从服务器。</p><p>需要注意的是，Redis 只支持一主多从的方式，一个从服务器只能对应一个主服务器。</p><br><p><strong>建立主从关系之后，从服务器就无法再执行写命令了，而是完全同步主服务器的数据。</strong></p><blockquote><p>即使在执行 AOF 或者 RDB 文件的过程中发现有过期的键也不会主动删除，只能等主服务器的同步。</p><p>因为无法执行命令，无法写入，所以<strong>主从模式仅仅只扩展了读属性，写入瓶颈依然存在。</strong></p></blockquote><br><p>该种主从复制模型非常适合读多写少的环境，复制相当于为主服务器中的数据创建多个复本，也算是一种<strong>容错策略</strong>。</p><p>单点的写入也一定程度上保证了一致性的要求。</p><blockquote><p>这里的一致性都是指最终一致性，<strong>因为命令的扩散也会有延迟</strong>，卡着延迟从从服务器中读取就会有数据不一致的问题。</p><p>因此如果对一致性的要求很高，或者必须要强一致性，建议不要从从服务器读取。</p></blockquote><p>复制模式可以分为<strong>数据同步</strong>以及<strong>命令传播</strong>两个阶段。</p><p>数据同步就是从服务器刚开始连接时的操作，全盘同步主服务器上的数据。</p><p>命令传播就是主服务器将本地执行过的命令再发送到从服务器(主服务器以客户端的身份发送命令到从服务器)。</p><br><p><strong>Redis 中对应数据同步的命令有两个 SYNC 和 PSYNC。</strong></p><h3 id="SYNC-旧版复制"><a href="#SYNC-旧版复制" class="headerlink" title="SYNC - 旧版复制"></a>SYNC - 旧版复制</h3><p>旧版的数据同步就是依托于 SYNC 命令，从服务器向主服务器发送该命令表示开启同步数据流程。</p><p><img src="https://chenqwwq.oss-cn-hangzhou.aliyuncs.com/note/assets/Redis_SYNC_%E6%B5%81%E7%A8%8B.png" alt="redis-sync基础流程"></p><p>主服务器首次接收到 <code>SYNC</code> 命令之后，会执行 BGSAVE 命令生成 RDB 文件，并在此时开启<strong>命令缓冲区</strong>，记录备份期间所有执行的写命令。</p><p>BGSAVE 执行完之后，会将生成的RDB文件发送给从服务器。</p><blockquote><p>此时如果于多个从服务器连接，RDB 文件是可以直接共享的。</p></blockquote><p>从服务器在接收到主服务器发送的 RDB 文件之后，会清空本地的所有数据，全盘载入 RDB 文件中的数据。</p><p>之后主服务器还会将缓冲区中的数据发送到从服务器，从服务器执行完缓冲区中的写命令，就达到了和主服务器的完全一致。</p><br><blockquote><p>旧版的复制很简单，主要就是生成 RDB 文件并传播指令。</p><p>问题就在于太过简单，<strong>即使网络波动导致的瞬时断连，在重连之后也会进行全量同步。</strong></p></blockquote><br><h3 id="PSYNC-新版本的数据同步"><a href="#PSYNC-新版本的数据同步" class="headerlink" title="PSYNC - 新版本的数据同步"></a>PSYNC - 新版本的数据同步</h3><p>PSYNC 命令是对 SYNC 命令的进一步优化，主要是 SYNC 只能进行全量同步，效率真的就不高，为此在 Redis2.8 版本之后，新增加了一个 PSYNC 命令。</p><p>PSYNC 命令完整的形式是 <code>PSYNC &lt;runid&gt; &lt;offest&gt;</code>，<strong>在全量同步的基础上增加了一个增量同步的过程判断。</strong></p></br><p>下面是增量同步中增加的概念：</p><ol><li><p>复制偏移量</p><p>按照字面意思也很好理解，是主从服务器各自维护的<strong>以字节为单位</strong>的属性，表示复制的进度。</p><p>比如当前主服务器的复制偏移量为10000，在发送了50个字节的内容之后，就变为了10050，可以认为是主从服务器数据不一致性程度的表示。</p><p>在 Sentinel 执行故障转移的时候也会以复制偏移量作为主要的参考依据。</p><blockquote><p>一定程度上，复制偏移量就表示从节点数据的完整性。</p></blockquote><br></li><li><p>复制缓冲区</p><p>复制缓冲区是由主服务器维护的一个固定长度的 FIFO 队列，该队列会缓存近期主服务器所执行的写命令。</p><br></li><li><p>主服务器 run ID</p><p>run ID 唯一标识一个 Redis 服务器。</p><p>实际上不论主从在服务器启动时都会生成一个 run ID，由40位随机的16进制字符组成。</p><p>此处的 run ID 是在从服务器连接到主服务器是由主服务器下发的自身的 run ID，重连之后通过判断 run ID 来确定是否为同一个 Master。</p></li></ol><br><p>PSYNC 的执行流程简述如下：</p><ol><li>判断 run ID 是否相同，不相同会直接开启全量同步的逻辑，相当于直接走 SYNC。</li><li>run ID 相同表示是断线重连，判断复制偏移量是否还在复制缓冲区中，如果超出表示超时时间过长，也需要走 SYNC。</li><li>如果复制偏移量未超出复制缓冲区，则直接将复制缓冲区中的命令发送到从服务器，从而避免全量同步。</li></ol><br><h2 id="Q-amp-A"><a href="#Q-amp-A" class="headerlink" title="Q&amp;A"></a>Q&amp;A</h2><blockquote><p>Q: 主从模式的优势</p></blockquote><p>横向扩展了读性能</p><p>备份数据，强化数据安全</p><br><blockquote><p>Q: 主从模式的存在的问题</p></blockquote><p>对于写性能并没有提高，可能出于一致性的考虑，Redis 的主从模式并不允许从从服务器写入。</p><p>非强一致性，命令的扩散存在一定的延时，此时主从的数据并不一致。</p><p>单点故障问题，因为只能从主节点写入，单点故障问题很难避免，只要主节点宕机，整个集群就不可写入。</p><br><blockquote><p>Q: PSYNC 的优化</p></blockquote><p>PSYNC 借由复制缓冲区实现了对断线重连的容忍机制，如果断线时间断，可以从复制缓冲区中找到缺失的命令就可以进行部分重同步，而避免每次都是全量同步。</p>]]></content>
    
    
    <categories>
      
      <category>redis</category>
      
    </categories>
    
    
    <tags>
      
      <tag>redis</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
