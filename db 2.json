{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"themes/fluid/source/img/default.png","path":"img/default.png","modified":0,"renderable":1},{"_id":"themes/fluid/source/img/avatar.png","path":"img/avatar.png","modified":0,"renderable":1},{"_id":"themes/fluid/source/img/favicon.png","path":"img/favicon.png","modified":0,"renderable":1},{"_id":"themes/fluid/source/img/police_beian.png","path":"img/police_beian.png","modified":0,"renderable":1},{"_id":"themes/fluid/source/img/loading.gif","path":"img/loading.gif","modified":0,"renderable":1},{"_id":"themes/fluid/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/fluid/source/css/gitalk.css","path":"css/gitalk.css","modified":0,"renderable":1},{"_id":"themes/fluid/source/js/img-lazyload.js","path":"js/img-lazyload.js","modified":0,"renderable":1},{"_id":"themes/fluid/source/js/boot.js","path":"js/boot.js","modified":0,"renderable":1},{"_id":"themes/fluid/source/js/events.js","path":"js/events.js","modified":0,"renderable":1},{"_id":"themes/fluid/source/js/color-schema.js","path":"js/color-schema.js","modified":0,"renderable":1},{"_id":"themes/fluid/source/js/plugins.js","path":"js/plugins.js","modified":0,"renderable":1},{"_id":"themes/fluid/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"themes/fluid/source/js/local-search.js","path":"js/local-search.js","modified":0,"renderable":1},{"_id":"themes/fluid/source/js/leancloud.js","path":"js/leancloud.js","modified":0,"renderable":1},{"_id":"themes/fluid/source/xml/local-search.xml","path":"xml/local-search.xml","modified":0,"renderable":1},{"_id":"themes/fluid/source/lib/hint/hint.min.css","path":"lib/hint/hint.min.css","modified":0,"renderable":1},{"_id":"source/CNAME","path":"CNAME","modified":0,"renderable":0}],"Cache":[{"_id":"source/CNAME","hash":"6197a98b48c019fa5342776341a0361be8b8844b","modified":1648003959193},{"_id":"source/_posts/Disruptor.md","hash":"0d39b463d61dca27e120ddc8857981a185e560e7","modified":1689680153076},{"_id":"source/.DS_Store","hash":"4442a431421e6aaeaa4bcd65ab1006e04cea63d1","modified":1689608906335},{"_id":"source/_posts/RabbitMQ 如何保证消息不丢失.md","hash":"d6c6989c7815f20123951ee50ef61e1bc2a9b53c","modified":1648004545649},{"_id":"source/_posts/Synchronized.md","hash":"5e3879378dc979e16a12188cf29229a6fedc1b44","modified":1648004587105},{"_id":"source/_posts/ThreadLocal实现解析.md","hash":"069064352c8dcd15369a471d46296879e2baa70b","modified":1648004687551},{"_id":"source/_posts/MySQL.md","hash":"f0cddac0cbf313bec02a3ed080652eae8a5552e7","modified":1656430381533},{"_id":"source/_posts/tcp协议整理.md","hash":"7bf7d6a797da7d373611cb3e44f46f9907a1fa81","modified":1648005660343},{"_id":"source/_posts/学习生活总结（2022上半年.md","hash":"b0785c6464e5143373abf10f0c53be3635148322","modified":1661785090646},{"_id":"source/_posts/浅谈Redis的主从复制模式.md","hash":"cdc3ba4f49b5a06e73328c6bddff40cbe74ffe40","modified":1648004440812},{"_id":"source/_posts/浅析-JVM-类加载子系统.md","hash":"11fad6d1792eeb4d7e0a1b3c732f5c1ec5bcbb00","modified":1648004466253},{"_id":"source/_posts/assets/JVM_Monitor-7942546.jpeg","hash":"874226251b28e74e8033a9c073504d5573f21cf2","modified":1648003959206},{"_id":"source/_posts/assets/JVM_Monitor.jpeg","hash":"874226251b28e74e8033a9c073504d5573f21cf2","modified":1648003959206},{"_id":"source/_posts/assets/Redis_SYNC_流程-7942500.png","hash":"43c6b6436104af644baa029f17dcd2728899357e","modified":1648003959224},{"_id":"source/_posts/assets/Disruptor类属性.png","hash":"952931605340152a3b2cef07281a1694d079edd0","modified":1689679440135},{"_id":"source/_posts/assets/Redis_SYNC_流程.png","hash":"43c6b6436104af644baa029f17dcd2728899357e","modified":1648003959224},{"_id":"source/_posts/assets/TCP关闭连接.png","hash":"d5da1e8c94c80268a8017399d6a6cd6884139d8c","modified":1648003959226},{"_id":"source/_posts/assets/TCP打开连接.png","hash":"590a1a6a85943313f7089a3677b37c6268c9c139","modified":1648003959226},{"_id":"source/_posts/assets/TCP同时关闭.png","hash":"ca78bd5240e4326798e5141af136666a71d3cbd0","modified":1648003959226},{"_id":"source/_posts/assets/Tomcat的类加载体系.png","hash":"2daa5a6d34a7b3d66acbbe703514737b0d5ad7b3","modified":1648003959232},{"_id":"source/_posts/assets/image-20210221154222208.png","hash":"b63cd49a77a209a107cb5190021726f406e8e97a","modified":1648003959235},{"_id":"source/_posts/assets/image-20210605155028612.png","hash":"32d769d5c8698d2f386493760d816c6542f98196","modified":1648003959240},{"_id":"source/_posts/assets/image-20210605154952398.png","hash":"84e0c2f0735a5cfd23439b8af1de69ece73a02c2","modified":1648003959240},{"_id":"source/_posts/assets/image-20210605155116272.png","hash":"fb7f9e99dd38e4b57ef3159731ce5e7dba97c5e0","modified":1648003959240},{"_id":"source/_posts/assets/RingBuffer类图.png","hash":"fd6d26f4bcfdfa4ac2d889c7bd9660dedde7e1dd","modified":1686934616652},{"_id":"source/_posts/assets/image-20230606201849222.png","hash":"5f067ceeefe2caa0c355665334e32ed308efa0e6","modified":1686064517518},{"_id":"source/_posts/assets/image-20230617上午125120720-9679435.png","hash":"952931605340152a3b2cef07281a1694d079edd0","modified":1689679435810},{"_id":"source/_posts/assets/image-20230617上午125120720.png","hash":"952931605340152a3b2cef07281a1694d079edd0","modified":1686934280720},{"_id":"source/_posts/assets/markword-7942543.jpg","hash":"dcabc9c9f25d678175447159691977ae96be8291","modified":1648003959251},{"_id":"source/_posts/assets/markword.jpg","hash":"dcabc9c9f25d678175447159691977ae96be8291","modified":1648003959251},{"_id":"source/_posts/assets/image-20230620上午120805316.png","hash":"d4281ac5f4e5e401d3b010f62e3748330292a777","modified":1687190885317},{"_id":"source/_posts/assets/rabbitmq-publish-confirm配置-20220323上午110140863.png","hash":"3a8cffe4afc046141d7e0560a87573601998b2d8","modified":1648004500864},{"_id":"source/_posts/assets/rabbitmq手动ack类型.png","hash":"3e1da4263a7be930aaacddd47287496b5c961395","modified":1648003959253},{"_id":"source/_posts/assets/v2-b1542fa213b5322ed17364411af8cf99_1440w.jpg","hash":"83a68315892e1e7985ddf8a23edc3135e07e0e27","modified":1648003959258},{"_id":"source/_posts/assets/连续ARQ.png","hash":"52ec42ff013b03c8c1d4f085fb27004aec826f0b","modified":1648003959259},{"_id":"source/_posts/assets/拥塞控制.jpg","hash":"26c2d99fc903fbb47426400831d286855d85ee3b","modified":1648003959259},{"_id":"source/_posts/assets/rabbitmq手动ack类型-8004518.png","hash":"3e1da4263a7be930aaacddd47287496b5c961395","modified":1648004518284},{"_id":"source/_posts/assets/v2-b1542fa213b5322ed17364411af8cf99_1440w-7940422.jpg","hash":"83a68315892e1e7985ddf8a23edc3135e07e0e27","modified":1648003959258},{"_id":"source/_posts/assets/停止等待ARQ.png","hash":"68ba96205eb4b4f99a74ba39ca01273436420c88","modified":1648003959258},{"_id":"source/_posts/assets/JVM类加载子系统-7942505.png","hash":"123fe1438463bacdd35c229eb14812befdd52e21","modified":1648003959207},{"_id":"source/_posts/assets/JVM类加载子系统.png","hash":"123fe1438463bacdd35c229eb14812befdd52e21","modified":1648003959208},{"_id":"source/_posts/assets/ServerLoader11load-7942523.png","hash":"6c5d50aa2010d88a448dc851eff03ceee7497225","modified":1648003959225},{"_id":"source/_posts/assets/ServerLoader11load.png","hash":"6c5d50aa2010d88a448dc851eff03ceee7497225","modified":1648003959225},{"_id":"source/_posts/assets/Synchronized脑图.png","hash":"14b6fcfcc1dde115ee5e4cb0f4ad7f1c26eff12e","modified":1648003959226},{"_id":"source/_posts/assets/TCP模块整理.png","hash":"30a85fecec295f1527449f58b3509f8212425cd9","modified":1648003959229},{"_id":"source/_posts/assets/ThreadLocal.png","hash":"48d2de4f4c9ed15e47357edaf12f9585cf83045a","modified":1648003959231},{"_id":"source/_posts/assets/image-20210715211623026.png","hash":"14b6fcfcc1dde115ee5e4cb0f4ad7f1c26eff12e","modified":1648003959240},{"_id":"source/_posts/assets/ThreadLocalMap的变量声明.png","hash":"e4ba7679a81150294803352c423fadd39e22ee6c","modified":1648004669663},{"_id":"source/_posts/assets/image-20230606201619355.png","hash":"4b1a7da834ba5d8b07cac104af52eaabb27b843b","modified":1686064517518},{"_id":"source/_posts/assets/javap_acc_synchronized-7942540.jpg","hash":"237ad6bf321b79e560a3743dcc9f054b7ec95370","modified":1648003959249},{"_id":"source/_posts/assets/javap_acc_synchronized.jpg","hash":"237ad6bf321b79e560a3743dcc9f054b7ec95370","modified":1648003959250},{"_id":"source/_posts/assets/image-20230619上午122557863.png","hash":"d46504ff18fa3b15c97b62603b1d42a169c65c78","modified":1687105557863},{"_id":"source/_posts/assets/rabbitmq-创建consumer.png","hash":"4fc84ef6f0662ae5b34f8899d8a72acd3749ff84","modified":1648003959253},{"_id":"source/_posts/assets/models.png","hash":"561eb92f5275fa514b6ab9d7fc2f46421ff96077","modified":1665663984112},{"_id":"source/_posts/assets/rabbitmq-springboot-mandatory配置-20220323上午110148745.png","hash":"061db7c2b14608c03a107c51db74a2ae3b38be3c","modified":1648004508747},{"_id":"source/_posts/assets/rabbitmq-创建consumer-20220323上午110206017.png","hash":"4fc84ef6f0662ae5b34f8899d8a72acd3749ff84","modified":1648004526018},{"_id":"source/_posts/assets/16a7950217b3f0f4ed02db5db59562a7-7940422.png","hash":"cb34bc60f583ed3d34b50574782211e0bab66919","modified":1648003959196},{"_id":"source/_posts/assets/16a7950217b3f0f4ed02db5db59562a7.png","hash":"cb34bc60f583ed3d34b50574782211e0bab66919","modified":1648003959198},{"_id":"source/_posts/assets/DriverManager的静态初始化块-7942519.png","hash":"c0d1d564f8ccd1db310b22295b5bdd56490108a7","modified":1648003959205},{"_id":"source/_posts/assets/DriverManager的静态初始化块.png","hash":"c0d1d564f8ccd1db310b22295b5bdd56490108a7","modified":1648003959205},{"_id":"source/_posts/assets/TCP首部格式.png","hash":"12febccaa4e36059ecb5dc652104d2ef1e894b20","modified":1648003959230},{"_id":"source/_posts/assets/RingBuffer注释.png","hash":"531886a16a0440e4523e16a661d6c4576c260156","modified":1689679414962},{"_id":"source/_posts/assets/image-20230523164808847.png","hash":"531886a16a0440e4523e16a661d6c4576c260156","modified":1684856626895},{"_id":"source/_posts/assets/redis_info_replication_master.png","hash":"43a38ee928fbbd48e58e4e09a19e36e497df2b4a","modified":1648003959257},{"_id":"source/_posts/assets/redis_info_replication_master-7942497.png","hash":"43a38ee928fbbd48e58e4e09a19e36e497df2b4a","modified":1648003959257},{"_id":"source/_posts/assets/DriverManager11loadInitialDrivers-7942521.png","hash":"f80acc15777759e8de1f1fac31df11f6c1af1656","modified":1648003959204},{"_id":"source/_posts/assets/DriverManager11loadInitialDrivers.png","hash":"f80acc15777759e8de1f1fac31df11f6c1af1656","modified":1648003959204},{"_id":"source/_posts/assets/RabbitMQ脑图1.png","hash":"8382ccb9b89ce54013ef11e57a794e78539d3d0b","modified":1648003959223},{"_id":"source/_posts/assets/RabbitMQ脑图1-7942529.png","hash":"8382ccb9b89ce54013ef11e57a794e78539d3d0b","modified":1648003959222},{"_id":"source/_posts/assets/Disruptor的副本.png","hash":"fcd175d4f04f8c4daaf799757bf9379b439071d2","modified":1654072742289},{"_id":"source/_posts/assets/TCP有限状态机.png","hash":"cfb923c2d853bf1cfe7a3b0dbe36b68867cda15f","modified":1648003959228},{"_id":"source/_posts/assets/Disruptor的副本-4072925.png","hash":"fcd175d4f04f8c4daaf799757bf9379b439071d2","modified":1654072925107},{"_id":"source/_posts/assets/a66c154c1bc51e071dd2cc8c1d6ca6a3-7940422.png","hash":"0bbc155367452e1f0aa44f54302fdafcbba49be1","modified":1648003959233},{"_id":"source/_posts/assets/a66c154c1bc51e071dd2cc8c1d6ca6a3.png","hash":"0bbc155367452e1f0aa44f54302fdafcbba49be1","modified":1648003959234},{"_id":"source/_posts/assets/rabbitmq-publish-confirm示例-20220323上午110144410.png","hash":"10ae82f7ae85fec423fe18833968fd909d455001","modified":1648004504413},{"_id":"source/_posts/assets/rabbitmq-mandatory回调示例-20220323上午110153031.png","hash":"c97619dda118d5e954532511e5b8e45268a8060e","modified":1648004513033},{"_id":"source/_posts/assets/Launcher构造函数-7942515.png","hash":"fbd093fc66de56e79f48203bb53f13de830bf0d2","modified":1648003959209},{"_id":"source/_posts/assets/Launcher构造函数.png","hash":"fbd093fc66de56e79f48203bb53f13de830bf0d2","modified":1648003959209},{"_id":"source/_posts/assets/javap_moitorenter_exit-7942538.png","hash":"b3c36f62998be6398c993c00f4e1d2edcd34f85c","modified":1648003959251},{"_id":"source/_posts/assets/javap_moitorenter_exit.png","hash":"b3c36f62998be6398c993c00f4e1d2edcd34f85c","modified":1648003959251},{"_id":"source/_posts/assets/redis-master-slaver.png","hash":"28e340dda464b2f97947c29cce5356744cf56eff","modified":1648003959256},{"_id":"source/_posts/assets/redis-master-slaver-7942494.png","hash":"28e340dda464b2f97947c29cce5356744cf56eff","modified":1648003959255},{"_id":"source/_posts/assets/springboot-rabbitmq-ackmode-20220323上午110220858.png","hash":"96eb749fad1c97ff2aa288c117265c2db9172c3f","modified":1648004540859},{"_id":"source/_posts/assets/image-20220322下午44525458.png","hash":"6ae7e2295241bd1a23ec11c5d6d7547a70b1753b","modified":1648003959243},{"_id":"source/_posts/assets/2e5bff4910ec189fe1ee6e2ecc7b4bbe.png","hash":"eed4cc8080c7c51bab8cca0a78390356d4232f57","modified":1648003959203},{"_id":"source/_posts/assets/image-20210528003226695.png","hash":"387644200e58e91c31ff411b6af072032430fca3","modified":1648003959239},{"_id":"source/_posts/assets/image-20220627160325618.png","hash":"3d358487b1084a410c9d8fb34a7406cd8307e9b6","modified":1656429134129},{"_id":"source/_posts/assets/image-20220627160325618-20220628下午111220270.png","hash":"3d358487b1084a410c9d8fb34a7406cd8307e9b6","modified":1656429140270},{"_id":"source/_posts/assets/MySQL的整体架构-7940422.png","hash":"0399712737ef6427d49e48d5d63dfbd23bf40e4d","modified":1648003959215},{"_id":"source/_posts/assets/MySQL的整体架构.png","hash":"0399712737ef6427d49e48d5d63dfbd23bf40e4d","modified":1648003959220},{"_id":"source/_posts/assets/java_synchronized.jpg","hash":"3bbffeb4b22017645969ee732606be2da2dd3ddb","modified":1648003959249},{"_id":"source/_posts/assets/java_synchronized-7942549.jpg","hash":"3bbffeb4b22017645969ee732606be2da2dd3ddb","modified":1648003959246},{"_id":"themes/fluid/source/css/_pages/_category/category.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1648004222200},{"_id":"themes/fluid/source/css/_pages/_tag/tag.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1648004222201},{"_id":"themes/fluid/.eslintrc","hash":"4bc2b19ce2b8c4d242f97d4ccf2d741e68ab0097","modified":1648003959260},{"_id":"themes/fluid/.gitattributes","hash":"a54f902957d49356376b59287b894b1a3d7a003f","modified":1648003959260},{"_id":"themes/fluid/.editorconfig","hash":"33218fbd623feb43edf5f99f15965392cecc44a6","modified":1648003959260},{"_id":"themes/fluid/.gitignore","hash":"bd095eee271360a38772ee1a42d4f000fb722e5f","modified":1648003959261},{"_id":"themes/fluid/LICENSE","hash":"df5b54be535593d5442cebafbea34eb9bd69b987","modified":1648003959261},{"_id":"themes/fluid/package.json","hash":"45b68110fcaf5819452f45ecd77282f97d1386f5","modified":1648004222189},{"_id":"themes/fluid/_config.yml","hash":"feee294d3486766e836cc04fbd3c6b64d0cc86b6","modified":1648004222181},{"_id":"themes/fluid/languages/en.yml","hash":"a85dcc5cc21f9cab50df31e5001b8818ee62d1e2","modified":1648004222181},{"_id":"themes/fluid/languages/de.yml","hash":"13a6a799415fc2f6f69ebd1a399fb44426a5d641","modified":1648004222181},{"_id":"themes/fluid/languages/ja.yml","hash":"91020031a847c0361a6fd7ab990c7be4bf17529b","modified":1648004222182},{"_id":"themes/fluid/languages/eo.yml","hash":"a0c7984495d4f2d33b64adfa33adebbf768a5ac3","modified":1648004222182},{"_id":"themes/fluid/languages/zh-CN.yml","hash":"21307b4137c3d9b04bb58243747e75af0abc5a71","modified":1648004222182},{"_id":"themes/fluid/languages/zh-TW.yml","hash":"1a6d415446da11dee5c5f400e7d67544fbe743ea","modified":1648004222182},{"_id":"themes/fluid/layout/404.ejs","hash":"689d9f4efd2a7f5edfd9b24561a7ade69d46617c","modified":1648004222182},{"_id":"themes/fluid/layout/about.ejs","hash":"ad6fed7b646d3ca961db83db0fbe020e3a5d42ad","modified":1648004222187},{"_id":"themes/fluid/layout/archive.ejs","hash":"472d0813ca5b88000a7bc6039f33b7e27b5a3216","modified":1648004222187},{"_id":"themes/fluid/layout/categories.ejs","hash":"6cbd88a2ef9dd2198d72ccc1899c4966ac5f49f9","modified":1648004222187},{"_id":"themes/fluid/layout/index.ejs","hash":"a154785aef120988d29409847977f24069d3a3d5","modified":1648004222187},{"_id":"themes/fluid/layout/category.ejs","hash":"58291dfec65c36889dfce0ddc603540b67e4c598","modified":1648004222187},{"_id":"themes/fluid/layout/links.ejs","hash":"19c6db0ccebc8f59fa4ef9567a066b33223eccd6","modified":1648004222188},{"_id":"themes/fluid/layout/layout.ejs","hash":"9d6ff8772bf54d7458ae4e846e5a2d1f2921b8a7","modified":1648004222187},{"_id":"themes/fluid/README.md","hash":"523b9db3801ca892124502c17d72864457cc4b21","modified":1648004222180},{"_id":"themes/fluid/layout/post.ejs","hash":"79e3679a7069351a6172c281b9d09f59d7580484","modified":1648004222188},{"_id":"themes/fluid/README_en.md","hash":"ca8fd19a4948de1f253616a62c0e8a7d81f692f5","modified":1648004222180},{"_id":"themes/fluid/layout/page.ejs","hash":"1014b901d396f4fc445cb1ffc938d5380d894d71","modified":1648004222188},{"_id":"themes/fluid/layout/tag.ejs","hash":"0ad89eb7c92a822980fa9a85285e6d94ad845d1d","modified":1648004222188},{"_id":"themes/fluid/layout/tags.ejs","hash":"1d06af34b6cf1d8a20d2eb565e309326ceba309f","modified":1648004222189},{"_id":"themes/fluid/.github/workflows/limit.yaml","hash":"f8bd2edeb4424ee7a055b31583445d5d5dff91a4","modified":1648003959261},{"_id":"themes/fluid/.github/workflows/lint.yaml","hash":"64d521c9c5b61d3a4852c74894fb574082dc7009","modified":1648003959261},{"_id":"themes/fluid/.github/ISSUE_TEMPLATE/bug_report.md","hash":"16d33eb89ecf90f4046720fde5395d972c7ba1fd","modified":1648003959260},{"_id":"themes/fluid/.github/ISSUE_TEMPLATE/question.md","hash":"ab5eab9e3ff889c4ba7fd82846e7f5b7ae15bebc","modified":1648003959261},{"_id":"themes/fluid/.github/ISSUE_TEMPLATE/feature_request.md","hash":"c134dd57ffd269b93402ccfffe7dbe0f0b583bec","modified":1648003959260},{"_id":"themes/fluid/.github/ISSUE_TEMPLATE/bug_report_zh.md","hash":"af977ed0792508bb0766ea8afe82d34ef1e8fb3c","modified":1648003959260},{"_id":"themes/fluid/layout/_partial/archive-list.ejs","hash":"8723aa57f61134a2c1dc84cc7ea88ea366f4fda3","modified":1648004222183},{"_id":"themes/fluid/.github/ISSUE_TEMPLATE/question_zh.md","hash":"e24b470f7aa8044499a4f5e39634e5dc43899011","modified":1648003959261},{"_id":"themes/fluid/.github/ISSUE_TEMPLATE/feature_request_zh.md","hash":"ed08574b196447376dd74411cca664ac9227a5d4","modified":1648003959260},{"_id":"themes/fluid/gulpfile.js","hash":"a7c87a83becf7080bddd14e81a6f09ce8c3df109","modified":1648004222181},{"_id":"themes/fluid/layout/_partial/beian.ejs","hash":"6ec30a9dd56341590af07f4227324f619025c109","modified":1648004222183},{"_id":"themes/fluid/layout/_partial/footer.ejs","hash":"39e63b3e1502803c9e8ea0c44ea662a7bbe15744","modified":1648004222185},{"_id":"themes/fluid/layout/_partial/css.ejs","hash":"cdcb607f1104543a42beda647f3c9cf0f3d11623","modified":1648004222185},{"_id":"themes/fluid/layout/_partial/head.ejs","hash":"248ecd01aead6e07ac1904a7b7c45395a922bcc7","modified":1648004222185},{"_id":"themes/fluid/layout/_partial/nav.ejs","hash":"245f49aad0e4124b52aa82d981281ad9c871f1f8","modified":1648004222185},{"_id":"themes/fluid/layout/_partial/post-meta.ejs","hash":"3e0fa1731b6e54dbcf52ccf8e200e83dc4549bfa","modified":1648004222186},{"_id":"themes/fluid/layout/_partial/paginator.ejs","hash":"0f38a2c238169edcb63fc46c23bfc529ff3859b7","modified":1648004222185},{"_id":"themes/fluid/layout/_partial/scripts.ejs","hash":"b3d93135d9ae74f006da31ec54343308bbd77cb5","modified":1648004222186},{"_id":"themes/fluid/layout/_partial/search.ejs","hash":"cdd7919fa01f6ef7ccc09938d662ff3d77f5d999","modified":1648004222186},{"_id":"themes/fluid/layout/_partial/statistics.ejs","hash":"920bc618d357d48d2b96f8758f6ae8f9488fc4d8","modified":1648004222186},{"_id":"themes/fluid/layout/_partial/toc.ejs","hash":"3d2fb5552f373e5a0c56bc356702d807bcbcb411","modified":1648004222187},{"_id":"themes/fluid/scripts/filters/post-filter.js","hash":"6c37e9f1ac1d6d00b3c32794e02e244dba942cd9","modified":1648004222193},{"_id":"themes/fluid/scripts/filters/locals.js","hash":"58d0fec976f6b1d35e7ea03edc45414088acf05c","modified":1648004222192},{"_id":"themes/fluid/scripts/events/index.js","hash":"44faef3e77ab08b91e4c5c6f1cd9087a9faff443","modified":1648004222189},{"_id":"themes/fluid/scripts/generators/local-search.js","hash":"fc2c50405b771b06b7f6cfc4e9de97b992691555","modified":1648004222193},{"_id":"themes/fluid/scripts/helpers/url.js","hash":"99ab4551dc9c035abcc3bf4da5def2f63449d7ec","modified":1648004222194},{"_id":"themes/fluid/scripts/generators/pages.js","hash":"d9971f15fbb6b775e3d31a1b9b45011959395010","modified":1648004222193},{"_id":"themes/fluid/scripts/helpers/page.js","hash":"4607607445233b3029ef20ed5e91de0da0a7f9c5","modified":1648004222194},{"_id":"themes/fluid/scripts/helpers/export-config.js","hash":"606131cb807846bf43776a9073fcc1473d359ec9","modified":1648004222193},{"_id":"themes/fluid/scripts/helpers/utils.js","hash":"9045f47c7a71aab39f16cffb3e3847b752c2e0f1","modified":1648004222194},{"_id":"themes/fluid/scripts/tags/button.js","hash":"3eb43a8cdea0a64576ad6b31b4df6c2bf5698d4c","modified":1648004222195},{"_id":"themes/fluid/scripts/helpers/wordcount.js","hash":"e58d422eddb44c1be893f65f79f4c7feecfe6d5f","modified":1648004222194},{"_id":"themes/fluid/scripts/tags/group-image.js","hash":"4aeebb797026f1df25646a5d69f7fde79b1bcd26","modified":1648004222195},{"_id":"themes/fluid/scripts/tags/label.js","hash":"f05a6d32cca79535b22907dc03edb9d3fa2d8176","modified":1648004222195},{"_id":"themes/fluid/scripts/tags/mermaid.js","hash":"75160561e1ef3603b6d2ad2938464ab1cb77fd38","modified":1648004222195},{"_id":"themes/fluid/scripts/tags/note.js","hash":"f52f3a005b41f48b4da274ac64710177c8d4502f","modified":1648004222196},{"_id":"themes/fluid/scripts/utils/object.js","hash":"649457796374c79e49a19bd541e4ad8e78fe8995","modified":1648004222196},{"_id":"themes/fluid/source/img/default.png","hash":"7bb2b8ee07db305bcadee2985b81b942027ae940","modified":1648004222203},{"_id":"themes/fluid/scripts/utils/join-path.js","hash":"629e7deb3955f750c1cfa6fc773f412e020fcef4","modified":1648004222196},{"_id":"themes/fluid/scripts/tags/checkbox.js","hash":"63468f7875c09d9557fe8315afc97175745d9087","modified":1648004222195},{"_id":"themes/fluid/source/css/main.styl","hash":"d5a8a59c8d1fd17d699a951e59c4ce9ae44c419d","modified":1648004222203},{"_id":"themes/fluid/source/img/avatar.png","hash":"fe739a158cc128f70f780eb5fa96f388b81d478f","modified":1648004222203},{"_id":"themes/fluid/source/img/loading.gif","hash":"2d2fc0f947940f98c21afafef39ecf226a2e8d55","modified":1648004222204},{"_id":"themes/fluid/source/js/color-schema.js","hash":"cc712fc71bf33d561e1ba74fe1d52d2353092171","modified":1648004222205},{"_id":"themes/fluid/source/js/img-lazyload.js","hash":"cbdeca434ec4da51f488c821d51b4d23c73294af","modified":1648004222205},{"_id":"themes/fluid/source/js/events.js","hash":"4b9d2676c9544db9cc40a8c7d18456792299ba86","modified":1648004222205},{"_id":"themes/fluid/source/js/boot.js","hash":"3de344ee619da989f6dccf7c2ae459fe91075983","modified":1648004222204},{"_id":"themes/fluid/source/js/utils.js","hash":"9d492fab9c26311ad0ab553c890e09b9575a76f2","modified":1648004222206},{"_id":"themes/fluid/source/js/plugins.js","hash":"342b1fbc30d1465687ce389a4e07f967266d5d86","modified":1648004222206},{"_id":"themes/fluid/source/img/police_beian.png","hash":"90efded6baa2dde599a9d6b1387973e8e64923ea","modified":1648004222204},{"_id":"themes/fluid/source/js/local-search.js","hash":"bf00f5786bb8de7241f635455b67243d26656222","modified":1648004222205},{"_id":"themes/fluid/source/img/favicon.png","hash":"64b215db2cb3af98fe639e94537cb5209f959c78","modified":1648004222204},{"_id":"themes/fluid/source/css/gitalk.css","hash":"a57b3cc8e04a0a4a27aefa07facf5b5e7bca0e76","modified":1648004222203},{"_id":"themes/fluid/layout/_partial/comments/changyan.ejs","hash":"725a1fe23c672fca87edc57739b748c3adf705da","modified":1648004222183},{"_id":"themes/fluid/layout/_partial/comments/disqus.ejs","hash":"fb4502fc9204284f8b4e8dabde8477d478e826e5","modified":1648004222183},{"_id":"themes/fluid/source/xml/local-search.xml","hash":"8c96ba6a064705602ce28d096fd7dd9069630a55","modified":1648004222206},{"_id":"themes/fluid/layout/_partial/comments/gitalk.ejs","hash":"843bc141a4545eb20d1c92fb63c85d459b4271ec","modified":1648004222184},{"_id":"themes/fluid/layout/_partial/comments/cusdis.ejs","hash":"5f9dc012be27040bbe874d0c093c0d53958cc987","modified":1648004222183},{"_id":"themes/fluid/layout/_partial/comments/remark42.ejs","hash":"d4e9532feeb02aed61bd15eda536b5b631454dac","modified":1648004222184},{"_id":"themes/fluid/layout/_partial/comments/twikoo.ejs","hash":"ffe08e76c9ebd4fc27715b8a60f385b3f10d0348","modified":1648004222184},{"_id":"themes/fluid/layout/_partial/comments/livere.ejs","hash":"2264758fed57542a7389c7aa9f00f1aefa17eb87","modified":1648004222184},{"_id":"themes/fluid/layout/_partial/comments/valine.ejs","hash":"9238063c5e2928bb6fce2b99cd25ad85e78c4d1c","modified":1648004222184},{"_id":"themes/fluid/source/js/leancloud.js","hash":"b7985ac3cff9ee2722db43ee6b32b5484c43f5f2","modified":1648004222205},{"_id":"themes/fluid/layout/_partial/comments/utterances.ejs","hash":"e1ed6530dfd7310f91060a75766a93ac3c39be3a","modified":1648004222184},{"_id":"themes/fluid/layout/_partial/comments/waline.ejs","hash":"5b61661fbc65752f54f99402077dbb03044149a1","modified":1648004222185},{"_id":"themes/fluid/layout/_partial/plugins/analytics.ejs","hash":"557077a8825fffc0a2c7fe2b29f319287950244f","modified":1648004222185},{"_id":"themes/fluid/layout/_partial/plugins/nprogress.ejs","hash":"4c2d39ce816b8a6dcd6b53113c8695f8bd650a23","modified":1648004222186},{"_id":"themes/fluid/layout/_partial/plugins/math.ejs","hash":"76c4e0608ae362a265ac5e9c0fc49f75c1bc568e","modified":1648004222185},{"_id":"themes/fluid/layout/_partial/plugins/typed.ejs","hash":"ab71df2e56b60e8e193ff827e81704e5b358a977","modified":1648004222186},{"_id":"themes/fluid/layout/_partial/plugins/mermaid.ejs","hash":"10ed1f9a611449d37736e17c4e251127b38b3772","modified":1648004222186},{"_id":"themes/fluid/scripts/events/lib/footnote.js","hash":"3b2abc5f5e3b681874637e98e047dc4969eb1983","modified":1648004222190},{"_id":"themes/fluid/scripts/events/lib/compatible-configs.js","hash":"b5fd5a2d9c463eb59318af0f47c591c485b6ad27","modified":1648004222190},{"_id":"themes/fluid/scripts/events/lib/highlight.js","hash":"deed966f38cf0c8dee3f72e5b1f2e878510db0e1","modified":1648004222191},{"_id":"themes/fluid/scripts/events/lib/hello.js","hash":"28e186c32576eb3d5d923273471a001c47fe8071","modified":1648004222191},{"_id":"themes/fluid/scripts/events/lib/merge-configs.js","hash":"c1db1a4f9eca6e36b660530641e3a4fb6a30c8d8","modified":1648004222191},{"_id":"themes/fluid/scripts/events/lib/lazyload.js","hash":"a2d08e3b9f98b6371b2e64d664f079c99571494b","modified":1648004222191},{"_id":"themes/fluid/source/css/_functions/base.styl","hash":"2e46f3f4e2c9fe34c1ff1c598738fc7349ae8188","modified":1648004222196},{"_id":"themes/fluid/source/css/_variables/base.styl","hash":"26d29403d8ecb0b533e63bde3ca73b2c91f171ff","modified":1648004222202},{"_id":"themes/fluid/source/css/_pages/pages.styl","hash":"b8e887bc7fb3b765a1f8ec9448eff8603a41984f","modified":1648004222202},{"_id":"themes/fluid/source/css/_mixins/base.styl","hash":"542e306ee9494e8a78e44d6d7d409605d94caeb3","modified":1648004222196},{"_id":"themes/fluid/source/lib/hint/hint.min.css","hash":"b38df228460ebfb4c0b6085336ee2878fe85aafe","modified":1648004222206},{"_id":"themes/fluid/source/css/_pages/_archive/archive.styl","hash":"6e6f22b664199772370b59ce1678b0c148b5849f","modified":1648004222197},{"_id":"themes/fluid/source/css/_pages/_about/about.styl","hash":"15d2786d00418e61022475194ad76445d68e27ea","modified":1648004222196},{"_id":"themes/fluid/source/css/_pages/_base/base.styl","hash":"dabd87267d60240c0daea0f35a46f30ee1b2337a","modified":1648004222199},{"_id":"themes/fluid/source/css/_pages/_base/color-schema.styl","hash":"32fb938d72b2d86159cb315a98b086bd17fa4415","modified":1648004222199},{"_id":"themes/fluid/source/css/_pages/_base/inline.styl","hash":"d547ab0b91f84eb0acd0bc0c5d716ce17c30361a","modified":1648004222199},{"_id":"themes/fluid/source/css/_pages/_base/keyframes.styl","hash":"94065ea50f5bef7566d184f2422f6ac20866ba22","modified":1648004222200},{"_id":"themes/fluid/source/css/_pages/_category/categories.styl","hash":"1ab7db37c2f7dc7ccdb994dcb41c16a4c8920397","modified":1648004222200},{"_id":"themes/fluid/source/css/_pages/_base/rewrite.styl","hash":"4c6fffc6d4a3b8830931800ee7da99dccf1be36e","modified":1648004222200},{"_id":"themes/fluid/source/css/_pages/_index/index.styl","hash":"ad7dcc8a060d94d3c44ca5e0788a24ca38be0f79","modified":1648004222200},{"_id":"themes/fluid/source/css/_pages/_links/links.styl","hash":"cd4ebb1426abed9fda93b797b02c6d5dd71dc2a1","modified":1648004222201},{"_id":"themes/fluid/source/css/_pages/_post/post.styl","hash":"3a6b4f8a29648d9d2c1e99b52a7b42df3f15cf62","modified":1648004222201},{"_id":"themes/fluid/source/css/_pages/_post/tag_plugin.styl","hash":"766fcf017deb4c8b0c260ac4c8d2e3489407ad89","modified":1648004222201},{"_id":"themes/fluid/source/css/_pages/_tag/tags.styl","hash":"65bfc01c76abc927fa1a23bf2422892b0d566c3f","modified":1648004222202},{"_id":"themes/fluid/source/css/_pages/_base/_widget/board.styl","hash":"32d90bcc8bf2fd5d8d78e86a567973d4b69bcfa1","modified":1648004222197},{"_id":"themes/fluid/source/css/_pages/_base/_widget/copy-btn.styl","hash":"9f932ca3f9625c13aa5353f58319881e62c0c653","modified":1648004222197},{"_id":"themes/fluid/source/css/_pages/_base/_widget/banner.styl","hash":"30f8fab95a5214d79df0ccc02b937df8bd885676","modified":1648004222197},{"_id":"themes/fluid/source/css/_pages/_base/_widget/header.styl","hash":"d8011325756eb6e4ce619b3e7b4d6d80c2de8a57","modified":1648004222198},{"_id":"themes/fluid/source/css/_pages/_base/_widget/footnote.styl","hash":"ae9289cc89649af2042907f8a003303b987f3404","modified":1648004222197},{"_id":"themes/fluid/source/css/_pages/_base/_widget/footer.styl","hash":"35539a1ce8476e75515015a06d01ec66e4af6834","modified":1648004222197},{"_id":"themes/fluid/source/css/_pages/_base/_widget/scroll-btn.styl","hash":"55e10a6965462f8f62f85e75fd5e143af02a4b44","modified":1648004222198},{"_id":"themes/fluid/source/css/_pages/_base/_widget/search.styl","hash":"10f7e91a91e681fb9fe46f9df7707b9ef78707c8","modified":1648004222198},{"_id":"themes/fluid/source/css/_pages/_base/_widget/qrcode.styl","hash":"461d609a802a4f9aa9f492411ed8074813a956b7","modified":1648004222198},{"_id":"source/_posts/assets/image-20220627160350177.png","hash":"26bcf7864f1addef724c6d941f10383a2ac0d469","modified":1656429140075},{"_id":"source/_posts/assets/image-20220628下午112402931.png","hash":"781f06bcdfabb5fbfb557dccc0520ee8e9fad85d","modified":1656429842932},{"_id":"source/_posts/assets/image-20220628下午114158930.png","hash":"d2586ceb13942abd4c8aa2881b2c5b60f7ed7d84","modified":1656430918933},{"_id":"source/_posts/assets/image-20220628下午112425913.png","hash":"e553dd2008323dd8cc407a62f36b389dd9d37aca","modified":1656429865917},{"_id":"public/local-search.xml","hash":"7e18073354c1ff1a1a2d2de945e0d9fb9a3fbeb9","modified":1689679911514},{"_id":"public/archives/index.html","hash":"c9e54771774a2d468fded92e2e1e64970797a196","modified":1689679911514},{"_id":"public/archives/2021/index.html","hash":"a35b35cde34449caad342378d95bf83c8c849e86","modified":1689679911514},{"_id":"public/archives/2021/05/index.html","hash":"b355f9d67118da17fe1030e5cbef8c734cad4c25","modified":1689679911514},{"_id":"public/archives/2021/06/index.html","hash":"2b36b26d5b99c08d1d54c9f31b757bcc6f752c84","modified":1689679911514},{"_id":"public/archives/2021/07/index.html","hash":"41e5ab3c0b91c916d6cb892d0f29f78d300b7548","modified":1689679911514},{"_id":"public/archives/2021/10/index.html","hash":"1c6283458e77c9e8f63c41afd193da027ade984d","modified":1689679911514},{"_id":"public/archives/2022/index.html","hash":"012bfaf31ab76632235878d28704f0ec75d45ff0","modified":1689679911514},{"_id":"public/archives/2022/03/index.html","hash":"ccce0f9e549c0ccc5c9588fb92f2a92835163d76","modified":1689679911514},{"_id":"public/archives/2022/06/index.html","hash":"d8cb11e4c19caa232836c191c9dfebfae99509a8","modified":1689679911514},{"_id":"public/archives/2023/index.html","hash":"959881e96132f3b955175a8bc6093c3d26a9a114","modified":1689679911514},{"_id":"public/archives/2023/07/index.html","hash":"959881e96132f3b955175a8bc6093c3d26a9a114","modified":1689679911514},{"_id":"public/categories/mq/index.html","hash":"2883bac718b8d055e69f71b390eca87f15e4dca2","modified":1689679911514},{"_id":"public/categories/数据库/index.html","hash":"740c2a8add4d828148d0d81fd81c2848c5b057c4","modified":1689679911514},{"_id":"public/categories/rabbitmq/index.html","hash":"4fbf9779abe09e9fea558b00c6a625fb82d26991","modified":1689679911514},{"_id":"public/categories/java/index.html","hash":"90579ed200410ff284befccbe2d18a17c66daf3a","modified":1689679911514},{"_id":"public/categories/网络/index.html","hash":"22ac03c24f458c0a95a9039cb6203f481dc556ef","modified":1689679911514},{"_id":"public/categories/个人向记录/index.html","hash":"530b330b09e0585e2f9bfc0c2ddafe00656285c6","modified":1689679911514},{"_id":"public/categories/redis/index.html","hash":"65d56d088463d5e49b2f07f377719dea9f669e5f","modified":1689679911514},{"_id":"public/tags/Disruptor/index.html","hash":"2c70974e32cd7b7ce7188c68375c7707dceadaa8","modified":1689679911514},{"_id":"public/tags/MySQL/index.html","hash":"c11e33f7bdf0b59ae9832c889a2db336737c5504","modified":1689679911514},{"_id":"public/tags/mq/index.html","hash":"1d3cffd33c0eed26969a15ce9d0a3708ef93385a","modified":1689679911514},{"_id":"public/tags/jvm/index.html","hash":"04409cae4c7cd098bc0ef61754fbddfcfd5849d7","modified":1689679911514},{"_id":"public/tags/jdk/index.html","hash":"2b7477dc2cda36d3ca295be656cad0924f7fc5af","modified":1689679911514},{"_id":"public/tags/tcp/index.html","hash":"7da77606ea45ae31f71c984bfd84d3154d440503","modified":1689679911514},{"_id":"public/tags/工作/index.html","hash":"9e00314d7677a7457d20918ff44fb84585b24bf7","modified":1689679911514},{"_id":"public/tags/redis/index.html","hash":"07e2f4b371c680806e2edc51cb0a6a2015169f1a","modified":1689679911514},{"_id":"public/tags/index.html","hash":"6dad28299b8231b2150661f2c1db840744282954","modified":1689679911514},{"_id":"public/404.html","hash":"817e29fc5166e6f5208d447bdf4d380a58c40cc8","modified":1689679911514},{"_id":"public/links/index.html","hash":"1bd05735cd0b6d02f75a805d5bf4f86370d41730","modified":1689679911514},{"_id":"public/2022/06/28/学习生活总结（2022上半年/index.html","hash":"c9eb4bfaf18d8e7b2569c3a1744a2707a746beb4","modified":1689679911514},{"_id":"public/2022/03/18/MySQL/index.html","hash":"f05ad3ed8e982cf20e713d9d8b0b473467a066ad","modified":1689679911514},{"_id":"public/2023/07/17/Disruptor/index.html","hash":"0dd1f285d2df6b6541211c587666436c8fcffde0","modified":1689679911514},{"_id":"public/2021/10/12/tcp协议整理/index.html","hash":"97e4003e52ff1e34c11dd8ced6fc3759488b0d6d","modified":1689679911514},{"_id":"public/2021/07/15/Synchronized/index.html","hash":"49c3fdcb0a4b511a9b64d9e7da191758689b12ed","modified":1689679911514},{"_id":"public/2021/06/16/RabbitMQ 如何保证消息不丢失/index.html","hash":"c464875e12be69b54825cb6fd687e2edce44a4b8","modified":1689679911514},{"_id":"public/2021/06/05/浅析-JVM-类加载子系统/index.html","hash":"1554b0872072e7d6924a9263673875a2be2e8cb3","modified":1689679911514},{"_id":"public/2021/05/30/ThreadLocal实现解析/index.html","hash":"ff015de061f27e3aeca5926ebbe2daa01502e1ac","modified":1689679911514},{"_id":"public/2021/05/28/浅谈Redis的主从复制模式/index.html","hash":"964872469e9207cb0e493b3d4a639357a2c38221","modified":1689679911514},{"_id":"public/index.html","hash":"3063cddd0686caf955a32499d4c57b88cac8faa9","modified":1689679911514},{"_id":"public/categories/index.html","hash":"869e83d3a43fae5873390634be600aeee1819300","modified":1689679911514},{"_id":"public/img/default.png","hash":"7bb2b8ee07db305bcadee2985b81b942027ae940","modified":1689679911514},{"_id":"public/img/police_beian.png","hash":"90efded6baa2dde599a9d6b1387973e8e64923ea","modified":1689679911514},{"_id":"public/img/loading.gif","hash":"2d2fc0f947940f98c21afafef39ecf226a2e8d55","modified":1689679911514},{"_id":"public/img/favicon.png","hash":"64b215db2cb3af98fe639e94537cb5209f959c78","modified":1689679911514},{"_id":"public/img/avatar.png","hash":"fe739a158cc128f70f780eb5fa96f388b81d478f","modified":1689679911514},{"_id":"public/CNAME","hash":"6197a98b48c019fa5342776341a0361be8b8844b","modified":1689679911514},{"_id":"public/xml/local-search.xml","hash":"8c96ba6a064705602ce28d096fd7dd9069630a55","modified":1689679911514},{"_id":"public/css/gitalk.css","hash":"a57b3cc8e04a0a4a27aefa07facf5b5e7bca0e76","modified":1689679911514},{"_id":"public/js/img-lazyload.js","hash":"cbdeca434ec4da51f488c821d51b4d23c73294af","modified":1689679911514},{"_id":"public/js/plugins.js","hash":"342b1fbc30d1465687ce389a4e07f967266d5d86","modified":1689679911514},{"_id":"public/js/color-schema.js","hash":"cc712fc71bf33d561e1ba74fe1d52d2353092171","modified":1689679911514},{"_id":"public/js/boot.js","hash":"3de344ee619da989f6dccf7c2ae459fe91075983","modified":1689679911514},{"_id":"public/js/local-search.js","hash":"bf00f5786bb8de7241f635455b67243d26656222","modified":1689679911514},{"_id":"public/js/utils.js","hash":"9d492fab9c26311ad0ab553c890e09b9575a76f2","modified":1689679911514},{"_id":"public/js/leancloud.js","hash":"b7985ac3cff9ee2722db43ee6b32b5484c43f5f2","modified":1689679911514},{"_id":"public/js/events.js","hash":"4b9d2676c9544db9cc40a8c7d18456792299ba86","modified":1689679911514},{"_id":"public/lib/hint/hint.min.css","hash":"b38df228460ebfb4c0b6085336ee2878fe85aafe","modified":1689679911514},{"_id":"public/css/main.css","hash":"be9a0652de06d61fa26f4b4128b29bcc5a4a0ad7","modified":1689679911514},{"_id":"source/_posts/assets/RingBuffer#publishEvent.png","hash":"d4281ac5f4e5e401d3b010f62e3748330292a777","modified":1687190885317},{"_id":"source/_posts/assets/RingBuffer_publishEvent.png","hash":"d4281ac5f4e5e401d3b010f62e3748330292a777","modified":1687190885317},{"_id":"source/_posts/assets/EventTranslator.png","hash":"5f067ceeefe2caa0c355665334e32ed308efa0e6","modified":1686064517518},{"_id":"source/_posts/assets/Disruptor_publishEvent.png","hash":"4b1a7da834ba5d8b07cac104af52eaabb27b843b","modified":1686064517518}],"Category":[{"name":"mq","_id":"clk87sjyg0002wnbv53pe47g2"},{"name":"数据库","_id":"clk87sjyi0007wnbv2s3v2cf2"},{"name":"rabbitmq","_id":"clk87sjyi000cwnbv1iwlap0q"},{"name":"java","_id":"clk87sjyj000gwnbvf7qm7q2v"},{"name":"网络","_id":"clk87sjyj000nwnbvee9l9vfm"},{"name":"个人向记录","_id":"clk87sjyk000wwnbv1dix54hg"},{"name":"redis","_id":"clk87sjyl0011wnbv3y2ihnhs"}],"Data":[],"Page":[],"Post":[{"title":"Disruptor（高性能内存队列","date":"2023-07-17T15:52:17.000Z","index_img":"https://chenqwwq.oss-cn-hangzhou.aliyuncs.com/note/Disruptor%E7%9A%84%E5%89%AF%E6%9C%AC.png","banner_img":"https://chenqwwq.oss-cn-hangzhou.aliyuncs.com/note/Disruptor%E7%9A%84%E5%89%AF%E6%9C%AC.png","mermaid":true,"_content":"\n\n\n# Disruptor 框架\n\n> 以下源码基于 3.4.4 版本，未完待续。\n\n![Disruptor](https://chenqwwq.oss-cn-hangzhou.aliyuncs.com/note/Disruptor%E7%9A%84%E5%89%AF%E6%9C%AC.png)\n\n---\n\n## 概述\n\n以下是 Disruptor 官网的介绍图：\n\n![models](https://chenqwwq.oss-cn-hangzhou.aliyuncs.com/note/models.png)\n\n\n\nDisruptor 是 LMAX 基于 Java 语言实现的**高性能队列**，相比于 Java 的 BlockedQueue，它有以下几个特点：\n\n1. 无锁化（后续讲到的等待策略，所选择上所等待\n2. 内存的预分配（队列会实现创建指定数量的对象\n3. 事件广播（通过 Disruptor 发布的事件会被各个消费者分别消费\n\n<br>\n\nDisruptor 对生产者/消费者的各个模块都进行了抽象（上图中也标注了各个角色），各个角色的作用如下：\n\n**RingBuffer** 是最重要的中间队列，保存事件对象，也协调生产者和消费者之间的依赖关系。\n\nProducer 是生产者，任何持有 RingBuffer 的对象都可以作为生产者。\n\nConsumer 是消费者，消费者需要实现 EventHandler，并且需要向 Disruptor 注册信息。\n\n**Sequence** 表示的是生产/消费的序号（或者说偏移量？）可以类比于 AtomicLong，但是 Sequence 通过内存填充避免了伪共享\n\n> 生产者的 Sequence 由 RingBuffer 统一管理，消费者的 Sequence 则由各个消费者各自管理。\n>\n> 因此各个消费者会分别消费事件，不会互相影响，类似 Kafka 的消费者组，所以消息会被每个消费者都处理一次。\n\n> 某些层面上 Disruptor 和 Guava 的 EventBus 有点像（后续可以对比一下两者的实现。\n>\n> EventBus 是监听器模型，而 Disruptor 则是生产者/消费者模型，相对来说 Disruptor 的实现更加复杂也更加灵活高效。\n\n\n\n## 源码分析\n\n### Disruptor\n\nDisruptor 是整个框架的核心，**负责协调生产者和队列、队列和消费者之间的关系，并对外提供基础 API。**\n\nDisruptor 主要持有 RingBuffer 的对象引用，以及所有的消费者信息（生产者的信息并不需要保存，谁持有该对象都可以成为生产者。\n\n![Disruptor类属性](https://chenqwwq.oss-cn-hangzhou.aliyuncs.com/note/Disruptor%E7%B1%BB%E5%B1%9E%E6%80%A7.png)\n\n\n\n#### 创建流程\n\n（先通过创建过程来了解 Disruptor 整个对象的构造。\n\nDisruptor 的创建方法如下：\n\n```java\npublic Disruptor(\n  final EventFactory<T> eventFactory,\n  final int ringBufferSize,\n  final ThreadFactory threadFactory,\n  final ProducerType producerType,\n  final WaitStrategy waitStrategy)\n{\n  this(\n    RingBuffer.create(producerType, eventFactory, ringBufferSize, waitStrategy),\n    new BasicExecutor(threadFactory));\n}\n\n/**\n     * Private constructor helper\n     */\nprivate Disruptor(final RingBuffer<T> ringBuffer, final Executor executor)\n{\n  this.ringBuffer = ringBuffer;\n  this.executor = executor;\n}\n```\n\n**Disruptor 的创建流程主要就是创建了对应的 RingBuffer 对象，并且指定消费者所用的线程工厂。**\n\n> 消费者的线程模型非常重要，这是非常容易出问题的一个点，并且在源码中也建议不要使用线程池实现。\n\n<br>\n\n整体的参数含义如下：\n\n| 参数名称       | 含义                                                         |\n| -------------- | ------------------------------------------------------------ |\n| eventFactory   | 事件工厂（RingBuffer 会调用该接口方法，创建 RingBufferSize 个对象重复使用 |\n| ringBufferSize | RingBuffer 的大小，必须为2次幂                               |\n| threadFactory  | 线程工厂（用于创建消费者所需要的线程，也可以指定线程池       |\n| producerType   | 生产者类型（根据单生产者还是多生产者会使用不同的并发策略     |\n| waitStrategy   | 等待策略（生产者的等待策略，而消费者的等待策略在指定消费者的时候决定 |\n\n（以上参数基本就是 Disruptor 的所有控制参数了，接下来在看 RingBuffer 的创建流程。\n\n<br>\n\n<br>\n\n####  RingBuffer 创建流程\n\n以下是 3.4.4 版本中 RingBuffer 的定义注释以及继承图：\n\n![RingBuffer 注释](https://chenqwwq.oss-cn-hangzhou.aliyuncs.com/note/RingBuffer%E6%B3%A8%E9%87%8A.png)\n\n（基于环形数组实现的可重复使用实例对象的存储组件，保存的数据的在生产者和消费者之间交换。\n\n\n\n<br>\n\n![RingBuffer 类图](https://chenqwwq.oss-cn-hangzhou.aliyuncs.com/note/RingBuffer%E7%B1%BB%E5%9B%BE.png)\n\n\n\nRingBufferFields 、RingBufferPad 是 RingBuffer 做数据填充，避免缓存行的伪共享的实现。\n\n> 伪共享是指相关性较差的数据使用同一缓存行保存，而各自的修改会导致缓存行更频繁的失效，从何导致的性能降低。\n>\n> Disruptor 的处理方法很优雅，直接扩充当前重点数据大小到大于等于缓存行大小为止。\n\n\n\nEventSink 和 DataProvider 是 RingBuffer 的两个角色，对于生产者来说是事件的接受者，对于消费者来说又是数据的提供者。\n\nSequenced 等接口表示这 RingBuffer 对 Sequence 的操作角色。\n\n<br>\n\nRingBuffer 对外提供的创建方法如下：\n\n```java\npublic static <E> RingBuffer<E> create(\n  ProducerType producerType,\t// 生产者类型\n  EventFactory<E> factory,\t\t// 事件工厂\n  int bufferSize,\t\t\t\t\t\t\t// Buffer 的大小\n  WaitStrategy waitStrategy)\t// 生产者的等待策略\n{\n  // 根据生产类型调用不同的创建方法\n  // （其实最终创建的都是 RingBuffer，但是创建的生产者 Sequencer 不同\n  switch (producerType)\n  {\n    case SINGLE:\n      // 对应创建的是 SingleProducerSequencer\n      return createSingleProducer(factory, bufferSize, waitStrategy);\n    case MULTI:\n      // 对应创建的是 MultiProducerSequencer\n      return createMultiProducer(factory, bufferSize, waitStrategy);\n    default:\n      throw new IllegalStateException(producerType.toString());\n  }\n}\n```\n\nRingBuffer **的大小是固定的**，并且创建的时候就需要传入 EventFactory，Buffer 中所有的事件对象都是通过该工厂创建的。\n\n（因为大小是固定的，所以 RingBuffer 更可以类比 ArrayBlockedQueue 实现的生消模型。\n\n<br>\n\n另外为了更好地做并发控制， **RingBuffer 也区分了生产者类型**，以 SINGLE 生产者类型为例：\n\n```java\npublic static <E> RingBuffer<E> createMultiProducer(EventFactory<E> factory, int bufferSize){\n  // 默认等待策略为阻塞等待 BlockingWaitStrategy\n  return createMultiProducer(factory, bufferSize, new BlockingWaitStrategy());\n}\n\npublic static <E> RingBuffer<E> createSingleProducer( EventFactory<E> factory,int bufferSize, WaitStrategy waitStrategy){\n  // 对应 SingleProducerSequencer\n  SingleProducerSequencer sequencer = new SingleProducerSequencer(bufferSize, waitStrategy);\n  return new RingBuffer<E>(factory, sequencer);\n}\n```\n\nSINGLE 对应的 Sequencer 类型为 SingleProducerSequencer，而 MULTI 对应的则是 MultiProducerSequencer。\n\n（两种 Sequencer 的并发控制是完全不一样的，毕竟单一生产者咩有并发\n\n<br>\n\n最后就是 RingBuffer 的构造函数的调用:\n\n```java\nRingBufferFields(EventFactory<E> eventFactory,Sequencer sequencer){\n  this.sequencer = sequencer;\n  this.bufferSize = sequencer.getBufferSize();\n  // 参数检查\n  // 大小不能小于1\n  if (bufferSize < 1){\n    throw new IllegalArgumentException(\"bufferSize must not be less than 1\");\n  }\n  // 大小必须要2次幂\n  if (Integer.bitCount(bufferSize) != 1){\n    throw new IllegalArgumentException(\"bufferSize must be a power of 2\");\n  }\n  // indexMask 用于 & 求对应下标\n  this.indexMask = bufferSize - 1;\n  // 创建对应数组（数组需要加上对齐填充\n  this.entries = new Object[sequencer.getBufferSize() + 2 * BUFFER_PAD];\n  // 使用工厂方法填充数组\n  fill(eventFactory);\n}\n\nprivate void fill(EventFactory<E> eventFactory){\n  // 只填充有效个数\n  for (int i = 0; i < bufferSize; i++){\n    entries[BUFFER_PAD + i] = eventFactory.newInstance();\n  }\n}\n```\n\n\n\nRingBuffer 在**创建的过程中间就会调用 EventFactory#newInstance 方法创建所需要的所有对象，为了后续的重复使用。**\n\nRingBuffer 的大小必须为2次幂，为了使用 k & (n-1) 求对应数组下标。\n\nRingBuffer 中为了避免伪共享，做了很多的填充，例如整个的数组会多创建一些填充对象。\n\n总结来说，**RingBuffer 的创建流程主要完成以下几件事情：**\n\n1. **创建环形数组并且创建所有 Event 对象**\n2. **根据生产者类型创建对应的 Sequencer**\n\n\n\n<br>\n\n### 消费者\n\nDisruptor 在启动前就需要指定消费者，同时也可以指定各消费者之间的依赖关系（也就是层级消费。\n\n**消费者的依赖关系也就是层级消费，以 EventHandlerGroup 作为基本单位进行依赖关系的编排**，GroupA 可以根据 GroupB 的消费进度进行事件消费。\n\n> 即使在 EventHandlerGroup 中的 EventHandler 对象也不会共享一个 Sequence，会各自消费完整的事件列表。\n\n<br>\n\n#### 注册和启动流程\n\nDisruptor 中的消费者需要提前注册（上文中提到的 Disruptor 会保存所有的消费者信息），然后随着框架的启动而开始执行。\n\n<br>\n\nDisruptor 提供了多种方式来进行注册：（消费者是向 Disruptor 对象注册的\n\n1. EventHandler（最终会被包装为 EventProcessor 进行注册，当前 Disruptor 所持有的 RingBuffer 会作为 DataProvider 传入。\n2. EventProcessorFactory（会使用工厂类直接创建 EventProcessor 进行消费者的注册\n3. EventProcessor（继承了 Runnable，在启动时执行\n4. WorkHandler\n\n<br>\n\n以下是通过 EventHandler 创建消费者的过程：\n\n（源码中主要需要注意 Disruptor 对于 Sequence 的处理，因为期间需要相互依赖。\n\n```java\n// Disruptor#handleEventsWith\npublic final EventHandlerGroup<T> handleEventsWith(final EventHandler<? super T>... handlers){\n  // 直接创建 EventProcessor\n  // 初始化一个空的 Sequence 表示当前的消费者无依赖关系（除了生产者依赖\n  return createEventProcessors(new Sequence[0], handlers);\n}\n\n// Disruptor#createEventProcessors\n// 创建消费者实例\n// 参数包含 barrierSequence，是他依赖的上层消费者，当前消费者只能消费上层已经全部消费过的数据\n// 例如，当前依赖的三个上层消费者的 offset [1,10,10]，那么此时只能消费 1 的数据\nEventHandlerGroup<T> createEventProcessors(final Sequence[] barrierSequences,final EventHandler<? super T>[] eventHandlers){\n  // 只能在未开始的时候添加消费者\n  checkNotStarted();\n  // 注册的消费者的 Sequence\n  final Sequence[] processorSequences = new Sequence[eventHandlers.length];\n  // 创建 Barrier（是当前消费者依赖的 Barrier，由 RingBuffer 创建\n  // ！！！消费者对于生产者的依赖是此时创建的，在后续创建 BatchEventProcessor 的时候添加进消费者\n  // 此时创建的对象是 ProcessingSequenceBarrier，包含了依赖的 Sequence 和 RingBuffer 的 Sequence\n  final SequenceBarrier barrier = ringBuffer.newBarrier(barrierSequences);\n\t// 遍历创建 BatchEventProcessor\n  for (int i = 0, eventHandlersLength = eventHandlers.length; i < eventHandlersLength; i++){\n    final EventHandler<? super T> eventHandler = eventHandlers[i];\n    // ！！important  创建的最终消费实例是 BatchEventProcessor 添加了依赖的 barrier\n    final BatchEventProcessor<T> batchEventProcessor = new BatchEventProcessor<>(ringBuffer, barrier, eventHandler);\n    // 异常处理，这个是 Disruptor 确定的\n    if (exceptionHandler != null){\n      batchEventProcessor.setExceptionHandler(exceptionHandler);\n    }\n    // 消费者注册中心（会保存几类常用的映射\n    consumerRepository.add(batchEventProcessor, eventHandler, barrier);\n    // 消费者的 Processor\n    processorSequences[i] = batchEventProcessor.getSequence();\n  }\n  // 更新 Disruptor 的 GatingSequences\n  // barrierSequences 是指定当前消费者的依赖对象\n  updateGatingSequencesForNextInChain(barrierSequences, processorSequences);\n  // 返回一个 EventhandlerGroup，调用当前方法的所有 EventHandler 会被包含在一个 Group 里面\n  // 通过 EvntHandlerGroup 可以进一步编排后续处理逻辑\n  return new EventHandlerGroup<>(this, consumerRepository, processorSequences);\n}\n\n// Disruptor#updateGatingSequencesForNextInChain\n// 更新 GatingSequences\nprivate void updateGatingSequencesForNextInChain(final Sequence[] barrierSequences, final Sequence[] processorSequences){\n  if (processorSequences.length > 0){\n    // 将消费者的 Sequences 添加到 ringBuffer\n    ringBuffer.addGatingSequences(processorSequences);\n    // 因为当前消费者消费的都是 barrierSequences 中消费过的数据，所以当前消费者肯定是最低的 offset\n    // 因此依赖的 barrier 就没必要保存了\n    for (final Sequence barrierSequence : barrierSequences){\n      ringBuffer.removeGatingSequence(barrierSequence);\n    }\n    // barrierSequences 代表的的是当前消费者集的依赖，需要取消 endOfChain 的标记,因为他的下层还有当前的消费者\n    consumerRepository.unMarkEventProcessorsAsEndOfChain(barrierSequences);\n  }\n}\n```\n\n\n\n注册消费主要流程如下：\n\n1. 检查 Disruptor 是否已经开启\n2. 创建对应的 EventProcessor （具体对象为 BatchEventProcessor，包含了ExceptionHandler 和 RingBuffer。\n3. 向 ConsumerRepository 注册当前的消费者信息（消费者并未启动，所以此时需要集中管理\n4. 处理 Sequence（非常重要，依赖关系都靠这个协调\n   - 向 RingBuffer 添加当前的消费者的 Sequence（**保证生产者的 Sequence 不超过消费者**\n   - 移除 RingBuffer 中当前消费者依赖的 Sequence（当前消费者的序号肯定小于依赖，所以只需要关注当前消费者的序号就好\n   - 处理具有依赖关系的消费者之间的 Sequence（**当前消费者不能超过依赖目标的序号。**\n5. 返回 EventHandlerGroup（EventHandlerGroup 对象包含 after 等方法可以作为顺序处理逻辑的编排方法\n\n\n\n消费者最终的实例对象为 BatchEventProcessor（后续的消费逻辑，通过 RingBuffer 获取事件以及调用对应处理方法的逻辑都在该类中实现，EventProcessor 继承了 Runnable 所以可以直接执行。\n\n> 需要注意的是，Disruptor 不允许在运行过程中添加消费者，所以在  `Disruptor#start()` 前就需要注册全部的消费者。\n\n<br>\n\n#### 启动流程\n\n启动流程对应的是 `Disruptor#start` 方法，在启动之前所有的消费者都以 EventProcessor 的形式保存在 ConsumerRepository 中。\n\n方法的源码如下：\n\n```java\npublic RingBuffer<T> start(){\n  // 只能启动一次\n  checkOnlyStartedOnce();\n  // 遍历所有注册的消费者并启动\n  for (final ConsumerInfo consumerInfo : consumerRepository){\n    consumerInfo.start(executor);\n  }\n\t// 返回 RingBuffer\n  return ringBuffer;\n}\n```\n\nEventProcessor 继承了 Runnable 方法可以直接使用 Executor 启动该类，在 Disruotor 创建的时候传入的 ThreadFactory 参数会被包装为 Executor，此时就用到了。\n\n\n\n#### 消费流程\n\n启动过程中 EvnetProcessor 就作为 Runnable 被放入线程池执行，所以消费的主题流程也实现在继承的 run() 方法中。\n\n（以下的实现 BatchEventProcessor 为主，WorkProcessor 还没看呢\n\n<br>\n\n以下是 BatchEventProcessor 的处理逻辑：\n\n```java\n@Override\npublic void run(){\n\t// 更新当前的状态，启动处理器\n  // 状态是从 IDLE 到 RUNNING\n  if (running.compareAndSet(IDLE, RUNNING)){\n    // 清除警告\n    sequenceBarrier.clearAlert();\n    // 如果继承了 LifecycleAware，则执行 onStart 方法\n    // onStart 方法是每次从 IDLE 转变到 RUNNING 状态的时候都会执行的，而不是创建的时候一次\n    notifyStart();\n    try{\n      // 在判断一次是否启动成功\n      if (running.get() == RUNNING){\n        // 实际的处理逻辑\n        processEvents();\n      }\n    }finally{\n      // 如果继承了 LifecycleAware，则执行 onShutdown 方法\n      notifyShutdown();\n      // 正常退出,标记处理器为空闲状态\n      running.set(IDLE);\n    }\n  }else{\n\t\t// 可能是已经启动（那本次就是重复启动\n    if (running.get() == RUNNING){\n      throw new IllegalStateException(\"Thread is already running\");\n    }else{\n\t\t\t// 未启动成功并且当前状态部位 RUNNING\n      // 可能是当前处于 HALTED 状态\n      // 该方法就是执行一遍 onStart 和 onShutdown\n      earlyExit();\n    }\n  }\n}\n```\n\n\n\n在消费者启动和关闭的时候都有对应的回调方法（notifyStart / notifyStart），对应的就是  **LifecycleAware** 接口：\n\n![image-20230619上午122557863](assets/image-20230619上午122557863.png)\n\n> EventHandler 可以通过继承该接口实现前后的回调，在整个生命周期各执行一次。\n\n消费的正常逻辑就是以下几步：\n\n1. CAS 修改状态（IDLE -> RUNNING\n2. 前置回调（LifecycleAware#onStart\n3. 事件处理（processEvents\n4. 后置回调（LifecycleAware#onShutdown\n5. 状态修改 （任何状态 -> IDLE\n\n\n\n#### 事件轮询和阻塞逻辑\n\n以下是 processEvents 的处理逻辑：\n\n```java\nprivate void processEvents(){\n  T event = null;\n  long nextSequence = sequence.get() + 1L;\n  // 死循环了,没有break别想走\n  while (true){\n    try{\n      // 等待下一个可用序号（waitFor 里面就包含了消费者和生产者之间通过序号协调的逻辑\n      // 返回最大可用序号\n      final long availableSequence = sequenceBarrier.waitFor(nextSequence);\n      // 在事件的批量处理之前,会有一个前置方法\n      if (batchStartAware != null){\n        // 当前批次的大小\n        batchStartAware.onBatchStart(availableSequence - nextSequence + 1);\n      }\n      // 循环遍历所有可用序号\n      while (nextSequence <= availableSequence){\n        // 获取对应序号下的事件\n        event = dataProvider.get(nextSequence);\n        // 调用实际方法处理获取的事件\n        eventHandler.onEvent(event, nextSequence, nextSequence == availableSequence);\n        nextSequence++;\n      }\n      sequence.set(availableSequence);\n    }catch (final TimeoutException e){\n      // 处理超时异常\n      notifyTimeout(sequence.get());\n    }catch (final AlertException ex){\n      // AlertException 应该是状态变更的时候爆的\n      // 如果不是运行中状态就退出\n      if (running.get() != RUNNING){\n        break;\n      }\n    }catch (final Throwable ex){\n      // 处理异常\n      handleEventException(ex, nextSequence, event);\n      // 记录处理的序号（nextSequence 就是处理失败的序号\n      sequence.set(nextSequence);\n      // 接下来的序号（直接忽略了出现异常的这次事件处理\n      nextSequence++;\n    }\n  }\n}\n```\n\n\n\n事件的轮训通过一个死循环包括，**不是 AlertEcveption 就无法退出**。\n\n> 一个消费者是一个无限执行的任务，所以最好不要用线程池去执行消费的 Runnable，或者说线程数和消费者数量最好是 1:1\n\nBatchEventProcessor 并不会直接访问 RingBuffer 获取可用事件，而是通过 SequenceBarrier 实现（此前是通过 RingBuffer#newBarrier 创建的。\n\n> 消费者通过 SequenceBarrier 来实现对生产者和上层消费者的依赖。\n\n在获取到可用序号后，会先执行批量处理的前置回调 BatchStartAware#onBatchStart。\n\n> BatchStartAware 也是通过 EventHandler 实现的。\n>\n> （Disruptor 这个实现我喜欢，**所有的 Aware 都需要富集到 EventHandler 中统一注册。**\n\n完成回调之后，遍历可用序号逐个从 RingBuffer 中获取事件（DataProvider 就是 RingBuffer。\n\n然后调用 EventHandler#onEvent 完成实际的事件处理。\n\n<br>\n\n对于执行过程中的 TimeoutException（等待的超时，处理过程中的超时），都会触发 TimeoutHandler#onTimeout。\n\n对于 AlterException 则会判断状态，在非运行中状态时跳出循环。\n\n对于其他未知异常则会调用 ExceptionHandler#handleEventException 方法处理。\n\n\n\n##### 阻塞逻辑\n\n> 在消费速度大于生产速度的时候，就需要消费者阻塞等待生产。\n\n消费者并不会直接访问 RingBuffer，而是通过 SequenceBarrier，以下是对应的 waitFor 方法：\n\n```java\n// sequence 表示的是需要等待的序号\n@Override\npublic long waitFor(final long sequence)\n  throws AlertException, InterruptedException, TimeoutException{\n  // 检查是否有告警信息\n  checkAlert();\n  // cursorSequence 表示的是生产者当前的序号\n  // dependentSequence 是上层消费者的序号\n  // this 就是当前的消费者\n  long availableSequence = waitStrategy.waitFor(sequence, cursorSequence, dependentSequence, this);\n  // 如果获取的消费者小雨 sequence，表示咩没有货渠到可用的事件\n  // 直接返回最大可用事件\n  if (availableSequence < sequence){\n    return availableSequence;\n  }\n  // 存在可用的事件，获取最大的可用序号\n  return sequencer.getHighestPublishedSequence(sequence, availableSequence);\n}\n```\n\n而 SequenceBarrier 也是通过 WaitStrategy 抽象出等待逻辑，在 Disruptor 官方实现中提供了以下几种：\n\n| 实现类                          | 作用                                                    |\n| ------------------------------- | ------------------------------------------------------- |\n| BlockingWaitStrategy            | 使用 ReentrantLock$Condition#await 实现的阻塞等待       |\n| BusySpinWaitStrategy            | 调用 Thread#onSpinWait 实现等待（可能没有，那就是空轮训 |\n| LiteBlockingWaitStrategy        |                                                         |\n| LiteTimeoutBlockingWaitStrategy |                                                         |\n| PhasedBackoffWaitStrategy       |                                                         |\n| SleepingWaitStrategy            |                                                         |\n| TimeoutBlockingWaitStrategy     |                                                         |\n| YieldingWaitStrategy            |                                                         |\n\n\n\n以 BlockingWaitStrategy 为例子：\n\n```java\n// cursorSequence 表示的是生产者当前的序号\n// dependentSequence 是上层消费者的序号\n@Override\npublic long waitFor(long sequence, Sequence cursorSequence, Sequence dependentSequence, SequenceBarrier barrier)\n  throws AlertException, InterruptedException {\n  long availableSequence;\n  // 如果当前序号小于需要的序号则直接使用 lock 上锁，并使用 condition 挂起当前线程\n  if (cursorSequence.get() < sequence){\n    lock.lock();\n    try{\n      while (cursorSequence.get() < sequence){\n        barrier.checkAlert();\n        // condition 直接挂起\n        processorNotifyCondition.await();\n      }\n    }finally{\n      lock.unlock();\n    }\n  }\n  while ((availableSequence = dependentSequence.get()) < sequence){\n    barrier.checkAlert();\n    // 调用的 Thread#onSpinWait\n    // 类似于 Thread#sleep(0)，但是性能相对好一点\n    ThreadHints.onSpinWait();\n  }\n  return availableSequence;\n}\n```\n\n\n\n**消费者对于生产者的依赖是直接使用 ReentreLock 上锁，并使用 Condition 阻塞的，但是对于上层消费者，只有使用空轮询等待**\n\n如果上层消费者有多个，dependentSequence 就是被包装的 FixedSequenceGroup，获取对应的序号就是获取一组 Sequence 中最小的序号。\n\n\n\n参考了其他的实现，对于上层消费者的等待实现基本都是空轮询，所以对于同类消费者分层的时候需要保证消费的高效，如果上层消费者阻塞会直接拉爆下层消费者所在工作线程。\n\n\n\n#### 层级消费的实现\n\n上面消费的流程已经说明了大部分的实现了，下层的消费者必须要持有上层消费者的 Sequence。\n\n\n\n\n\n#### 总结\n\n##### 状态流转\n\n```mermaid\nstateDiagram-v2\n\t\tstate \"IDLE(空闲)\" as I\n\t\tstate \"HALTED(停止)\" as H\n\t\tstate \"RUNNING(运行中)\" as R\n\t\t\n\t\t[*] --> I\n\t\tI --> R: Disruptor#start（EventProcessor 被送入 Executor 执行\n\t\tR --> H: Disruptor#halt（修改状态并设置告警\n\t\tR --> H: Disruptor#shutdown（等待所有事件都被消费完,再调用 halt\n\t\tH --> I: 感知到告警（checkAlert,跳出循环后修改\n  \n```\n\n\n\nDisruptor#halt 方法除了修改当前 **EventProcessor** 的状态，还会在依赖的 **SequenceBarrier** 中记录一个告警状态，并且唤醒所有等待中消费者。\n\n重新执行的过程中感知到告警状态就会抛出 AlertException，从而跳出整个 BatchEventProcessor#processEvents 的处理循环，而后在外层 BatchEventProcessor#run 中修改为 IDLE 状态。\n\n\n\n整体流程如下：\n\n```mermaid\ngraph TD\n\t  A(\"Runnable#run(整个流程的起点\") --> B[/\"更新当前状态(IDEL -> RUNNING\"/]\n  \tB --更新成功--> C[\"清空告警(clearAlert\"]\n  \tC --> D[\"执行 LifecycleAware#onStart\"]\n  \tD --> E[/\"判断当前状态(RUNNING\"/]\n  \tE --> F\n    subgraph 事件处理\n    F[\"获取可用序号(sequenceBarrier#waitFor\"]\n    F --有可用事件,返回可用的最大序号--> G[\"执行 batchStartAware#onBatchStart\"]\n    G --> H[\"获取 nextSequence 对应事件\"]\n    H --> I[\"处理事件（处理完 nextSequence++\"]\n    I --> H\n    I --> J[\"设置当前消费序号(nextSequence\"]\n    J --> F\n    F --状态改变,抛出 AlertExceotion--> K[\"break(跳出循环\"]\n    \n    F --等待超时--> M[\"执行 TimeoutHandler#onTimeout\"]\n    M --> F\n    end\n    K --> L[\"执行 LifecycleAware#onShutdown\"]\n    L --> N(\"更新状态到 IDEL（可以重新启动\")\n```\n\n（在 Disruptor#shutdown 之后，是可以重新直接 Disruptor#start 的，生产者/消费者的序号没有清空。\n\n##### 消费者的线程模型\n\n\n\nDisruptor 的构造函数中已经表明，作者不建议使用 Executor 来执行消费者的任务。\n\n因为从上文可知，消费者的线程需要循环去获取事件，Runnable 主流程在 Disruptor 关闭前就不会退出，也就是说他会独占一个线程。\n\n另外在生产者端，发布事件的时候，生产速度是受限于所有消费者组中的最慢消费速度的。\n\n因此在使用 Disruptor 的实现，都需要尽可能使用单个线程处理消费者逻辑。\n\n\n\n例如在一个【用户注册】的场景，需要在注册后进行【发送欢迎短信】、【赠送注册积分】等逻辑，就可以由单个线程去接收用户注册事件，然后外接线程池去完成对应业务。\n\n\n\n### 生产者\n\n生产者不在 Disruptor 的控制范围之内，任何持有 Disruptor 对象的都可以作为生产者，调用 Disruptor#pushlishEvent 发布事件。\n\n上文提到过，Disruptor 使用的环形队列保存待消费的事务，并且 RingBuffer 在一开始就会创建所有的 Event 对象。\n\n所以生产者的流程简单来说就是如下流程：\n\n1. 获取可用的序号，并获取序号对应的 Event（该序号表示的 Event 可以使用\n2. 重新赋值 Event（不需要重新创建对象\n3. 更新生产者序号\n\n<br>\n\n然后在看一下这些流程在 Disruptor 的实现。\n\n<br>\n\n生产的形式可以分为以下几种（Disruptor 的方法声明：\n\n![Disruptor_publishEvent.png](https://chenqwwq.oss-cn-hangzhou.aliyuncs.com/note/Disruptor_publishEvent.png)\n\nEventTranslator 就是对应的事件赋值接口，相关定义如下：\n\n![EventTranslator](https://chenqwwq.oss-cn-hangzhou.aliyuncs.com/note/EventTranslator.png)\n\n接口参数【event】表示当前需要赋值的事件对象，而【sequence】表示事件对应的序号。\n\n方法接收一个 EventTranslator 的 Lambda 实现，**对于获取的事件会通过【translateTo】方法重新赋值并且重新发布**。\n\n最终都是调用 RingBuffer 的对应方法，以第一个 EventTranslator 为例，其方法实现如下：\n\n![RingBuffer#publishEvent](https://chenqwwq.oss-cn-hangzhou.aliyuncs.com/note/RingBuffer_publishEvent.png)\n\n具体的使用场景（RingBuffer 的具体发布流程）如下：\n\n```java\n// RingBuffer#publishEvent\npublic void publishEvent(EventTranslator<E> translator){\n  // 获取下次发布的事件序号\n  // 这里的 Sequence 是 RingBuffer 的，已经将所有的消费者添加为 gateSequences\n  final long sequence = sequencer.next();\n  // 转换并发布事件\n  translateAndPublish(translator, sequence);\n}\n\nprivate void translateAndPublish(EventTranslator<E> translator, long sequence){\n  try{\n    // get 方法就是获取 RingBuffer 中对应位置的事件对象\n    // 使用传入的 lambda，修改了对应对象的属性（其实怎么改都随你,不改都行\n    translator.translateTo(get(sequence), sequence);\n  }finally{\n    // 对序号进行一个发布\n    sequencer.publish(sequence);\n  }\n}\n```\n\n根据最开始生产者类型的区别，sequencer 会有不同的实现（这里又是一种策略模式的表现。\n\n单生产者并不需要并发控制，而多生产者需要在并发的情况下保证生产者的 Sequnce 正确，并且如果出现消费不及时的情况，生产者还需要等待。\n\n（等待的逻辑也保存在 【sequencer.next()】中。\n\n\n\n#### SingleProducerSequencer\n\n对于单生产者模式对应的类型为【SingleProducerSequencer】，不需要对生产的序号作并发控制，但是需要与消费者的序号协调：**生产者的序号不能超过消费者的序号。**\n\n> 因为是环形队列，所以生产的速度不能赶上消费者的速度（覆盖了未消费的事件。\n>\n> 在序号中的表示就是：生产者的序号不能超过消费者的最低序号。\n\n\n\n以下是单生产者的下个可用序号获取流程：（感觉整个脑回路有点怪\n\n```java\npublic long next(int n){\n  // 获取的序号必须大于1（n表示希望获取几个序号\n  if (n < 1){\n    throw new IllegalArgumentException(\"n must be > 0\");\n  }\n  // 下一个值（初始为-1\n  long nextValue = this.nextValue;\n  // 加上希望获取的个数（此时相加可能会超过环形数组大小\n  long nextSequence = nextValue + n;\n  // 减去环形数组大小（如果下标越界，此时就回到环形队列头部\n  long wrapPoint = nextSequence - bufferSize;\n\t// 缓存的最小依赖值（初始为-1\n  // 这里是会缓存最小值的（cachedValue 表示的就是所有 gatingSequences 的最小值\n  long cachedGatingSequence = this.cachedValue;\n\t// 分情况判断是否出现消费不及时的情况 \n  // 情况1是表示生产序号越界之后又超出了消费序号\n  // 情况2是表示生产序号已经越界之后消费序号没有跟上的情况\n  if (wrapPoint > cachedGatingSequence || cachedGatingSequence > nextValue){\n    // cursor 又是啥东西？？？\n    cursor.setVolatile(nextValue);  // StoreLoad fence\n    // 这里应该是循环等消费进度,等待消费进度赶上生产速度\n    long minSequence;\n    while (wrapPoint > (minSequence = Util.getMinimumSequence(gatingSequences, nextValue))){\n      LockSupport.parkNanos(1L); // TODO: Use waitStrategy to spin?\n    }\n    this.cachedValue = minSequence;\n  }\n  this.nextValue = nextSequence;\n  return nextSequence;\n}\n```\n\n\n\ngatingSequences 就是各个消费者的序号，在注册消费者的时候添加（通过 AtomicReferenceFieldUpdater 添加的。\n\n（我一直以为是没有更新的空数组，日。 \n\n#### MultiProducerSequencer\n\n```java\n@Override\npublic long next(int n){\n  if (n < 1){\n    throw new IllegalArgumentException(\"n must be > 0\");\n  }\n\n  long current;\n  long next;\n\n  do{\n    current = cursor.get();\n    next = current + n;\n\n    long wrapPoint = next - bufferSize;\n    long cachedGatingSequence = gatingSequenceCache.get();\n\n    if (wrapPoint > cachedGatingSequence || cachedGatingSequence > current){\n      long gatingSequence = Util.getMinimumSequence(gatingSequences, current);\n\n      if (wrapPoint > gatingSequence) {\n        LockSupport.parkNanos(1); // TODO, should we spin based on the wait strategy?\n        continue;\n      }\n\t\t  gatingSequenceCache.set(gatingSequence);\n    } else if (cursor.compareAndSet(current, next)){\n      break;\n    }\n  }while (true);\n  return next;\n}\n```\n\n\n\n## 相关实现\n\n\n\n### Disruptor 中对象间引用关系\n\n### Disruptor 如何实现依赖关系\n\nDisruptor 中的依赖关系根据角色划分可以简单理解为以下几种：\n\n1. 生产者对于消费者的依赖（生产者不能覆盖掉未被消费的事件\n2. 消费者对于生产者的依赖（消费者不能消费旧事件\n3. 下层消费者对于上层消费者的依赖（下层消费者只能消费上层消费过的事件\n\n\n\n\n\n\n\n## 总结\n\n> Disruptor 实现高性能的基础。\n\n1. RingBuffer 对于对象的复用\n\nRingBuffer 就是 Disruptor 实现的对象池。\n\n复用的对象数组可以降低了 GC 频率，提高 CPU 的利用率，相对于 ArrayBlockedQueue 来说，RingBuffer 创建的事件对象数目是固定的。\n\n2. 避免了伪共享（缓存行\n\n（伪共享的影响可以参考 Java 中横向和纵向访问二维数组的时间消耗，存在几倍的延迟。\n\nSequence 中通过填充 long 对象的形式来避免伪共享。\n\n3. 无锁化实现\n\n在 RingBuffer 生产者的实现中，区分了单生产者和多生产者，多生产者以及消费者层面都是通过 CAS 来保证并发安全。\n","source":"_posts/Disruptor.md","raw":"---\ntitle: Disruptor（高性能内存队列\ndate: 2023-07-17 23:52:17\nindex_img: https://chenqwwq.oss-cn-hangzhou.aliyuncs.com/note/Disruptor%E7%9A%84%E5%89%AF%E6%9C%AC.png\nbanner_img: https://chenqwwq.oss-cn-hangzhou.aliyuncs.com/note/Disruptor%E7%9A%84%E5%89%AF%E6%9C%AC.png\ntags:\n- Disruptor\nmermaid: true\ncategories:\n- mq\n---\n\n\n\n# Disruptor 框架\n\n> 以下源码基于 3.4.4 版本，未完待续。\n\n![Disruptor](https://chenqwwq.oss-cn-hangzhou.aliyuncs.com/note/Disruptor%E7%9A%84%E5%89%AF%E6%9C%AC.png)\n\n---\n\n## 概述\n\n以下是 Disruptor 官网的介绍图：\n\n![models](https://chenqwwq.oss-cn-hangzhou.aliyuncs.com/note/models.png)\n\n\n\nDisruptor 是 LMAX 基于 Java 语言实现的**高性能队列**，相比于 Java 的 BlockedQueue，它有以下几个特点：\n\n1. 无锁化（后续讲到的等待策略，所选择上所等待\n2. 内存的预分配（队列会实现创建指定数量的对象\n3. 事件广播（通过 Disruptor 发布的事件会被各个消费者分别消费\n\n<br>\n\nDisruptor 对生产者/消费者的各个模块都进行了抽象（上图中也标注了各个角色），各个角色的作用如下：\n\n**RingBuffer** 是最重要的中间队列，保存事件对象，也协调生产者和消费者之间的依赖关系。\n\nProducer 是生产者，任何持有 RingBuffer 的对象都可以作为生产者。\n\nConsumer 是消费者，消费者需要实现 EventHandler，并且需要向 Disruptor 注册信息。\n\n**Sequence** 表示的是生产/消费的序号（或者说偏移量？）可以类比于 AtomicLong，但是 Sequence 通过内存填充避免了伪共享\n\n> 生产者的 Sequence 由 RingBuffer 统一管理，消费者的 Sequence 则由各个消费者各自管理。\n>\n> 因此各个消费者会分别消费事件，不会互相影响，类似 Kafka 的消费者组，所以消息会被每个消费者都处理一次。\n\n> 某些层面上 Disruptor 和 Guava 的 EventBus 有点像（后续可以对比一下两者的实现。\n>\n> EventBus 是监听器模型，而 Disruptor 则是生产者/消费者模型，相对来说 Disruptor 的实现更加复杂也更加灵活高效。\n\n\n\n## 源码分析\n\n### Disruptor\n\nDisruptor 是整个框架的核心，**负责协调生产者和队列、队列和消费者之间的关系，并对外提供基础 API。**\n\nDisruptor 主要持有 RingBuffer 的对象引用，以及所有的消费者信息（生产者的信息并不需要保存，谁持有该对象都可以成为生产者。\n\n![Disruptor类属性](https://chenqwwq.oss-cn-hangzhou.aliyuncs.com/note/Disruptor%E7%B1%BB%E5%B1%9E%E6%80%A7.png)\n\n\n\n#### 创建流程\n\n（先通过创建过程来了解 Disruptor 整个对象的构造。\n\nDisruptor 的创建方法如下：\n\n```java\npublic Disruptor(\n  final EventFactory<T> eventFactory,\n  final int ringBufferSize,\n  final ThreadFactory threadFactory,\n  final ProducerType producerType,\n  final WaitStrategy waitStrategy)\n{\n  this(\n    RingBuffer.create(producerType, eventFactory, ringBufferSize, waitStrategy),\n    new BasicExecutor(threadFactory));\n}\n\n/**\n     * Private constructor helper\n     */\nprivate Disruptor(final RingBuffer<T> ringBuffer, final Executor executor)\n{\n  this.ringBuffer = ringBuffer;\n  this.executor = executor;\n}\n```\n\n**Disruptor 的创建流程主要就是创建了对应的 RingBuffer 对象，并且指定消费者所用的线程工厂。**\n\n> 消费者的线程模型非常重要，这是非常容易出问题的一个点，并且在源码中也建议不要使用线程池实现。\n\n<br>\n\n整体的参数含义如下：\n\n| 参数名称       | 含义                                                         |\n| -------------- | ------------------------------------------------------------ |\n| eventFactory   | 事件工厂（RingBuffer 会调用该接口方法，创建 RingBufferSize 个对象重复使用 |\n| ringBufferSize | RingBuffer 的大小，必须为2次幂                               |\n| threadFactory  | 线程工厂（用于创建消费者所需要的线程，也可以指定线程池       |\n| producerType   | 生产者类型（根据单生产者还是多生产者会使用不同的并发策略     |\n| waitStrategy   | 等待策略（生产者的等待策略，而消费者的等待策略在指定消费者的时候决定 |\n\n（以上参数基本就是 Disruptor 的所有控制参数了，接下来在看 RingBuffer 的创建流程。\n\n<br>\n\n<br>\n\n####  RingBuffer 创建流程\n\n以下是 3.4.4 版本中 RingBuffer 的定义注释以及继承图：\n\n![RingBuffer 注释](https://chenqwwq.oss-cn-hangzhou.aliyuncs.com/note/RingBuffer%E6%B3%A8%E9%87%8A.png)\n\n（基于环形数组实现的可重复使用实例对象的存储组件，保存的数据的在生产者和消费者之间交换。\n\n\n\n<br>\n\n![RingBuffer 类图](https://chenqwwq.oss-cn-hangzhou.aliyuncs.com/note/RingBuffer%E7%B1%BB%E5%9B%BE.png)\n\n\n\nRingBufferFields 、RingBufferPad 是 RingBuffer 做数据填充，避免缓存行的伪共享的实现。\n\n> 伪共享是指相关性较差的数据使用同一缓存行保存，而各自的修改会导致缓存行更频繁的失效，从何导致的性能降低。\n>\n> Disruptor 的处理方法很优雅，直接扩充当前重点数据大小到大于等于缓存行大小为止。\n\n\n\nEventSink 和 DataProvider 是 RingBuffer 的两个角色，对于生产者来说是事件的接受者，对于消费者来说又是数据的提供者。\n\nSequenced 等接口表示这 RingBuffer 对 Sequence 的操作角色。\n\n<br>\n\nRingBuffer 对外提供的创建方法如下：\n\n```java\npublic static <E> RingBuffer<E> create(\n  ProducerType producerType,\t// 生产者类型\n  EventFactory<E> factory,\t\t// 事件工厂\n  int bufferSize,\t\t\t\t\t\t\t// Buffer 的大小\n  WaitStrategy waitStrategy)\t// 生产者的等待策略\n{\n  // 根据生产类型调用不同的创建方法\n  // （其实最终创建的都是 RingBuffer，但是创建的生产者 Sequencer 不同\n  switch (producerType)\n  {\n    case SINGLE:\n      // 对应创建的是 SingleProducerSequencer\n      return createSingleProducer(factory, bufferSize, waitStrategy);\n    case MULTI:\n      // 对应创建的是 MultiProducerSequencer\n      return createMultiProducer(factory, bufferSize, waitStrategy);\n    default:\n      throw new IllegalStateException(producerType.toString());\n  }\n}\n```\n\nRingBuffer **的大小是固定的**，并且创建的时候就需要传入 EventFactory，Buffer 中所有的事件对象都是通过该工厂创建的。\n\n（因为大小是固定的，所以 RingBuffer 更可以类比 ArrayBlockedQueue 实现的生消模型。\n\n<br>\n\n另外为了更好地做并发控制， **RingBuffer 也区分了生产者类型**，以 SINGLE 生产者类型为例：\n\n```java\npublic static <E> RingBuffer<E> createMultiProducer(EventFactory<E> factory, int bufferSize){\n  // 默认等待策略为阻塞等待 BlockingWaitStrategy\n  return createMultiProducer(factory, bufferSize, new BlockingWaitStrategy());\n}\n\npublic static <E> RingBuffer<E> createSingleProducer( EventFactory<E> factory,int bufferSize, WaitStrategy waitStrategy){\n  // 对应 SingleProducerSequencer\n  SingleProducerSequencer sequencer = new SingleProducerSequencer(bufferSize, waitStrategy);\n  return new RingBuffer<E>(factory, sequencer);\n}\n```\n\nSINGLE 对应的 Sequencer 类型为 SingleProducerSequencer，而 MULTI 对应的则是 MultiProducerSequencer。\n\n（两种 Sequencer 的并发控制是完全不一样的，毕竟单一生产者咩有并发\n\n<br>\n\n最后就是 RingBuffer 的构造函数的调用:\n\n```java\nRingBufferFields(EventFactory<E> eventFactory,Sequencer sequencer){\n  this.sequencer = sequencer;\n  this.bufferSize = sequencer.getBufferSize();\n  // 参数检查\n  // 大小不能小于1\n  if (bufferSize < 1){\n    throw new IllegalArgumentException(\"bufferSize must not be less than 1\");\n  }\n  // 大小必须要2次幂\n  if (Integer.bitCount(bufferSize) != 1){\n    throw new IllegalArgumentException(\"bufferSize must be a power of 2\");\n  }\n  // indexMask 用于 & 求对应下标\n  this.indexMask = bufferSize - 1;\n  // 创建对应数组（数组需要加上对齐填充\n  this.entries = new Object[sequencer.getBufferSize() + 2 * BUFFER_PAD];\n  // 使用工厂方法填充数组\n  fill(eventFactory);\n}\n\nprivate void fill(EventFactory<E> eventFactory){\n  // 只填充有效个数\n  for (int i = 0; i < bufferSize; i++){\n    entries[BUFFER_PAD + i] = eventFactory.newInstance();\n  }\n}\n```\n\n\n\nRingBuffer 在**创建的过程中间就会调用 EventFactory#newInstance 方法创建所需要的所有对象，为了后续的重复使用。**\n\nRingBuffer 的大小必须为2次幂，为了使用 k & (n-1) 求对应数组下标。\n\nRingBuffer 中为了避免伪共享，做了很多的填充，例如整个的数组会多创建一些填充对象。\n\n总结来说，**RingBuffer 的创建流程主要完成以下几件事情：**\n\n1. **创建环形数组并且创建所有 Event 对象**\n2. **根据生产者类型创建对应的 Sequencer**\n\n\n\n<br>\n\n### 消费者\n\nDisruptor 在启动前就需要指定消费者，同时也可以指定各消费者之间的依赖关系（也就是层级消费。\n\n**消费者的依赖关系也就是层级消费，以 EventHandlerGroup 作为基本单位进行依赖关系的编排**，GroupA 可以根据 GroupB 的消费进度进行事件消费。\n\n> 即使在 EventHandlerGroup 中的 EventHandler 对象也不会共享一个 Sequence，会各自消费完整的事件列表。\n\n<br>\n\n#### 注册和启动流程\n\nDisruptor 中的消费者需要提前注册（上文中提到的 Disruptor 会保存所有的消费者信息），然后随着框架的启动而开始执行。\n\n<br>\n\nDisruptor 提供了多种方式来进行注册：（消费者是向 Disruptor 对象注册的\n\n1. EventHandler（最终会被包装为 EventProcessor 进行注册，当前 Disruptor 所持有的 RingBuffer 会作为 DataProvider 传入。\n2. EventProcessorFactory（会使用工厂类直接创建 EventProcessor 进行消费者的注册\n3. EventProcessor（继承了 Runnable，在启动时执行\n4. WorkHandler\n\n<br>\n\n以下是通过 EventHandler 创建消费者的过程：\n\n（源码中主要需要注意 Disruptor 对于 Sequence 的处理，因为期间需要相互依赖。\n\n```java\n// Disruptor#handleEventsWith\npublic final EventHandlerGroup<T> handleEventsWith(final EventHandler<? super T>... handlers){\n  // 直接创建 EventProcessor\n  // 初始化一个空的 Sequence 表示当前的消费者无依赖关系（除了生产者依赖\n  return createEventProcessors(new Sequence[0], handlers);\n}\n\n// Disruptor#createEventProcessors\n// 创建消费者实例\n// 参数包含 barrierSequence，是他依赖的上层消费者，当前消费者只能消费上层已经全部消费过的数据\n// 例如，当前依赖的三个上层消费者的 offset [1,10,10]，那么此时只能消费 1 的数据\nEventHandlerGroup<T> createEventProcessors(final Sequence[] barrierSequences,final EventHandler<? super T>[] eventHandlers){\n  // 只能在未开始的时候添加消费者\n  checkNotStarted();\n  // 注册的消费者的 Sequence\n  final Sequence[] processorSequences = new Sequence[eventHandlers.length];\n  // 创建 Barrier（是当前消费者依赖的 Barrier，由 RingBuffer 创建\n  // ！！！消费者对于生产者的依赖是此时创建的，在后续创建 BatchEventProcessor 的时候添加进消费者\n  // 此时创建的对象是 ProcessingSequenceBarrier，包含了依赖的 Sequence 和 RingBuffer 的 Sequence\n  final SequenceBarrier barrier = ringBuffer.newBarrier(barrierSequences);\n\t// 遍历创建 BatchEventProcessor\n  for (int i = 0, eventHandlersLength = eventHandlers.length; i < eventHandlersLength; i++){\n    final EventHandler<? super T> eventHandler = eventHandlers[i];\n    // ！！important  创建的最终消费实例是 BatchEventProcessor 添加了依赖的 barrier\n    final BatchEventProcessor<T> batchEventProcessor = new BatchEventProcessor<>(ringBuffer, barrier, eventHandler);\n    // 异常处理，这个是 Disruptor 确定的\n    if (exceptionHandler != null){\n      batchEventProcessor.setExceptionHandler(exceptionHandler);\n    }\n    // 消费者注册中心（会保存几类常用的映射\n    consumerRepository.add(batchEventProcessor, eventHandler, barrier);\n    // 消费者的 Processor\n    processorSequences[i] = batchEventProcessor.getSequence();\n  }\n  // 更新 Disruptor 的 GatingSequences\n  // barrierSequences 是指定当前消费者的依赖对象\n  updateGatingSequencesForNextInChain(barrierSequences, processorSequences);\n  // 返回一个 EventhandlerGroup，调用当前方法的所有 EventHandler 会被包含在一个 Group 里面\n  // 通过 EvntHandlerGroup 可以进一步编排后续处理逻辑\n  return new EventHandlerGroup<>(this, consumerRepository, processorSequences);\n}\n\n// Disruptor#updateGatingSequencesForNextInChain\n// 更新 GatingSequences\nprivate void updateGatingSequencesForNextInChain(final Sequence[] barrierSequences, final Sequence[] processorSequences){\n  if (processorSequences.length > 0){\n    // 将消费者的 Sequences 添加到 ringBuffer\n    ringBuffer.addGatingSequences(processorSequences);\n    // 因为当前消费者消费的都是 barrierSequences 中消费过的数据，所以当前消费者肯定是最低的 offset\n    // 因此依赖的 barrier 就没必要保存了\n    for (final Sequence barrierSequence : barrierSequences){\n      ringBuffer.removeGatingSequence(barrierSequence);\n    }\n    // barrierSequences 代表的的是当前消费者集的依赖，需要取消 endOfChain 的标记,因为他的下层还有当前的消费者\n    consumerRepository.unMarkEventProcessorsAsEndOfChain(barrierSequences);\n  }\n}\n```\n\n\n\n注册消费主要流程如下：\n\n1. 检查 Disruptor 是否已经开启\n2. 创建对应的 EventProcessor （具体对象为 BatchEventProcessor，包含了ExceptionHandler 和 RingBuffer。\n3. 向 ConsumerRepository 注册当前的消费者信息（消费者并未启动，所以此时需要集中管理\n4. 处理 Sequence（非常重要，依赖关系都靠这个协调\n   - 向 RingBuffer 添加当前的消费者的 Sequence（**保证生产者的 Sequence 不超过消费者**\n   - 移除 RingBuffer 中当前消费者依赖的 Sequence（当前消费者的序号肯定小于依赖，所以只需要关注当前消费者的序号就好\n   - 处理具有依赖关系的消费者之间的 Sequence（**当前消费者不能超过依赖目标的序号。**\n5. 返回 EventHandlerGroup（EventHandlerGroup 对象包含 after 等方法可以作为顺序处理逻辑的编排方法\n\n\n\n消费者最终的实例对象为 BatchEventProcessor（后续的消费逻辑，通过 RingBuffer 获取事件以及调用对应处理方法的逻辑都在该类中实现，EventProcessor 继承了 Runnable 所以可以直接执行。\n\n> 需要注意的是，Disruptor 不允许在运行过程中添加消费者，所以在  `Disruptor#start()` 前就需要注册全部的消费者。\n\n<br>\n\n#### 启动流程\n\n启动流程对应的是 `Disruptor#start` 方法，在启动之前所有的消费者都以 EventProcessor 的形式保存在 ConsumerRepository 中。\n\n方法的源码如下：\n\n```java\npublic RingBuffer<T> start(){\n  // 只能启动一次\n  checkOnlyStartedOnce();\n  // 遍历所有注册的消费者并启动\n  for (final ConsumerInfo consumerInfo : consumerRepository){\n    consumerInfo.start(executor);\n  }\n\t// 返回 RingBuffer\n  return ringBuffer;\n}\n```\n\nEventProcessor 继承了 Runnable 方法可以直接使用 Executor 启动该类，在 Disruotor 创建的时候传入的 ThreadFactory 参数会被包装为 Executor，此时就用到了。\n\n\n\n#### 消费流程\n\n启动过程中 EvnetProcessor 就作为 Runnable 被放入线程池执行，所以消费的主题流程也实现在继承的 run() 方法中。\n\n（以下的实现 BatchEventProcessor 为主，WorkProcessor 还没看呢\n\n<br>\n\n以下是 BatchEventProcessor 的处理逻辑：\n\n```java\n@Override\npublic void run(){\n\t// 更新当前的状态，启动处理器\n  // 状态是从 IDLE 到 RUNNING\n  if (running.compareAndSet(IDLE, RUNNING)){\n    // 清除警告\n    sequenceBarrier.clearAlert();\n    // 如果继承了 LifecycleAware，则执行 onStart 方法\n    // onStart 方法是每次从 IDLE 转变到 RUNNING 状态的时候都会执行的，而不是创建的时候一次\n    notifyStart();\n    try{\n      // 在判断一次是否启动成功\n      if (running.get() == RUNNING){\n        // 实际的处理逻辑\n        processEvents();\n      }\n    }finally{\n      // 如果继承了 LifecycleAware，则执行 onShutdown 方法\n      notifyShutdown();\n      // 正常退出,标记处理器为空闲状态\n      running.set(IDLE);\n    }\n  }else{\n\t\t// 可能是已经启动（那本次就是重复启动\n    if (running.get() == RUNNING){\n      throw new IllegalStateException(\"Thread is already running\");\n    }else{\n\t\t\t// 未启动成功并且当前状态部位 RUNNING\n      // 可能是当前处于 HALTED 状态\n      // 该方法就是执行一遍 onStart 和 onShutdown\n      earlyExit();\n    }\n  }\n}\n```\n\n\n\n在消费者启动和关闭的时候都有对应的回调方法（notifyStart / notifyStart），对应的就是  **LifecycleAware** 接口：\n\n![image-20230619上午122557863](assets/image-20230619上午122557863.png)\n\n> EventHandler 可以通过继承该接口实现前后的回调，在整个生命周期各执行一次。\n\n消费的正常逻辑就是以下几步：\n\n1. CAS 修改状态（IDLE -> RUNNING\n2. 前置回调（LifecycleAware#onStart\n3. 事件处理（processEvents\n4. 后置回调（LifecycleAware#onShutdown\n5. 状态修改 （任何状态 -> IDLE\n\n\n\n#### 事件轮询和阻塞逻辑\n\n以下是 processEvents 的处理逻辑：\n\n```java\nprivate void processEvents(){\n  T event = null;\n  long nextSequence = sequence.get() + 1L;\n  // 死循环了,没有break别想走\n  while (true){\n    try{\n      // 等待下一个可用序号（waitFor 里面就包含了消费者和生产者之间通过序号协调的逻辑\n      // 返回最大可用序号\n      final long availableSequence = sequenceBarrier.waitFor(nextSequence);\n      // 在事件的批量处理之前,会有一个前置方法\n      if (batchStartAware != null){\n        // 当前批次的大小\n        batchStartAware.onBatchStart(availableSequence - nextSequence + 1);\n      }\n      // 循环遍历所有可用序号\n      while (nextSequence <= availableSequence){\n        // 获取对应序号下的事件\n        event = dataProvider.get(nextSequence);\n        // 调用实际方法处理获取的事件\n        eventHandler.onEvent(event, nextSequence, nextSequence == availableSequence);\n        nextSequence++;\n      }\n      sequence.set(availableSequence);\n    }catch (final TimeoutException e){\n      // 处理超时异常\n      notifyTimeout(sequence.get());\n    }catch (final AlertException ex){\n      // AlertException 应该是状态变更的时候爆的\n      // 如果不是运行中状态就退出\n      if (running.get() != RUNNING){\n        break;\n      }\n    }catch (final Throwable ex){\n      // 处理异常\n      handleEventException(ex, nextSequence, event);\n      // 记录处理的序号（nextSequence 就是处理失败的序号\n      sequence.set(nextSequence);\n      // 接下来的序号（直接忽略了出现异常的这次事件处理\n      nextSequence++;\n    }\n  }\n}\n```\n\n\n\n事件的轮训通过一个死循环包括，**不是 AlertEcveption 就无法退出**。\n\n> 一个消费者是一个无限执行的任务，所以最好不要用线程池去执行消费的 Runnable，或者说线程数和消费者数量最好是 1:1\n\nBatchEventProcessor 并不会直接访问 RingBuffer 获取可用事件，而是通过 SequenceBarrier 实现（此前是通过 RingBuffer#newBarrier 创建的。\n\n> 消费者通过 SequenceBarrier 来实现对生产者和上层消费者的依赖。\n\n在获取到可用序号后，会先执行批量处理的前置回调 BatchStartAware#onBatchStart。\n\n> BatchStartAware 也是通过 EventHandler 实现的。\n>\n> （Disruptor 这个实现我喜欢，**所有的 Aware 都需要富集到 EventHandler 中统一注册。**\n\n完成回调之后，遍历可用序号逐个从 RingBuffer 中获取事件（DataProvider 就是 RingBuffer。\n\n然后调用 EventHandler#onEvent 完成实际的事件处理。\n\n<br>\n\n对于执行过程中的 TimeoutException（等待的超时，处理过程中的超时），都会触发 TimeoutHandler#onTimeout。\n\n对于 AlterException 则会判断状态，在非运行中状态时跳出循环。\n\n对于其他未知异常则会调用 ExceptionHandler#handleEventException 方法处理。\n\n\n\n##### 阻塞逻辑\n\n> 在消费速度大于生产速度的时候，就需要消费者阻塞等待生产。\n\n消费者并不会直接访问 RingBuffer，而是通过 SequenceBarrier，以下是对应的 waitFor 方法：\n\n```java\n// sequence 表示的是需要等待的序号\n@Override\npublic long waitFor(final long sequence)\n  throws AlertException, InterruptedException, TimeoutException{\n  // 检查是否有告警信息\n  checkAlert();\n  // cursorSequence 表示的是生产者当前的序号\n  // dependentSequence 是上层消费者的序号\n  // this 就是当前的消费者\n  long availableSequence = waitStrategy.waitFor(sequence, cursorSequence, dependentSequence, this);\n  // 如果获取的消费者小雨 sequence，表示咩没有货渠到可用的事件\n  // 直接返回最大可用事件\n  if (availableSequence < sequence){\n    return availableSequence;\n  }\n  // 存在可用的事件，获取最大的可用序号\n  return sequencer.getHighestPublishedSequence(sequence, availableSequence);\n}\n```\n\n而 SequenceBarrier 也是通过 WaitStrategy 抽象出等待逻辑，在 Disruptor 官方实现中提供了以下几种：\n\n| 实现类                          | 作用                                                    |\n| ------------------------------- | ------------------------------------------------------- |\n| BlockingWaitStrategy            | 使用 ReentrantLock$Condition#await 实现的阻塞等待       |\n| BusySpinWaitStrategy            | 调用 Thread#onSpinWait 实现等待（可能没有，那就是空轮训 |\n| LiteBlockingWaitStrategy        |                                                         |\n| LiteTimeoutBlockingWaitStrategy |                                                         |\n| PhasedBackoffWaitStrategy       |                                                         |\n| SleepingWaitStrategy            |                                                         |\n| TimeoutBlockingWaitStrategy     |                                                         |\n| YieldingWaitStrategy            |                                                         |\n\n\n\n以 BlockingWaitStrategy 为例子：\n\n```java\n// cursorSequence 表示的是生产者当前的序号\n// dependentSequence 是上层消费者的序号\n@Override\npublic long waitFor(long sequence, Sequence cursorSequence, Sequence dependentSequence, SequenceBarrier barrier)\n  throws AlertException, InterruptedException {\n  long availableSequence;\n  // 如果当前序号小于需要的序号则直接使用 lock 上锁，并使用 condition 挂起当前线程\n  if (cursorSequence.get() < sequence){\n    lock.lock();\n    try{\n      while (cursorSequence.get() < sequence){\n        barrier.checkAlert();\n        // condition 直接挂起\n        processorNotifyCondition.await();\n      }\n    }finally{\n      lock.unlock();\n    }\n  }\n  while ((availableSequence = dependentSequence.get()) < sequence){\n    barrier.checkAlert();\n    // 调用的 Thread#onSpinWait\n    // 类似于 Thread#sleep(0)，但是性能相对好一点\n    ThreadHints.onSpinWait();\n  }\n  return availableSequence;\n}\n```\n\n\n\n**消费者对于生产者的依赖是直接使用 ReentreLock 上锁，并使用 Condition 阻塞的，但是对于上层消费者，只有使用空轮询等待**\n\n如果上层消费者有多个，dependentSequence 就是被包装的 FixedSequenceGroup，获取对应的序号就是获取一组 Sequence 中最小的序号。\n\n\n\n参考了其他的实现，对于上层消费者的等待实现基本都是空轮询，所以对于同类消费者分层的时候需要保证消费的高效，如果上层消费者阻塞会直接拉爆下层消费者所在工作线程。\n\n\n\n#### 层级消费的实现\n\n上面消费的流程已经说明了大部分的实现了，下层的消费者必须要持有上层消费者的 Sequence。\n\n\n\n\n\n#### 总结\n\n##### 状态流转\n\n```mermaid\nstateDiagram-v2\n\t\tstate \"IDLE(空闲)\" as I\n\t\tstate \"HALTED(停止)\" as H\n\t\tstate \"RUNNING(运行中)\" as R\n\t\t\n\t\t[*] --> I\n\t\tI --> R: Disruptor#start（EventProcessor 被送入 Executor 执行\n\t\tR --> H: Disruptor#halt（修改状态并设置告警\n\t\tR --> H: Disruptor#shutdown（等待所有事件都被消费完,再调用 halt\n\t\tH --> I: 感知到告警（checkAlert,跳出循环后修改\n  \n```\n\n\n\nDisruptor#halt 方法除了修改当前 **EventProcessor** 的状态，还会在依赖的 **SequenceBarrier** 中记录一个告警状态，并且唤醒所有等待中消费者。\n\n重新执行的过程中感知到告警状态就会抛出 AlertException，从而跳出整个 BatchEventProcessor#processEvents 的处理循环，而后在外层 BatchEventProcessor#run 中修改为 IDLE 状态。\n\n\n\n整体流程如下：\n\n```mermaid\ngraph TD\n\t  A(\"Runnable#run(整个流程的起点\") --> B[/\"更新当前状态(IDEL -> RUNNING\"/]\n  \tB --更新成功--> C[\"清空告警(clearAlert\"]\n  \tC --> D[\"执行 LifecycleAware#onStart\"]\n  \tD --> E[/\"判断当前状态(RUNNING\"/]\n  \tE --> F\n    subgraph 事件处理\n    F[\"获取可用序号(sequenceBarrier#waitFor\"]\n    F --有可用事件,返回可用的最大序号--> G[\"执行 batchStartAware#onBatchStart\"]\n    G --> H[\"获取 nextSequence 对应事件\"]\n    H --> I[\"处理事件（处理完 nextSequence++\"]\n    I --> H\n    I --> J[\"设置当前消费序号(nextSequence\"]\n    J --> F\n    F --状态改变,抛出 AlertExceotion--> K[\"break(跳出循环\"]\n    \n    F --等待超时--> M[\"执行 TimeoutHandler#onTimeout\"]\n    M --> F\n    end\n    K --> L[\"执行 LifecycleAware#onShutdown\"]\n    L --> N(\"更新状态到 IDEL（可以重新启动\")\n```\n\n（在 Disruptor#shutdown 之后，是可以重新直接 Disruptor#start 的，生产者/消费者的序号没有清空。\n\n##### 消费者的线程模型\n\n\n\nDisruptor 的构造函数中已经表明，作者不建议使用 Executor 来执行消费者的任务。\n\n因为从上文可知，消费者的线程需要循环去获取事件，Runnable 主流程在 Disruptor 关闭前就不会退出，也就是说他会独占一个线程。\n\n另外在生产者端，发布事件的时候，生产速度是受限于所有消费者组中的最慢消费速度的。\n\n因此在使用 Disruptor 的实现，都需要尽可能使用单个线程处理消费者逻辑。\n\n\n\n例如在一个【用户注册】的场景，需要在注册后进行【发送欢迎短信】、【赠送注册积分】等逻辑，就可以由单个线程去接收用户注册事件，然后外接线程池去完成对应业务。\n\n\n\n### 生产者\n\n生产者不在 Disruptor 的控制范围之内，任何持有 Disruptor 对象的都可以作为生产者，调用 Disruptor#pushlishEvent 发布事件。\n\n上文提到过，Disruptor 使用的环形队列保存待消费的事务，并且 RingBuffer 在一开始就会创建所有的 Event 对象。\n\n所以生产者的流程简单来说就是如下流程：\n\n1. 获取可用的序号，并获取序号对应的 Event（该序号表示的 Event 可以使用\n2. 重新赋值 Event（不需要重新创建对象\n3. 更新生产者序号\n\n<br>\n\n然后在看一下这些流程在 Disruptor 的实现。\n\n<br>\n\n生产的形式可以分为以下几种（Disruptor 的方法声明：\n\n![Disruptor_publishEvent.png](https://chenqwwq.oss-cn-hangzhou.aliyuncs.com/note/Disruptor_publishEvent.png)\n\nEventTranslator 就是对应的事件赋值接口，相关定义如下：\n\n![EventTranslator](https://chenqwwq.oss-cn-hangzhou.aliyuncs.com/note/EventTranslator.png)\n\n接口参数【event】表示当前需要赋值的事件对象，而【sequence】表示事件对应的序号。\n\n方法接收一个 EventTranslator 的 Lambda 实现，**对于获取的事件会通过【translateTo】方法重新赋值并且重新发布**。\n\n最终都是调用 RingBuffer 的对应方法，以第一个 EventTranslator 为例，其方法实现如下：\n\n![RingBuffer#publishEvent](https://chenqwwq.oss-cn-hangzhou.aliyuncs.com/note/RingBuffer_publishEvent.png)\n\n具体的使用场景（RingBuffer 的具体发布流程）如下：\n\n```java\n// RingBuffer#publishEvent\npublic void publishEvent(EventTranslator<E> translator){\n  // 获取下次发布的事件序号\n  // 这里的 Sequence 是 RingBuffer 的，已经将所有的消费者添加为 gateSequences\n  final long sequence = sequencer.next();\n  // 转换并发布事件\n  translateAndPublish(translator, sequence);\n}\n\nprivate void translateAndPublish(EventTranslator<E> translator, long sequence){\n  try{\n    // get 方法就是获取 RingBuffer 中对应位置的事件对象\n    // 使用传入的 lambda，修改了对应对象的属性（其实怎么改都随你,不改都行\n    translator.translateTo(get(sequence), sequence);\n  }finally{\n    // 对序号进行一个发布\n    sequencer.publish(sequence);\n  }\n}\n```\n\n根据最开始生产者类型的区别，sequencer 会有不同的实现（这里又是一种策略模式的表现。\n\n单生产者并不需要并发控制，而多生产者需要在并发的情况下保证生产者的 Sequnce 正确，并且如果出现消费不及时的情况，生产者还需要等待。\n\n（等待的逻辑也保存在 【sequencer.next()】中。\n\n\n\n#### SingleProducerSequencer\n\n对于单生产者模式对应的类型为【SingleProducerSequencer】，不需要对生产的序号作并发控制，但是需要与消费者的序号协调：**生产者的序号不能超过消费者的序号。**\n\n> 因为是环形队列，所以生产的速度不能赶上消费者的速度（覆盖了未消费的事件。\n>\n> 在序号中的表示就是：生产者的序号不能超过消费者的最低序号。\n\n\n\n以下是单生产者的下个可用序号获取流程：（感觉整个脑回路有点怪\n\n```java\npublic long next(int n){\n  // 获取的序号必须大于1（n表示希望获取几个序号\n  if (n < 1){\n    throw new IllegalArgumentException(\"n must be > 0\");\n  }\n  // 下一个值（初始为-1\n  long nextValue = this.nextValue;\n  // 加上希望获取的个数（此时相加可能会超过环形数组大小\n  long nextSequence = nextValue + n;\n  // 减去环形数组大小（如果下标越界，此时就回到环形队列头部\n  long wrapPoint = nextSequence - bufferSize;\n\t// 缓存的最小依赖值（初始为-1\n  // 这里是会缓存最小值的（cachedValue 表示的就是所有 gatingSequences 的最小值\n  long cachedGatingSequence = this.cachedValue;\n\t// 分情况判断是否出现消费不及时的情况 \n  // 情况1是表示生产序号越界之后又超出了消费序号\n  // 情况2是表示生产序号已经越界之后消费序号没有跟上的情况\n  if (wrapPoint > cachedGatingSequence || cachedGatingSequence > nextValue){\n    // cursor 又是啥东西？？？\n    cursor.setVolatile(nextValue);  // StoreLoad fence\n    // 这里应该是循环等消费进度,等待消费进度赶上生产速度\n    long minSequence;\n    while (wrapPoint > (minSequence = Util.getMinimumSequence(gatingSequences, nextValue))){\n      LockSupport.parkNanos(1L); // TODO: Use waitStrategy to spin?\n    }\n    this.cachedValue = minSequence;\n  }\n  this.nextValue = nextSequence;\n  return nextSequence;\n}\n```\n\n\n\ngatingSequences 就是各个消费者的序号，在注册消费者的时候添加（通过 AtomicReferenceFieldUpdater 添加的。\n\n（我一直以为是没有更新的空数组，日。 \n\n#### MultiProducerSequencer\n\n```java\n@Override\npublic long next(int n){\n  if (n < 1){\n    throw new IllegalArgumentException(\"n must be > 0\");\n  }\n\n  long current;\n  long next;\n\n  do{\n    current = cursor.get();\n    next = current + n;\n\n    long wrapPoint = next - bufferSize;\n    long cachedGatingSequence = gatingSequenceCache.get();\n\n    if (wrapPoint > cachedGatingSequence || cachedGatingSequence > current){\n      long gatingSequence = Util.getMinimumSequence(gatingSequences, current);\n\n      if (wrapPoint > gatingSequence) {\n        LockSupport.parkNanos(1); // TODO, should we spin based on the wait strategy?\n        continue;\n      }\n\t\t  gatingSequenceCache.set(gatingSequence);\n    } else if (cursor.compareAndSet(current, next)){\n      break;\n    }\n  }while (true);\n  return next;\n}\n```\n\n\n\n## 相关实现\n\n\n\n### Disruptor 中对象间引用关系\n\n### Disruptor 如何实现依赖关系\n\nDisruptor 中的依赖关系根据角色划分可以简单理解为以下几种：\n\n1. 生产者对于消费者的依赖（生产者不能覆盖掉未被消费的事件\n2. 消费者对于生产者的依赖（消费者不能消费旧事件\n3. 下层消费者对于上层消费者的依赖（下层消费者只能消费上层消费过的事件\n\n\n\n\n\n\n\n## 总结\n\n> Disruptor 实现高性能的基础。\n\n1. RingBuffer 对于对象的复用\n\nRingBuffer 就是 Disruptor 实现的对象池。\n\n复用的对象数组可以降低了 GC 频率，提高 CPU 的利用率，相对于 ArrayBlockedQueue 来说，RingBuffer 创建的事件对象数目是固定的。\n\n2. 避免了伪共享（缓存行\n\n（伪共享的影响可以参考 Java 中横向和纵向访问二维数组的时间消耗，存在几倍的延迟。\n\nSequence 中通过填充 long 对象的形式来避免伪共享。\n\n3. 无锁化实现\n\n在 RingBuffer 生产者的实现中，区分了单生产者和多生产者，多生产者以及消费者层面都是通过 CAS 来保证并发安全。\n","slug":"Disruptor","published":1,"updated":"2023-07-18T11:35:53.076Z","_id":"clk87sjyd0000wnbv2g2a8pr9","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"Disruptor-框架\"><a href=\"#Disruptor-框架\" class=\"headerlink\" title=\"Disruptor 框架\"></a>Disruptor 框架</h1><blockquote>\n<p>以下源码基于 3.4.4 版本，未完待续。</p>\n</blockquote>\n<p><img src=\"https://chenqwwq.oss-cn-hangzhou.aliyuncs.com/note/Disruptor%E7%9A%84%E5%89%AF%E6%9C%AC.png\" alt=\"Disruptor\"></p>\n<hr>\n<h2 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h2><p>以下是 Disruptor 官网的介绍图：</p>\n<p><img src=\"https://chenqwwq.oss-cn-hangzhou.aliyuncs.com/note/models.png\" alt=\"models\"></p>\n<p>Disruptor 是 LMAX 基于 Java 语言实现的<strong>高性能队列</strong>，相比于 Java 的 BlockedQueue，它有以下几个特点：</p>\n<ol>\n<li>无锁化（后续讲到的等待策略，所选择上所等待</li>\n<li>内存的预分配（队列会实现创建指定数量的对象</li>\n<li>事件广播（通过 Disruptor 发布的事件会被各个消费者分别消费</li>\n</ol>\n<br>\n\n<p>Disruptor 对生产者&#x2F;消费者的各个模块都进行了抽象（上图中也标注了各个角色），各个角色的作用如下：</p>\n<p><strong>RingBuffer</strong> 是最重要的中间队列，保存事件对象，也协调生产者和消费者之间的依赖关系。</p>\n<p>Producer 是生产者，任何持有 RingBuffer 的对象都可以作为生产者。</p>\n<p>Consumer 是消费者，消费者需要实现 EventHandler，并且需要向 Disruptor 注册信息。</p>\n<p><strong>Sequence</strong> 表示的是生产&#x2F;消费的序号（或者说偏移量？）可以类比于 AtomicLong，但是 Sequence 通过内存填充避免了伪共享</p>\n<blockquote>\n<p>生产者的 Sequence 由 RingBuffer 统一管理，消费者的 Sequence 则由各个消费者各自管理。</p>\n<p>因此各个消费者会分别消费事件，不会互相影响，类似 Kafka 的消费者组，所以消息会被每个消费者都处理一次。</p>\n</blockquote>\n<blockquote>\n<p>某些层面上 Disruptor 和 Guava 的 EventBus 有点像（后续可以对比一下两者的实现。</p>\n<p>EventBus 是监听器模型，而 Disruptor 则是生产者&#x2F;消费者模型，相对来说 Disruptor 的实现更加复杂也更加灵活高效。</p>\n</blockquote>\n<h2 id=\"源码分析\"><a href=\"#源码分析\" class=\"headerlink\" title=\"源码分析\"></a>源码分析</h2><h3 id=\"Disruptor\"><a href=\"#Disruptor\" class=\"headerlink\" title=\"Disruptor\"></a>Disruptor</h3><p>Disruptor 是整个框架的核心，<strong>负责协调生产者和队列、队列和消费者之间的关系，并对外提供基础 API。</strong></p>\n<p>Disruptor 主要持有 RingBuffer 的对象引用，以及所有的消费者信息（生产者的信息并不需要保存，谁持有该对象都可以成为生产者。</p>\n<p><img src=\"https://chenqwwq.oss-cn-hangzhou.aliyuncs.com/note/Disruptor%E7%B1%BB%E5%B1%9E%E6%80%A7.png\" alt=\"Disruptor类属性\"></p>\n<h4 id=\"创建流程\"><a href=\"#创建流程\" class=\"headerlink\" title=\"创建流程\"></a>创建流程</h4><p>（先通过创建过程来了解 Disruptor 整个对象的构造。</p>\n<p>Disruptor 的创建方法如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-title function_\">Disruptor</span><span class=\"hljs-params\">(</span><br><span class=\"hljs-params\">  <span class=\"hljs-keyword\">final</span> EventFactory&lt;T&gt; eventFactory,</span><br><span class=\"hljs-params\">  <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">int</span> ringBufferSize,</span><br><span class=\"hljs-params\">  <span class=\"hljs-keyword\">final</span> ThreadFactory threadFactory,</span><br><span class=\"hljs-params\">  <span class=\"hljs-keyword\">final</span> ProducerType producerType,</span><br><span class=\"hljs-params\">  <span class=\"hljs-keyword\">final</span> WaitStrategy waitStrategy)</span><br>&#123;<br>  <span class=\"hljs-built_in\">this</span>(<br>    RingBuffer.create(producerType, eventFactory, ringBufferSize, waitStrategy),<br>    <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">BasicExecutor</span>(threadFactory));<br>&#125;<br><br><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * Private constructor helper</span><br><span class=\"hljs-comment\">     */</span><br><span class=\"hljs-keyword\">private</span> <span class=\"hljs-title function_\">Disruptor</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">final</span> RingBuffer&lt;T&gt; ringBuffer, <span class=\"hljs-keyword\">final</span> Executor executor)</span><br>&#123;<br>  <span class=\"hljs-built_in\">this</span>.ringBuffer = ringBuffer;<br>  <span class=\"hljs-built_in\">this</span>.executor = executor;<br>&#125;<br></code></pre></div></td></tr></table></figure>\n\n<p><strong>Disruptor 的创建流程主要就是创建了对应的 RingBuffer 对象，并且指定消费者所用的线程工厂。</strong></p>\n<blockquote>\n<p>消费者的线程模型非常重要，这是非常容易出问题的一个点，并且在源码中也建议不要使用线程池实现。</p>\n</blockquote>\n<br>\n\n<p>整体的参数含义如下：</p>\n<table>\n<thead>\n<tr>\n<th>参数名称</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>eventFactory</td>\n<td>事件工厂（RingBuffer 会调用该接口方法，创建 RingBufferSize 个对象重复使用</td>\n</tr>\n<tr>\n<td>ringBufferSize</td>\n<td>RingBuffer 的大小，必须为2次幂</td>\n</tr>\n<tr>\n<td>threadFactory</td>\n<td>线程工厂（用于创建消费者所需要的线程，也可以指定线程池</td>\n</tr>\n<tr>\n<td>producerType</td>\n<td>生产者类型（根据单生产者还是多生产者会使用不同的并发策略</td>\n</tr>\n<tr>\n<td>waitStrategy</td>\n<td>等待策略（生产者的等待策略，而消费者的等待策略在指定消费者的时候决定</td>\n</tr>\n</tbody></table>\n<p>（以上参数基本就是 Disruptor 的所有控制参数了，接下来在看 RingBuffer 的创建流程。</p>\n<br>\n\n<br>\n\n<h4 id=\"RingBuffer-创建流程\"><a href=\"#RingBuffer-创建流程\" class=\"headerlink\" title=\"RingBuffer 创建流程\"></a>RingBuffer 创建流程</h4><p>以下是 3.4.4 版本中 RingBuffer 的定义注释以及继承图：</p>\n<p><img src=\"https://chenqwwq.oss-cn-hangzhou.aliyuncs.com/note/RingBuffer%E6%B3%A8%E9%87%8A.png\" alt=\"RingBuffer 注释\"></p>\n<p>（基于环形数组实现的可重复使用实例对象的存储组件，保存的数据的在生产者和消费者之间交换。</p>\n<br>\n\n<p><img src=\"https://chenqwwq.oss-cn-hangzhou.aliyuncs.com/note/RingBuffer%E7%B1%BB%E5%9B%BE.png\" alt=\"RingBuffer 类图\"></p>\n<p>RingBufferFields 、RingBufferPad 是 RingBuffer 做数据填充，避免缓存行的伪共享的实现。</p>\n<blockquote>\n<p>伪共享是指相关性较差的数据使用同一缓存行保存，而各自的修改会导致缓存行更频繁的失效，从何导致的性能降低。</p>\n<p>Disruptor 的处理方法很优雅，直接扩充当前重点数据大小到大于等于缓存行大小为止。</p>\n</blockquote>\n<p>EventSink 和 DataProvider 是 RingBuffer 的两个角色，对于生产者来说是事件的接受者，对于消费者来说又是数据的提供者。</p>\n<p>Sequenced 等接口表示这 RingBuffer 对 Sequence 的操作角色。</p>\n<br>\n\n<p>RingBuffer 对外提供的创建方法如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> &lt;E&gt; RingBuffer&lt;E&gt; <span class=\"hljs-title function_\">create</span><span class=\"hljs-params\">(</span><br><span class=\"hljs-params\">  ProducerType producerType,\t// 生产者类型</span><br><span class=\"hljs-params\">  EventFactory&lt;E&gt; factory,\t\t// 事件工厂</span><br><span class=\"hljs-params\">  <span class=\"hljs-type\">int</span> bufferSize,\t\t\t\t\t\t\t// Buffer 的大小</span><br><span class=\"hljs-params\">  WaitStrategy waitStrategy)</span>\t<span class=\"hljs-comment\">// 生产者的等待策略</span><br>&#123;<br>  <span class=\"hljs-comment\">// 根据生产类型调用不同的创建方法</span><br>  <span class=\"hljs-comment\">// （其实最终创建的都是 RingBuffer，但是创建的生产者 Sequencer 不同</span><br>  <span class=\"hljs-keyword\">switch</span> (producerType)<br>  &#123;<br>    <span class=\"hljs-keyword\">case</span> SINGLE:<br>      <span class=\"hljs-comment\">// 对应创建的是 SingleProducerSequencer</span><br>      <span class=\"hljs-keyword\">return</span> createSingleProducer(factory, bufferSize, waitStrategy);<br>    <span class=\"hljs-keyword\">case</span> MULTI:<br>      <span class=\"hljs-comment\">// 对应创建的是 MultiProducerSequencer</span><br>      <span class=\"hljs-keyword\">return</span> createMultiProducer(factory, bufferSize, waitStrategy);<br>    <span class=\"hljs-keyword\">default</span>:<br>      <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">IllegalStateException</span>(producerType.toString());<br>  &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure>\n\n<p>RingBuffer <strong>的大小是固定的</strong>，并且创建的时候就需要传入 EventFactory，Buffer 中所有的事件对象都是通过该工厂创建的。</p>\n<p>（因为大小是固定的，所以 RingBuffer 更可以类比 ArrayBlockedQueue 实现的生消模型。</p>\n<br>\n\n<p>另外为了更好地做并发控制， <strong>RingBuffer 也区分了生产者类型</strong>，以 SINGLE 生产者类型为例：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> &lt;E&gt; RingBuffer&lt;E&gt; <span class=\"hljs-title function_\">createMultiProducer</span><span class=\"hljs-params\">(EventFactory&lt;E&gt; factory, <span class=\"hljs-type\">int</span> bufferSize)</span>&#123;<br>  <span class=\"hljs-comment\">// 默认等待策略为阻塞等待 BlockingWaitStrategy</span><br>  <span class=\"hljs-keyword\">return</span> createMultiProducer(factory, bufferSize, <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">BlockingWaitStrategy</span>());<br>&#125;<br><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> &lt;E&gt; RingBuffer&lt;E&gt; <span class=\"hljs-title function_\">createSingleProducer</span><span class=\"hljs-params\">( EventFactory&lt;E&gt; factory,<span class=\"hljs-type\">int</span> bufferSize, WaitStrategy waitStrategy)</span>&#123;<br>  <span class=\"hljs-comment\">// 对应 SingleProducerSequencer</span><br>  <span class=\"hljs-type\">SingleProducerSequencer</span> <span class=\"hljs-variable\">sequencer</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">SingleProducerSequencer</span>(bufferSize, waitStrategy);<br>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">RingBuffer</span>&lt;E&gt;(factory, sequencer);<br>&#125;<br></code></pre></div></td></tr></table></figure>\n\n<p>SINGLE 对应的 Sequencer 类型为 SingleProducerSequencer，而 MULTI 对应的则是 MultiProducerSequencer。</p>\n<p>（两种 Sequencer 的并发控制是完全不一样的，毕竟单一生产者咩有并发</p>\n<br>\n\n<p>最后就是 RingBuffer 的构造函数的调用:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs java\">RingBufferFields(EventFactory&lt;E&gt; eventFactory,Sequencer sequencer)&#123;<br>  <span class=\"hljs-built_in\">this</span>.sequencer = sequencer;<br>  <span class=\"hljs-built_in\">this</span>.bufferSize = sequencer.getBufferSize();<br>  <span class=\"hljs-comment\">// 参数检查</span><br>  <span class=\"hljs-comment\">// 大小不能小于1</span><br>  <span class=\"hljs-keyword\">if</span> (bufferSize &lt; <span class=\"hljs-number\">1</span>)&#123;<br>    <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">IllegalArgumentException</span>(<span class=\"hljs-string\">&quot;bufferSize must not be less than 1&quot;</span>);<br>  &#125;<br>  <span class=\"hljs-comment\">// 大小必须要2次幂</span><br>  <span class=\"hljs-keyword\">if</span> (Integer.bitCount(bufferSize) != <span class=\"hljs-number\">1</span>)&#123;<br>    <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">IllegalArgumentException</span>(<span class=\"hljs-string\">&quot;bufferSize must be a power of 2&quot;</span>);<br>  &#125;<br>  <span class=\"hljs-comment\">// indexMask 用于 &amp; 求对应下标</span><br>  <span class=\"hljs-built_in\">this</span>.indexMask = bufferSize - <span class=\"hljs-number\">1</span>;<br>  <span class=\"hljs-comment\">// 创建对应数组（数组需要加上对齐填充</span><br>  <span class=\"hljs-built_in\">this</span>.entries = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Object</span>[sequencer.getBufferSize() + <span class=\"hljs-number\">2</span> * BUFFER_PAD];<br>  <span class=\"hljs-comment\">// 使用工厂方法填充数组</span><br>  fill(eventFactory);<br>&#125;<br><br><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">fill</span><span class=\"hljs-params\">(EventFactory&lt;E&gt; eventFactory)</span>&#123;<br>  <span class=\"hljs-comment\">// 只填充有效个数</span><br>  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; bufferSize; i++)&#123;<br>    entries[BUFFER_PAD + i] = eventFactory.newInstance();<br>  &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure>\n\n\n\n<p>RingBuffer 在<strong>创建的过程中间就会调用 EventFactory#newInstance 方法创建所需要的所有对象，为了后续的重复使用。</strong></p>\n<p>RingBuffer 的大小必须为2次幂，为了使用 k &amp; (n-1) 求对应数组下标。</p>\n<p>RingBuffer 中为了避免伪共享，做了很多的填充，例如整个的数组会多创建一些填充对象。</p>\n<p>总结来说，<strong>RingBuffer 的创建流程主要完成以下几件事情：</strong></p>\n<ol>\n<li><strong>创建环形数组并且创建所有 Event 对象</strong></li>\n<li><strong>根据生产者类型创建对应的 Sequencer</strong></li>\n</ol>\n<br>\n\n<h3 id=\"消费者\"><a href=\"#消费者\" class=\"headerlink\" title=\"消费者\"></a>消费者</h3><p>Disruptor 在启动前就需要指定消费者，同时也可以指定各消费者之间的依赖关系（也就是层级消费。</p>\n<p><strong>消费者的依赖关系也就是层级消费，以 EventHandlerGroup 作为基本单位进行依赖关系的编排</strong>，GroupA 可以根据 GroupB 的消费进度进行事件消费。</p>\n<blockquote>\n<p>即使在 EventHandlerGroup 中的 EventHandler 对象也不会共享一个 Sequence，会各自消费完整的事件列表。</p>\n</blockquote>\n<br>\n\n<h4 id=\"注册和启动流程\"><a href=\"#注册和启动流程\" class=\"headerlink\" title=\"注册和启动流程\"></a>注册和启动流程</h4><p>Disruptor 中的消费者需要提前注册（上文中提到的 Disruptor 会保存所有的消费者信息），然后随着框架的启动而开始执行。</p>\n<br>\n\n<p>Disruptor 提供了多种方式来进行注册：（消费者是向 Disruptor 对象注册的</p>\n<ol>\n<li>EventHandler（最终会被包装为 EventProcessor 进行注册，当前 Disruptor 所持有的 RingBuffer 会作为 DataProvider 传入。</li>\n<li>EventProcessorFactory（会使用工厂类直接创建 EventProcessor 进行消费者的注册</li>\n<li>EventProcessor（继承了 Runnable，在启动时执行</li>\n<li>WorkHandler</li>\n</ol>\n<br>\n\n<p>以下是通过 EventHandler 创建消费者的过程：</p>\n<p>（源码中主要需要注意 Disruptor 对于 Sequence 的处理，因为期间需要相互依赖。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">// Disruptor#handleEventsWith</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">final</span> EventHandlerGroup&lt;T&gt; <span class=\"hljs-title function_\">handleEventsWith</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">final</span> EventHandler&lt;? <span class=\"hljs-built_in\">super</span> T&gt;... handlers)</span>&#123;<br>  <span class=\"hljs-comment\">// 直接创建 EventProcessor</span><br>  <span class=\"hljs-comment\">// 初始化一个空的 Sequence 表示当前的消费者无依赖关系（除了生产者依赖</span><br>  <span class=\"hljs-keyword\">return</span> createEventProcessors(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Sequence</span>[<span class=\"hljs-number\">0</span>], handlers);<br>&#125;<br><br><span class=\"hljs-comment\">// Disruptor#createEventProcessors</span><br><span class=\"hljs-comment\">// 创建消费者实例</span><br><span class=\"hljs-comment\">// 参数包含 barrierSequence，是他依赖的上层消费者，当前消费者只能消费上层已经全部消费过的数据</span><br><span class=\"hljs-comment\">// 例如，当前依赖的三个上层消费者的 offset [1,10,10]，那么此时只能消费 1 的数据</span><br>EventHandlerGroup&lt;T&gt; <span class=\"hljs-title function_\">createEventProcessors</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">final</span> Sequence[] barrierSequences,<span class=\"hljs-keyword\">final</span> EventHandler&lt;? <span class=\"hljs-built_in\">super</span> T&gt;[] eventHandlers)</span>&#123;<br>  <span class=\"hljs-comment\">// 只能在未开始的时候添加消费者</span><br>  checkNotStarted();<br>  <span class=\"hljs-comment\">// 注册的消费者的 Sequence</span><br>  <span class=\"hljs-keyword\">final</span> Sequence[] processorSequences = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Sequence</span>[eventHandlers.length];<br>  <span class=\"hljs-comment\">// 创建 Barrier（是当前消费者依赖的 Barrier，由 RingBuffer 创建</span><br>  <span class=\"hljs-comment\">// ！！！消费者对于生产者的依赖是此时创建的，在后续创建 BatchEventProcessor 的时候添加进消费者</span><br>  <span class=\"hljs-comment\">// 此时创建的对象是 ProcessingSequenceBarrier，包含了依赖的 Sequence 和 RingBuffer 的 Sequence</span><br>  <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">SequenceBarrier</span> <span class=\"hljs-variable\">barrier</span> <span class=\"hljs-operator\">=</span> ringBuffer.newBarrier(barrierSequences);<br>\t<span class=\"hljs-comment\">// 遍历创建 BatchEventProcessor</span><br>  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>, eventHandlersLength = eventHandlers.length; i &lt; eventHandlersLength; i++)&#123;<br>    <span class=\"hljs-keyword\">final</span> EventHandler&lt;? <span class=\"hljs-built_in\">super</span> T&gt; eventHandler = eventHandlers[i];<br>    <span class=\"hljs-comment\">// ！！important  创建的最终消费实例是 BatchEventProcessor 添加了依赖的 barrier</span><br>    <span class=\"hljs-keyword\">final</span> BatchEventProcessor&lt;T&gt; batchEventProcessor = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">BatchEventProcessor</span>&lt;&gt;(ringBuffer, barrier, eventHandler);<br>    <span class=\"hljs-comment\">// 异常处理，这个是 Disruptor 确定的</span><br>    <span class=\"hljs-keyword\">if</span> (exceptionHandler != <span class=\"hljs-literal\">null</span>)&#123;<br>      batchEventProcessor.setExceptionHandler(exceptionHandler);<br>    &#125;<br>    <span class=\"hljs-comment\">// 消费者注册中心（会保存几类常用的映射</span><br>    consumerRepository.add(batchEventProcessor, eventHandler, barrier);<br>    <span class=\"hljs-comment\">// 消费者的 Processor</span><br>    processorSequences[i] = batchEventProcessor.getSequence();<br>  &#125;<br>  <span class=\"hljs-comment\">// 更新 Disruptor 的 GatingSequences</span><br>  <span class=\"hljs-comment\">// barrierSequences 是指定当前消费者的依赖对象</span><br>  updateGatingSequencesForNextInChain(barrierSequences, processorSequences);<br>  <span class=\"hljs-comment\">// 返回一个 EventhandlerGroup，调用当前方法的所有 EventHandler 会被包含在一个 Group 里面</span><br>  <span class=\"hljs-comment\">// 通过 EvntHandlerGroup 可以进一步编排后续处理逻辑</span><br>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">EventHandlerGroup</span>&lt;&gt;(<span class=\"hljs-built_in\">this</span>, consumerRepository, processorSequences);<br>&#125;<br><br><span class=\"hljs-comment\">// Disruptor#updateGatingSequencesForNextInChain</span><br><span class=\"hljs-comment\">// 更新 GatingSequences</span><br><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">updateGatingSequencesForNextInChain</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">final</span> Sequence[] barrierSequences, <span class=\"hljs-keyword\">final</span> Sequence[] processorSequences)</span>&#123;<br>  <span class=\"hljs-keyword\">if</span> (processorSequences.length &gt; <span class=\"hljs-number\">0</span>)&#123;<br>    <span class=\"hljs-comment\">// 将消费者的 Sequences 添加到 ringBuffer</span><br>    ringBuffer.addGatingSequences(processorSequences);<br>    <span class=\"hljs-comment\">// 因为当前消费者消费的都是 barrierSequences 中消费过的数据，所以当前消费者肯定是最低的 offset</span><br>    <span class=\"hljs-comment\">// 因此依赖的 barrier 就没必要保存了</span><br>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">final</span> Sequence barrierSequence : barrierSequences)&#123;<br>      ringBuffer.removeGatingSequence(barrierSequence);<br>    &#125;<br>    <span class=\"hljs-comment\">// barrierSequences 代表的的是当前消费者集的依赖，需要取消 endOfChain 的标记,因为他的下层还有当前的消费者</span><br>    consumerRepository.unMarkEventProcessorsAsEndOfChain(barrierSequences);<br>  &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure>\n\n\n\n<p>注册消费主要流程如下：</p>\n<ol>\n<li>检查 Disruptor 是否已经开启</li>\n<li>创建对应的 EventProcessor （具体对象为 BatchEventProcessor，包含了ExceptionHandler 和 RingBuffer。</li>\n<li>向 ConsumerRepository 注册当前的消费者信息（消费者并未启动，所以此时需要集中管理</li>\n<li>处理 Sequence（非常重要，依赖关系都靠这个协调<ul>\n<li>向 RingBuffer 添加当前的消费者的 Sequence（<strong>保证生产者的 Sequence 不超过消费者</strong></li>\n<li>移除 RingBuffer 中当前消费者依赖的 Sequence（当前消费者的序号肯定小于依赖，所以只需要关注当前消费者的序号就好</li>\n<li>处理具有依赖关系的消费者之间的 Sequence（<strong>当前消费者不能超过依赖目标的序号。</strong></li>\n</ul>\n</li>\n<li>返回 EventHandlerGroup（EventHandlerGroup 对象包含 after 等方法可以作为顺序处理逻辑的编排方法</li>\n</ol>\n<p>消费者最终的实例对象为 BatchEventProcessor（后续的消费逻辑，通过 RingBuffer 获取事件以及调用对应处理方法的逻辑都在该类中实现，EventProcessor 继承了 Runnable 所以可以直接执行。</p>\n<blockquote>\n<p>需要注意的是，Disruptor 不允许在运行过程中添加消费者，所以在  <code>Disruptor#start()</code> 前就需要注册全部的消费者。</p>\n</blockquote>\n<br>\n\n<h4 id=\"启动流程\"><a href=\"#启动流程\" class=\"headerlink\" title=\"启动流程\"></a>启动流程</h4><p>启动流程对应的是 <code>Disruptor#start</code> 方法，在启动之前所有的消费者都以 EventProcessor 的形式保存在 ConsumerRepository 中。</p>\n<p>方法的源码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> RingBuffer&lt;T&gt; <span class=\"hljs-title function_\">start</span><span class=\"hljs-params\">()</span>&#123;<br>  <span class=\"hljs-comment\">// 只能启动一次</span><br>  checkOnlyStartedOnce();<br>  <span class=\"hljs-comment\">// 遍历所有注册的消费者并启动</span><br>  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">final</span> ConsumerInfo consumerInfo : consumerRepository)&#123;<br>    consumerInfo.start(executor);<br>  &#125;<br>\t<span class=\"hljs-comment\">// 返回 RingBuffer</span><br>  <span class=\"hljs-keyword\">return</span> ringBuffer;<br>&#125;<br></code></pre></div></td></tr></table></figure>\n\n<p>EventProcessor 继承了 Runnable 方法可以直接使用 Executor 启动该类，在 Disruotor 创建的时候传入的 ThreadFactory 参数会被包装为 Executor，此时就用到了。</p>\n<h4 id=\"消费流程\"><a href=\"#消费流程\" class=\"headerlink\" title=\"消费流程\"></a>消费流程</h4><p>启动过程中 EvnetProcessor 就作为 Runnable 被放入线程池执行，所以消费的主题流程也实现在继承的 run() 方法中。</p>\n<p>（以下的实现 BatchEventProcessor 为主，WorkProcessor 还没看呢</p>\n<br>\n\n<p>以下是 BatchEventProcessor 的处理逻辑：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Override</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">run</span><span class=\"hljs-params\">()</span>&#123;<br>\t<span class=\"hljs-comment\">// 更新当前的状态，启动处理器</span><br>  <span class=\"hljs-comment\">// 状态是从 IDLE 到 RUNNING</span><br>  <span class=\"hljs-keyword\">if</span> (running.compareAndSet(IDLE, RUNNING))&#123;<br>    <span class=\"hljs-comment\">// 清除警告</span><br>    sequenceBarrier.clearAlert();<br>    <span class=\"hljs-comment\">// 如果继承了 LifecycleAware，则执行 onStart 方法</span><br>    <span class=\"hljs-comment\">// onStart 方法是每次从 IDLE 转变到 RUNNING 状态的时候都会执行的，而不是创建的时候一次</span><br>    notifyStart();<br>    <span class=\"hljs-keyword\">try</span>&#123;<br>      <span class=\"hljs-comment\">// 在判断一次是否启动成功</span><br>      <span class=\"hljs-keyword\">if</span> (running.get() == RUNNING)&#123;<br>        <span class=\"hljs-comment\">// 实际的处理逻辑</span><br>        processEvents();<br>      &#125;<br>    &#125;<span class=\"hljs-keyword\">finally</span>&#123;<br>      <span class=\"hljs-comment\">// 如果继承了 LifecycleAware，则执行 onShutdown 方法</span><br>      notifyShutdown();<br>      <span class=\"hljs-comment\">// 正常退出,标记处理器为空闲状态</span><br>      running.set(IDLE);<br>    &#125;<br>  &#125;<span class=\"hljs-keyword\">else</span>&#123;<br>\t\t<span class=\"hljs-comment\">// 可能是已经启动（那本次就是重复启动</span><br>    <span class=\"hljs-keyword\">if</span> (running.get() == RUNNING)&#123;<br>      <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">IllegalStateException</span>(<span class=\"hljs-string\">&quot;Thread is already running&quot;</span>);<br>    &#125;<span class=\"hljs-keyword\">else</span>&#123;<br>\t\t\t<span class=\"hljs-comment\">// 未启动成功并且当前状态部位 RUNNING</span><br>      <span class=\"hljs-comment\">// 可能是当前处于 HALTED 状态</span><br>      <span class=\"hljs-comment\">// 该方法就是执行一遍 onStart 和 onShutdown</span><br>      earlyExit();<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure>\n\n\n\n<p>在消费者启动和关闭的时候都有对应的回调方法（notifyStart &#x2F; notifyStart），对应的就是  <strong>LifecycleAware</strong> 接口：</p>\n<p><img src=\"/assets/image-20230619%E4%B8%8A%E5%8D%88122557863.png\" alt=\"image-20230619上午122557863\"></p>\n<blockquote>\n<p>EventHandler 可以通过继承该接口实现前后的回调，在整个生命周期各执行一次。</p>\n</blockquote>\n<p>消费的正常逻辑就是以下几步：</p>\n<ol>\n<li>CAS 修改状态（IDLE -&gt; RUNNING</li>\n<li>前置回调（LifecycleAware#onStart</li>\n<li>事件处理（processEvents</li>\n<li>后置回调（LifecycleAware#onShutdown</li>\n<li>状态修改 （任何状态 -&gt; IDLE</li>\n</ol>\n<h4 id=\"事件轮询和阻塞逻辑\"><a href=\"#事件轮询和阻塞逻辑\" class=\"headerlink\" title=\"事件轮询和阻塞逻辑\"></a>事件轮询和阻塞逻辑</h4><p>以下是 processEvents 的处理逻辑：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">processEvents</span><span class=\"hljs-params\">()</span>&#123;<br>  <span class=\"hljs-type\">T</span> <span class=\"hljs-variable\">event</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-literal\">null</span>;<br>  <span class=\"hljs-type\">long</span> <span class=\"hljs-variable\">nextSequence</span> <span class=\"hljs-operator\">=</span> sequence.get() + <span class=\"hljs-number\">1L</span>;<br>  <span class=\"hljs-comment\">// 死循环了,没有break别想走</span><br>  <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-literal\">true</span>)&#123;<br>    <span class=\"hljs-keyword\">try</span>&#123;<br>      <span class=\"hljs-comment\">// 等待下一个可用序号（waitFor 里面就包含了消费者和生产者之间通过序号协调的逻辑</span><br>      <span class=\"hljs-comment\">// 返回最大可用序号</span><br>      <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">long</span> <span class=\"hljs-variable\">availableSequence</span> <span class=\"hljs-operator\">=</span> sequenceBarrier.waitFor(nextSequence);<br>      <span class=\"hljs-comment\">// 在事件的批量处理之前,会有一个前置方法</span><br>      <span class=\"hljs-keyword\">if</span> (batchStartAware != <span class=\"hljs-literal\">null</span>)&#123;<br>        <span class=\"hljs-comment\">// 当前批次的大小</span><br>        batchStartAware.onBatchStart(availableSequence - nextSequence + <span class=\"hljs-number\">1</span>);<br>      &#125;<br>      <span class=\"hljs-comment\">// 循环遍历所有可用序号</span><br>      <span class=\"hljs-keyword\">while</span> (nextSequence &lt;= availableSequence)&#123;<br>        <span class=\"hljs-comment\">// 获取对应序号下的事件</span><br>        event = dataProvider.get(nextSequence);<br>        <span class=\"hljs-comment\">// 调用实际方法处理获取的事件</span><br>        eventHandler.onEvent(event, nextSequence, nextSequence == availableSequence);<br>        nextSequence++;<br>      &#125;<br>      sequence.set(availableSequence);<br>    &#125;<span class=\"hljs-keyword\">catch</span> (<span class=\"hljs-keyword\">final</span> TimeoutException e)&#123;<br>      <span class=\"hljs-comment\">// 处理超时异常</span><br>      notifyTimeout(sequence.get());<br>    &#125;<span class=\"hljs-keyword\">catch</span> (<span class=\"hljs-keyword\">final</span> AlertException ex)&#123;<br>      <span class=\"hljs-comment\">// AlertException 应该是状态变更的时候爆的</span><br>      <span class=\"hljs-comment\">// 如果不是运行中状态就退出</span><br>      <span class=\"hljs-keyword\">if</span> (running.get() != RUNNING)&#123;<br>        <span class=\"hljs-keyword\">break</span>;<br>      &#125;<br>    &#125;<span class=\"hljs-keyword\">catch</span> (<span class=\"hljs-keyword\">final</span> Throwable ex)&#123;<br>      <span class=\"hljs-comment\">// 处理异常</span><br>      handleEventException(ex, nextSequence, event);<br>      <span class=\"hljs-comment\">// 记录处理的序号（nextSequence 就是处理失败的序号</span><br>      sequence.set(nextSequence);<br>      <span class=\"hljs-comment\">// 接下来的序号（直接忽略了出现异常的这次事件处理</span><br>      nextSequence++;<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure>\n\n\n\n<p>事件的轮训通过一个死循环包括，<strong>不是 AlertEcveption 就无法退出</strong>。</p>\n<blockquote>\n<p>一个消费者是一个无限执行的任务，所以最好不要用线程池去执行消费的 Runnable，或者说线程数和消费者数量最好是 1:1</p>\n</blockquote>\n<p>BatchEventProcessor 并不会直接访问 RingBuffer 获取可用事件，而是通过 SequenceBarrier 实现（此前是通过 RingBuffer#newBarrier 创建的。</p>\n<blockquote>\n<p>消费者通过 SequenceBarrier 来实现对生产者和上层消费者的依赖。</p>\n</blockquote>\n<p>在获取到可用序号后，会先执行批量处理的前置回调 BatchStartAware#onBatchStart。</p>\n<blockquote>\n<p>BatchStartAware 也是通过 EventHandler 实现的。</p>\n<p>（Disruptor 这个实现我喜欢，<strong>所有的 Aware 都需要富集到 EventHandler 中统一注册。</strong></p>\n</blockquote>\n<p>完成回调之后，遍历可用序号逐个从 RingBuffer 中获取事件（DataProvider 就是 RingBuffer。</p>\n<p>然后调用 EventHandler#onEvent 完成实际的事件处理。</p>\n<br>\n\n<p>对于执行过程中的 TimeoutException（等待的超时，处理过程中的超时），都会触发 TimeoutHandler#onTimeout。</p>\n<p>对于 AlterException 则会判断状态，在非运行中状态时跳出循环。</p>\n<p>对于其他未知异常则会调用 ExceptionHandler#handleEventException 方法处理。</p>\n<h5 id=\"阻塞逻辑\"><a href=\"#阻塞逻辑\" class=\"headerlink\" title=\"阻塞逻辑\"></a>阻塞逻辑</h5><blockquote>\n<p>在消费速度大于生产速度的时候，就需要消费者阻塞等待生产。</p>\n</blockquote>\n<p>消费者并不会直接访问 RingBuffer，而是通过 SequenceBarrier，以下是对应的 waitFor 方法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">// sequence 表示的是需要等待的序号</span><br><span class=\"hljs-meta\">@Override</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">long</span> <span class=\"hljs-title function_\">waitFor</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">long</span> sequence)</span><br>  <span class=\"hljs-keyword\">throws</span> AlertException, InterruptedException, TimeoutException&#123;<br>  <span class=\"hljs-comment\">// 检查是否有告警信息</span><br>  checkAlert();<br>  <span class=\"hljs-comment\">// cursorSequence 表示的是生产者当前的序号</span><br>  <span class=\"hljs-comment\">// dependentSequence 是上层消费者的序号</span><br>  <span class=\"hljs-comment\">// this 就是当前的消费者</span><br>  <span class=\"hljs-type\">long</span> <span class=\"hljs-variable\">availableSequence</span> <span class=\"hljs-operator\">=</span> waitStrategy.waitFor(sequence, cursorSequence, dependentSequence, <span class=\"hljs-built_in\">this</span>);<br>  <span class=\"hljs-comment\">// 如果获取的消费者小雨 sequence，表示咩没有货渠到可用的事件</span><br>  <span class=\"hljs-comment\">// 直接返回最大可用事件</span><br>  <span class=\"hljs-keyword\">if</span> (availableSequence &lt; sequence)&#123;<br>    <span class=\"hljs-keyword\">return</span> availableSequence;<br>  &#125;<br>  <span class=\"hljs-comment\">// 存在可用的事件，获取最大的可用序号</span><br>  <span class=\"hljs-keyword\">return</span> sequencer.getHighestPublishedSequence(sequence, availableSequence);<br>&#125;<br></code></pre></div></td></tr></table></figure>\n\n<p>而 SequenceBarrier 也是通过 WaitStrategy 抽象出等待逻辑，在 Disruptor 官方实现中提供了以下几种：</p>\n<table>\n<thead>\n<tr>\n<th>实现类</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>BlockingWaitStrategy</td>\n<td>使用 ReentrantLock$Condition#await 实现的阻塞等待</td>\n</tr>\n<tr>\n<td>BusySpinWaitStrategy</td>\n<td>调用 Thread#onSpinWait 实现等待（可能没有，那就是空轮训</td>\n</tr>\n<tr>\n<td>LiteBlockingWaitStrategy</td>\n<td></td>\n</tr>\n<tr>\n<td>LiteTimeoutBlockingWaitStrategy</td>\n<td></td>\n</tr>\n<tr>\n<td>PhasedBackoffWaitStrategy</td>\n<td></td>\n</tr>\n<tr>\n<td>SleepingWaitStrategy</td>\n<td></td>\n</tr>\n<tr>\n<td>TimeoutBlockingWaitStrategy</td>\n<td></td>\n</tr>\n<tr>\n<td>YieldingWaitStrategy</td>\n<td></td>\n</tr>\n</tbody></table>\n<p>以 BlockingWaitStrategy 为例子：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">// cursorSequence 表示的是生产者当前的序号</span><br><span class=\"hljs-comment\">// dependentSequence 是上层消费者的序号</span><br><span class=\"hljs-meta\">@Override</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">long</span> <span class=\"hljs-title function_\">waitFor</span><span class=\"hljs-params\">(<span class=\"hljs-type\">long</span> sequence, Sequence cursorSequence, Sequence dependentSequence, SequenceBarrier barrier)</span><br>  <span class=\"hljs-keyword\">throws</span> AlertException, InterruptedException &#123;<br>  <span class=\"hljs-type\">long</span> availableSequence;<br>  <span class=\"hljs-comment\">// 如果当前序号小于需要的序号则直接使用 lock 上锁，并使用 condition 挂起当前线程</span><br>  <span class=\"hljs-keyword\">if</span> (cursorSequence.get() &lt; sequence)&#123;<br>    lock.lock();<br>    <span class=\"hljs-keyword\">try</span>&#123;<br>      <span class=\"hljs-keyword\">while</span> (cursorSequence.get() &lt; sequence)&#123;<br>        barrier.checkAlert();<br>        <span class=\"hljs-comment\">// condition 直接挂起</span><br>        processorNotifyCondition.await();<br>      &#125;<br>    &#125;<span class=\"hljs-keyword\">finally</span>&#123;<br>      lock.unlock();<br>    &#125;<br>  &#125;<br>  <span class=\"hljs-keyword\">while</span> ((availableSequence = dependentSequence.get()) &lt; sequence)&#123;<br>    barrier.checkAlert();<br>    <span class=\"hljs-comment\">// 调用的 Thread#onSpinWait</span><br>    <span class=\"hljs-comment\">// 类似于 Thread#sleep(0)，但是性能相对好一点</span><br>    ThreadHints.onSpinWait();<br>  &#125;<br>  <span class=\"hljs-keyword\">return</span> availableSequence;<br>&#125;<br></code></pre></div></td></tr></table></figure>\n\n\n\n<p><strong>消费者对于生产者的依赖是直接使用 ReentreLock 上锁，并使用 Condition 阻塞的，但是对于上层消费者，只有使用空轮询等待</strong></p>\n<p>如果上层消费者有多个，dependentSequence 就是被包装的 FixedSequenceGroup，获取对应的序号就是获取一组 Sequence 中最小的序号。</p>\n<p>参考了其他的实现，对于上层消费者的等待实现基本都是空轮询，所以对于同类消费者分层的时候需要保证消费的高效，如果上层消费者阻塞会直接拉爆下层消费者所在工作线程。</p>\n<h4 id=\"层级消费的实现\"><a href=\"#层级消费的实现\" class=\"headerlink\" title=\"层级消费的实现\"></a>层级消费的实现</h4><p>上面消费的流程已经说明了大部分的实现了，下层的消费者必须要持有上层消费者的 Sequence。</p>\n<h4 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h4><h5 id=\"状态流转\"><a href=\"#状态流转\" class=\"headerlink\" title=\"状态流转\"></a>状态流转</h5><div class=\"hljs code-wrapper\"><pre class=\"mermaid\">stateDiagram-v2\n        state \"IDLE(空闲)\" as I\n        state \"HALTED(停止)\" as H\n        state \"RUNNING(运行中)\" as R\n        \n        [*] --> I\n        I --> R: Disruptor#start（EventProcessor 被送入 Executor 执行\n        R --> H: Disruptor#halt（修改状态并设置告警\n        R --> H: Disruptor#shutdown（等待所有事件都被消费完,再调用 halt\n        H --> I: 感知到告警（checkAlert,跳出循环后修改</pre></div>\n\n\n\n<p>Disruptor#halt 方法除了修改当前 <strong>EventProcessor</strong> 的状态，还会在依赖的 <strong>SequenceBarrier</strong> 中记录一个告警状态，并且唤醒所有等待中消费者。</p>\n<p>重新执行的过程中感知到告警状态就会抛出 AlertException，从而跳出整个 BatchEventProcessor#processEvents 的处理循环，而后在外层 BatchEventProcessor#run 中修改为 IDLE 状态。</p>\n<p>整体流程如下：</p>\n<div class=\"hljs code-wrapper\"><pre class=\"mermaid\">graph TD\n      A(\"Runnable#run(整个流程的起点\") --> B[/\"更新当前状态(IDEL -> RUNNING\"/]\n      B --更新成功--> C[\"清空告警(clearAlert\"]\n      C --> D[\"执行 LifecycleAware#onStart\"]\n      D --> E[/\"判断当前状态(RUNNING\"/]\n      E --> F\n    subgraph 事件处理\n    F[\"获取可用序号(sequenceBarrier#waitFor\"]\n    F --有可用事件,返回可用的最大序号--> G[\"执行 batchStartAware#onBatchStart\"]\n    G --> H[\"获取 nextSequence 对应事件\"]\n    H --> I[\"处理事件（处理完 nextSequence++\"]\n    I --> H\n    I --> J[\"设置当前消费序号(nextSequence\"]\n    J --> F\n    F --状态改变,抛出 AlertExceotion--> K[\"break(跳出循环\"]\n    \n    F --等待超时--> M[\"执行 TimeoutHandler#onTimeout\"]\n    M --> F\n    end\n    K --> L[\"执行 LifecycleAware#onShutdown\"]\n    L --> N(\"更新状态到 IDEL（可以重新启动\")</pre></div>\n\n<p>（在 Disruptor#shutdown 之后，是可以重新直接 Disruptor#start 的，生产者&#x2F;消费者的序号没有清空。</p>\n<h5 id=\"消费者的线程模型\"><a href=\"#消费者的线程模型\" class=\"headerlink\" title=\"消费者的线程模型\"></a>消费者的线程模型</h5><p>Disruptor 的构造函数中已经表明，作者不建议使用 Executor 来执行消费者的任务。</p>\n<p>因为从上文可知，消费者的线程需要循环去获取事件，Runnable 主流程在 Disruptor 关闭前就不会退出，也就是说他会独占一个线程。</p>\n<p>另外在生产者端，发布事件的时候，生产速度是受限于所有消费者组中的最慢消费速度的。</p>\n<p>因此在使用 Disruptor 的实现，都需要尽可能使用单个线程处理消费者逻辑。</p>\n<p>例如在一个【用户注册】的场景，需要在注册后进行【发送欢迎短信】、【赠送注册积分】等逻辑，就可以由单个线程去接收用户注册事件，然后外接线程池去完成对应业务。</p>\n<h3 id=\"生产者\"><a href=\"#生产者\" class=\"headerlink\" title=\"生产者\"></a>生产者</h3><p>生产者不在 Disruptor 的控制范围之内，任何持有 Disruptor 对象的都可以作为生产者，调用 Disruptor#pushlishEvent 发布事件。</p>\n<p>上文提到过，Disruptor 使用的环形队列保存待消费的事务，并且 RingBuffer 在一开始就会创建所有的 Event 对象。</p>\n<p>所以生产者的流程简单来说就是如下流程：</p>\n<ol>\n<li>获取可用的序号，并获取序号对应的 Event（该序号表示的 Event 可以使用</li>\n<li>重新赋值 Event（不需要重新创建对象</li>\n<li>更新生产者序号</li>\n</ol>\n<br>\n\n<p>然后在看一下这些流程在 Disruptor 的实现。</p>\n<br>\n\n<p>生产的形式可以分为以下几种（Disruptor 的方法声明：</p>\n<p><img src=\"https://chenqwwq.oss-cn-hangzhou.aliyuncs.com/note/Disruptor_publishEvent.png\" alt=\"Disruptor_publishEvent.png\"></p>\n<p>EventTranslator 就是对应的事件赋值接口，相关定义如下：</p>\n<p><img src=\"https://chenqwwq.oss-cn-hangzhou.aliyuncs.com/note/EventTranslator.png\" alt=\"EventTranslator\"></p>\n<p>接口参数【event】表示当前需要赋值的事件对象，而【sequence】表示事件对应的序号。</p>\n<p>方法接收一个 EventTranslator 的 Lambda 实现，<strong>对于获取的事件会通过【translateTo】方法重新赋值并且重新发布</strong>。</p>\n<p>最终都是调用 RingBuffer 的对应方法，以第一个 EventTranslator 为例，其方法实现如下：</p>\n<p><img src=\"https://chenqwwq.oss-cn-hangzhou.aliyuncs.com/note/RingBuffer_publishEvent.png\" alt=\"RingBuffer#publishEvent\"></p>\n<p>具体的使用场景（RingBuffer 的具体发布流程）如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">// RingBuffer#publishEvent</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">publishEvent</span><span class=\"hljs-params\">(EventTranslator&lt;E&gt; translator)</span>&#123;<br>  <span class=\"hljs-comment\">// 获取下次发布的事件序号</span><br>  <span class=\"hljs-comment\">// 这里的 Sequence 是 RingBuffer 的，已经将所有的消费者添加为 gateSequences</span><br>  <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">long</span> <span class=\"hljs-variable\">sequence</span> <span class=\"hljs-operator\">=</span> sequencer.next();<br>  <span class=\"hljs-comment\">// 转换并发布事件</span><br>  translateAndPublish(translator, sequence);<br>&#125;<br><br><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">translateAndPublish</span><span class=\"hljs-params\">(EventTranslator&lt;E&gt; translator, <span class=\"hljs-type\">long</span> sequence)</span>&#123;<br>  <span class=\"hljs-keyword\">try</span>&#123;<br>    <span class=\"hljs-comment\">// get 方法就是获取 RingBuffer 中对应位置的事件对象</span><br>    <span class=\"hljs-comment\">// 使用传入的 lambda，修改了对应对象的属性（其实怎么改都随你,不改都行</span><br>    translator.translateTo(get(sequence), sequence);<br>  &#125;<span class=\"hljs-keyword\">finally</span>&#123;<br>    <span class=\"hljs-comment\">// 对序号进行一个发布</span><br>    sequencer.publish(sequence);<br>  &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure>\n\n<p>根据最开始生产者类型的区别，sequencer 会有不同的实现（这里又是一种策略模式的表现。</p>\n<p>单生产者并不需要并发控制，而多生产者需要在并发的情况下保证生产者的 Sequnce 正确，并且如果出现消费不及时的情况，生产者还需要等待。</p>\n<p>（等待的逻辑也保存在 【sequencer.next()】中。</p>\n<h4 id=\"SingleProducerSequencer\"><a href=\"#SingleProducerSequencer\" class=\"headerlink\" title=\"SingleProducerSequencer\"></a>SingleProducerSequencer</h4><p>对于单生产者模式对应的类型为【SingleProducerSequencer】，不需要对生产的序号作并发控制，但是需要与消费者的序号协调：<strong>生产者的序号不能超过消费者的序号。</strong></p>\n<blockquote>\n<p>因为是环形队列，所以生产的速度不能赶上消费者的速度（覆盖了未消费的事件。</p>\n<p>在序号中的表示就是：生产者的序号不能超过消费者的最低序号。</p>\n</blockquote>\n<p>以下是单生产者的下个可用序号获取流程：（感觉整个脑回路有点怪</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">long</span> <span class=\"hljs-title function_\">next</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> n)</span>&#123;<br>  <span class=\"hljs-comment\">// 获取的序号必须大于1（n表示希望获取几个序号</span><br>  <span class=\"hljs-keyword\">if</span> (n &lt; <span class=\"hljs-number\">1</span>)&#123;<br>    <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">IllegalArgumentException</span>(<span class=\"hljs-string\">&quot;n must be &gt; 0&quot;</span>);<br>  &#125;<br>  <span class=\"hljs-comment\">// 下一个值（初始为-1</span><br>  <span class=\"hljs-type\">long</span> <span class=\"hljs-variable\">nextValue</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-built_in\">this</span>.nextValue;<br>  <span class=\"hljs-comment\">// 加上希望获取的个数（此时相加可能会超过环形数组大小</span><br>  <span class=\"hljs-type\">long</span> <span class=\"hljs-variable\">nextSequence</span> <span class=\"hljs-operator\">=</span> nextValue + n;<br>  <span class=\"hljs-comment\">// 减去环形数组大小（如果下标越界，此时就回到环形队列头部</span><br>  <span class=\"hljs-type\">long</span> <span class=\"hljs-variable\">wrapPoint</span> <span class=\"hljs-operator\">=</span> nextSequence - bufferSize;<br>\t<span class=\"hljs-comment\">// 缓存的最小依赖值（初始为-1</span><br>  <span class=\"hljs-comment\">// 这里是会缓存最小值的（cachedValue 表示的就是所有 gatingSequences 的最小值</span><br>  <span class=\"hljs-type\">long</span> <span class=\"hljs-variable\">cachedGatingSequence</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-built_in\">this</span>.cachedValue;<br>\t<span class=\"hljs-comment\">// 分情况判断是否出现消费不及时的情况 </span><br>  <span class=\"hljs-comment\">// 情况1是表示生产序号越界之后又超出了消费序号</span><br>  <span class=\"hljs-comment\">// 情况2是表示生产序号已经越界之后消费序号没有跟上的情况</span><br>  <span class=\"hljs-keyword\">if</span> (wrapPoint &gt; cachedGatingSequence || cachedGatingSequence &gt; nextValue)&#123;<br>    <span class=\"hljs-comment\">// cursor 又是啥东西？？？</span><br>    cursor.setVolatile(nextValue);  <span class=\"hljs-comment\">// StoreLoad fence</span><br>    <span class=\"hljs-comment\">// 这里应该是循环等消费进度,等待消费进度赶上生产速度</span><br>    <span class=\"hljs-type\">long</span> minSequence;<br>    <span class=\"hljs-keyword\">while</span> (wrapPoint &gt; (minSequence = Util.getMinimumSequence(gatingSequences, nextValue)))&#123;<br>      LockSupport.parkNanos(<span class=\"hljs-number\">1L</span>); <span class=\"hljs-comment\">// <span class=\"hljs-doctag\">TODO:</span> Use waitStrategy to spin?</span><br>    &#125;<br>    <span class=\"hljs-built_in\">this</span>.cachedValue = minSequence;<br>  &#125;<br>  <span class=\"hljs-built_in\">this</span>.nextValue = nextSequence;<br>  <span class=\"hljs-keyword\">return</span> nextSequence;<br>&#125;<br></code></pre></div></td></tr></table></figure>\n\n\n\n<p>gatingSequences 就是各个消费者的序号，在注册消费者的时候添加（通过 AtomicReferenceFieldUpdater 添加的。</p>\n<p>（我一直以为是没有更新的空数组，日。 </p>\n<h4 id=\"MultiProducerSequencer\"><a href=\"#MultiProducerSequencer\" class=\"headerlink\" title=\"MultiProducerSequencer\"></a>MultiProducerSequencer</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Override</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">long</span> <span class=\"hljs-title function_\">next</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> n)</span>&#123;<br>  <span class=\"hljs-keyword\">if</span> (n &lt; <span class=\"hljs-number\">1</span>)&#123;<br>    <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">IllegalArgumentException</span>(<span class=\"hljs-string\">&quot;n must be &gt; 0&quot;</span>);<br>  &#125;<br><br>  <span class=\"hljs-type\">long</span> current;<br>  <span class=\"hljs-type\">long</span> next;<br><br>  <span class=\"hljs-keyword\">do</span>&#123;<br>    current = cursor.get();<br>    next = current + n;<br><br>    <span class=\"hljs-type\">long</span> <span class=\"hljs-variable\">wrapPoint</span> <span class=\"hljs-operator\">=</span> next - bufferSize;<br>    <span class=\"hljs-type\">long</span> <span class=\"hljs-variable\">cachedGatingSequence</span> <span class=\"hljs-operator\">=</span> gatingSequenceCache.get();<br><br>    <span class=\"hljs-keyword\">if</span> (wrapPoint &gt; cachedGatingSequence || cachedGatingSequence &gt; current)&#123;<br>      <span class=\"hljs-type\">long</span> <span class=\"hljs-variable\">gatingSequence</span> <span class=\"hljs-operator\">=</span> Util.getMinimumSequence(gatingSequences, current);<br><br>      <span class=\"hljs-keyword\">if</span> (wrapPoint &gt; gatingSequence) &#123;<br>        LockSupport.parkNanos(<span class=\"hljs-number\">1</span>); <span class=\"hljs-comment\">// TODO, should we spin based on the wait strategy?</span><br>        <span class=\"hljs-keyword\">continue</span>;<br>      &#125;<br>\t\t  gatingSequenceCache.set(gatingSequence);<br>    &#125; <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (cursor.compareAndSet(current, next))&#123;<br>      <span class=\"hljs-keyword\">break</span>;<br>    &#125;<br>  &#125;<span class=\"hljs-keyword\">while</span> (<span class=\"hljs-literal\">true</span>);<br>  <span class=\"hljs-keyword\">return</span> next;<br>&#125;<br></code></pre></div></td></tr></table></figure>\n\n\n\n<h2 id=\"相关实现\"><a href=\"#相关实现\" class=\"headerlink\" title=\"相关实现\"></a>相关实现</h2><h3 id=\"Disruptor-中对象间引用关系\"><a href=\"#Disruptor-中对象间引用关系\" class=\"headerlink\" title=\"Disruptor 中对象间引用关系\"></a>Disruptor 中对象间引用关系</h3><h3 id=\"Disruptor-如何实现依赖关系\"><a href=\"#Disruptor-如何实现依赖关系\" class=\"headerlink\" title=\"Disruptor 如何实现依赖关系\"></a>Disruptor 如何实现依赖关系</h3><p>Disruptor 中的依赖关系根据角色划分可以简单理解为以下几种：</p>\n<ol>\n<li>生产者对于消费者的依赖（生产者不能覆盖掉未被消费的事件</li>\n<li>消费者对于生产者的依赖（消费者不能消费旧事件</li>\n<li>下层消费者对于上层消费者的依赖（下层消费者只能消费上层消费过的事件</li>\n</ol>\n<h2 id=\"总结-1\"><a href=\"#总结-1\" class=\"headerlink\" title=\"总结\"></a>总结</h2><blockquote>\n<p>Disruptor 实现高性能的基础。</p>\n</blockquote>\n<ol>\n<li>RingBuffer 对于对象的复用</li>\n</ol>\n<p>RingBuffer 就是 Disruptor 实现的对象池。</p>\n<p>复用的对象数组可以降低了 GC 频率，提高 CPU 的利用率，相对于 ArrayBlockedQueue 来说，RingBuffer 创建的事件对象数目是固定的。</p>\n<ol start=\"2\">\n<li>避免了伪共享（缓存行</li>\n</ol>\n<p>（伪共享的影响可以参考 Java 中横向和纵向访问二维数组的时间消耗，存在几倍的延迟。</p>\n<p>Sequence 中通过填充 long 对象的形式来避免伪共享。</p>\n<ol start=\"3\">\n<li>无锁化实现</li>\n</ol>\n<p>在 RingBuffer 生产者的实现中，区分了单生产者和多生产者，多生产者以及消费者层面都是通过 CAS 来保证并发安全。</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Disruptor-框架\"><a href=\"#Disruptor-框架\" class=\"headerlink\" title=\"Disruptor 框架\"></a>Disruptor 框架</h1><blockquote>\n<p>以下源码基于 3.4.4 版本，未完待续。</p>\n</blockquote>\n<p><img src=\"https://chenqwwq.oss-cn-hangzhou.aliyuncs.com/note/Disruptor%E7%9A%84%E5%89%AF%E6%9C%AC.png\" alt=\"Disruptor\"></p>\n<hr>\n<h2 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h2><p>以下是 Disruptor 官网的介绍图：</p>\n<p><img src=\"https://chenqwwq.oss-cn-hangzhou.aliyuncs.com/note/models.png\" alt=\"models\"></p>\n<p>Disruptor 是 LMAX 基于 Java 语言实现的<strong>高性能队列</strong>，相比于 Java 的 BlockedQueue，它有以下几个特点：</p>\n<ol>\n<li>无锁化（后续讲到的等待策略，所选择上所等待</li>\n<li>内存的预分配（队列会实现创建指定数量的对象</li>\n<li>事件广播（通过 Disruptor 发布的事件会被各个消费者分别消费</li>\n</ol>\n<br>\n\n<p>Disruptor 对生产者&#x2F;消费者的各个模块都进行了抽象（上图中也标注了各个角色），各个角色的作用如下：</p>\n<p><strong>RingBuffer</strong> 是最重要的中间队列，保存事件对象，也协调生产者和消费者之间的依赖关系。</p>\n<p>Producer 是生产者，任何持有 RingBuffer 的对象都可以作为生产者。</p>\n<p>Consumer 是消费者，消费者需要实现 EventHandler，并且需要向 Disruptor 注册信息。</p>\n<p><strong>Sequence</strong> 表示的是生产&#x2F;消费的序号（或者说偏移量？）可以类比于 AtomicLong，但是 Sequence 通过内存填充避免了伪共享</p>\n<blockquote>\n<p>生产者的 Sequence 由 RingBuffer 统一管理，消费者的 Sequence 则由各个消费者各自管理。</p>\n<p>因此各个消费者会分别消费事件，不会互相影响，类似 Kafka 的消费者组，所以消息会被每个消费者都处理一次。</p>\n</blockquote>\n<blockquote>\n<p>某些层面上 Disruptor 和 Guava 的 EventBus 有点像（后续可以对比一下两者的实现。</p>\n<p>EventBus 是监听器模型，而 Disruptor 则是生产者&#x2F;消费者模型，相对来说 Disruptor 的实现更加复杂也更加灵活高效。</p>\n</blockquote>\n<h2 id=\"源码分析\"><a href=\"#源码分析\" class=\"headerlink\" title=\"源码分析\"></a>源码分析</h2><h3 id=\"Disruptor\"><a href=\"#Disruptor\" class=\"headerlink\" title=\"Disruptor\"></a>Disruptor</h3><p>Disruptor 是整个框架的核心，<strong>负责协调生产者和队列、队列和消费者之间的关系，并对外提供基础 API。</strong></p>\n<p>Disruptor 主要持有 RingBuffer 的对象引用，以及所有的消费者信息（生产者的信息并不需要保存，谁持有该对象都可以成为生产者。</p>\n<p><img src=\"https://chenqwwq.oss-cn-hangzhou.aliyuncs.com/note/Disruptor%E7%B1%BB%E5%B1%9E%E6%80%A7.png\" alt=\"Disruptor类属性\"></p>\n<h4 id=\"创建流程\"><a href=\"#创建流程\" class=\"headerlink\" title=\"创建流程\"></a>创建流程</h4><p>（先通过创建过程来了解 Disruptor 整个对象的构造。</p>\n<p>Disruptor 的创建方法如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-title function_\">Disruptor</span><span class=\"hljs-params\">(</span><br><span class=\"hljs-params\">  <span class=\"hljs-keyword\">final</span> EventFactory&lt;T&gt; eventFactory,</span><br><span class=\"hljs-params\">  <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">int</span> ringBufferSize,</span><br><span class=\"hljs-params\">  <span class=\"hljs-keyword\">final</span> ThreadFactory threadFactory,</span><br><span class=\"hljs-params\">  <span class=\"hljs-keyword\">final</span> ProducerType producerType,</span><br><span class=\"hljs-params\">  <span class=\"hljs-keyword\">final</span> WaitStrategy waitStrategy)</span><br>&#123;<br>  <span class=\"hljs-built_in\">this</span>(<br>    RingBuffer.create(producerType, eventFactory, ringBufferSize, waitStrategy),<br>    <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">BasicExecutor</span>(threadFactory));<br>&#125;<br><br><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * Private constructor helper</span><br><span class=\"hljs-comment\">     */</span><br><span class=\"hljs-keyword\">private</span> <span class=\"hljs-title function_\">Disruptor</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">final</span> RingBuffer&lt;T&gt; ringBuffer, <span class=\"hljs-keyword\">final</span> Executor executor)</span><br>&#123;<br>  <span class=\"hljs-built_in\">this</span>.ringBuffer = ringBuffer;<br>  <span class=\"hljs-built_in\">this</span>.executor = executor;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p><strong>Disruptor 的创建流程主要就是创建了对应的 RingBuffer 对象，并且指定消费者所用的线程工厂。</strong></p>\n<blockquote>\n<p>消费者的线程模型非常重要，这是非常容易出问题的一个点，并且在源码中也建议不要使用线程池实现。</p>\n</blockquote>\n<br>\n\n<p>整体的参数含义如下：</p>\n<table>\n<thead>\n<tr>\n<th>参数名称</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>eventFactory</td>\n<td>事件工厂（RingBuffer 会调用该接口方法，创建 RingBufferSize 个对象重复使用</td>\n</tr>\n<tr>\n<td>ringBufferSize</td>\n<td>RingBuffer 的大小，必须为2次幂</td>\n</tr>\n<tr>\n<td>threadFactory</td>\n<td>线程工厂（用于创建消费者所需要的线程，也可以指定线程池</td>\n</tr>\n<tr>\n<td>producerType</td>\n<td>生产者类型（根据单生产者还是多生产者会使用不同的并发策略</td>\n</tr>\n<tr>\n<td>waitStrategy</td>\n<td>等待策略（生产者的等待策略，而消费者的等待策略在指定消费者的时候决定</td>\n</tr>\n</tbody></table>\n<p>（以上参数基本就是 Disruptor 的所有控制参数了，接下来在看 RingBuffer 的创建流程。</p>\n<br>\n\n<br>\n\n<h4 id=\"RingBuffer-创建流程\"><a href=\"#RingBuffer-创建流程\" class=\"headerlink\" title=\"RingBuffer 创建流程\"></a>RingBuffer 创建流程</h4><p>以下是 3.4.4 版本中 RingBuffer 的定义注释以及继承图：</p>\n<p><img src=\"https://chenqwwq.oss-cn-hangzhou.aliyuncs.com/note/RingBuffer%E6%B3%A8%E9%87%8A.png\" alt=\"RingBuffer 注释\"></p>\n<p>（基于环形数组实现的可重复使用实例对象的存储组件，保存的数据的在生产者和消费者之间交换。</p>\n<br>\n\n<p><img src=\"https://chenqwwq.oss-cn-hangzhou.aliyuncs.com/note/RingBuffer%E7%B1%BB%E5%9B%BE.png\" alt=\"RingBuffer 类图\"></p>\n<p>RingBufferFields 、RingBufferPad 是 RingBuffer 做数据填充，避免缓存行的伪共享的实现。</p>\n<blockquote>\n<p>伪共享是指相关性较差的数据使用同一缓存行保存，而各自的修改会导致缓存行更频繁的失效，从何导致的性能降低。</p>\n<p>Disruptor 的处理方法很优雅，直接扩充当前重点数据大小到大于等于缓存行大小为止。</p>\n</blockquote>\n<p>EventSink 和 DataProvider 是 RingBuffer 的两个角色，对于生产者来说是事件的接受者，对于消费者来说又是数据的提供者。</p>\n<p>Sequenced 等接口表示这 RingBuffer 对 Sequence 的操作角色。</p>\n<br>\n\n<p>RingBuffer 对外提供的创建方法如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> &lt;E&gt; RingBuffer&lt;E&gt; <span class=\"hljs-title function_\">create</span><span class=\"hljs-params\">(</span><br><span class=\"hljs-params\">  ProducerType producerType,\t// 生产者类型</span><br><span class=\"hljs-params\">  EventFactory&lt;E&gt; factory,\t\t// 事件工厂</span><br><span class=\"hljs-params\">  <span class=\"hljs-type\">int</span> bufferSize,\t\t\t\t\t\t\t// Buffer 的大小</span><br><span class=\"hljs-params\">  WaitStrategy waitStrategy)</span>\t<span class=\"hljs-comment\">// 生产者的等待策略</span><br>&#123;<br>  <span class=\"hljs-comment\">// 根据生产类型调用不同的创建方法</span><br>  <span class=\"hljs-comment\">// （其实最终创建的都是 RingBuffer，但是创建的生产者 Sequencer 不同</span><br>  <span class=\"hljs-keyword\">switch</span> (producerType)<br>  &#123;<br>    <span class=\"hljs-keyword\">case</span> SINGLE:<br>      <span class=\"hljs-comment\">// 对应创建的是 SingleProducerSequencer</span><br>      <span class=\"hljs-keyword\">return</span> createSingleProducer(factory, bufferSize, waitStrategy);<br>    <span class=\"hljs-keyword\">case</span> MULTI:<br>      <span class=\"hljs-comment\">// 对应创建的是 MultiProducerSequencer</span><br>      <span class=\"hljs-keyword\">return</span> createMultiProducer(factory, bufferSize, waitStrategy);<br>    <span class=\"hljs-keyword\">default</span>:<br>      <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">IllegalStateException</span>(producerType.toString());<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>RingBuffer <strong>的大小是固定的</strong>，并且创建的时候就需要传入 EventFactory，Buffer 中所有的事件对象都是通过该工厂创建的。</p>\n<p>（因为大小是固定的，所以 RingBuffer 更可以类比 ArrayBlockedQueue 实现的生消模型。</p>\n<br>\n\n<p>另外为了更好地做并发控制， <strong>RingBuffer 也区分了生产者类型</strong>，以 SINGLE 生产者类型为例：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> &lt;E&gt; RingBuffer&lt;E&gt; <span class=\"hljs-title function_\">createMultiProducer</span><span class=\"hljs-params\">(EventFactory&lt;E&gt; factory, <span class=\"hljs-type\">int</span> bufferSize)</span>&#123;<br>  <span class=\"hljs-comment\">// 默认等待策略为阻塞等待 BlockingWaitStrategy</span><br>  <span class=\"hljs-keyword\">return</span> createMultiProducer(factory, bufferSize, <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">BlockingWaitStrategy</span>());<br>&#125;<br><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> &lt;E&gt; RingBuffer&lt;E&gt; <span class=\"hljs-title function_\">createSingleProducer</span><span class=\"hljs-params\">( EventFactory&lt;E&gt; factory,<span class=\"hljs-type\">int</span> bufferSize, WaitStrategy waitStrategy)</span>&#123;<br>  <span class=\"hljs-comment\">// 对应 SingleProducerSequencer</span><br>  <span class=\"hljs-type\">SingleProducerSequencer</span> <span class=\"hljs-variable\">sequencer</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">SingleProducerSequencer</span>(bufferSize, waitStrategy);<br>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">RingBuffer</span>&lt;E&gt;(factory, sequencer);<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>SINGLE 对应的 Sequencer 类型为 SingleProducerSequencer，而 MULTI 对应的则是 MultiProducerSequencer。</p>\n<p>（两种 Sequencer 的并发控制是完全不一样的，毕竟单一生产者咩有并发</p>\n<br>\n\n<p>最后就是 RingBuffer 的构造函数的调用:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\">RingBufferFields(EventFactory&lt;E&gt; eventFactory,Sequencer sequencer)&#123;<br>  <span class=\"hljs-built_in\">this</span>.sequencer = sequencer;<br>  <span class=\"hljs-built_in\">this</span>.bufferSize = sequencer.getBufferSize();<br>  <span class=\"hljs-comment\">// 参数检查</span><br>  <span class=\"hljs-comment\">// 大小不能小于1</span><br>  <span class=\"hljs-keyword\">if</span> (bufferSize &lt; <span class=\"hljs-number\">1</span>)&#123;<br>    <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">IllegalArgumentException</span>(<span class=\"hljs-string\">&quot;bufferSize must not be less than 1&quot;</span>);<br>  &#125;<br>  <span class=\"hljs-comment\">// 大小必须要2次幂</span><br>  <span class=\"hljs-keyword\">if</span> (Integer.bitCount(bufferSize) != <span class=\"hljs-number\">1</span>)&#123;<br>    <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">IllegalArgumentException</span>(<span class=\"hljs-string\">&quot;bufferSize must be a power of 2&quot;</span>);<br>  &#125;<br>  <span class=\"hljs-comment\">// indexMask 用于 &amp; 求对应下标</span><br>  <span class=\"hljs-built_in\">this</span>.indexMask = bufferSize - <span class=\"hljs-number\">1</span>;<br>  <span class=\"hljs-comment\">// 创建对应数组（数组需要加上对齐填充</span><br>  <span class=\"hljs-built_in\">this</span>.entries = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Object</span>[sequencer.getBufferSize() + <span class=\"hljs-number\">2</span> * BUFFER_PAD];<br>  <span class=\"hljs-comment\">// 使用工厂方法填充数组</span><br>  fill(eventFactory);<br>&#125;<br><br><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">fill</span><span class=\"hljs-params\">(EventFactory&lt;E&gt; eventFactory)</span>&#123;<br>  <span class=\"hljs-comment\">// 只填充有效个数</span><br>  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; bufferSize; i++)&#123;<br>    entries[BUFFER_PAD + i] = eventFactory.newInstance();<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n<p>RingBuffer 在<strong>创建的过程中间就会调用 EventFactory#newInstance 方法创建所需要的所有对象，为了后续的重复使用。</strong></p>\n<p>RingBuffer 的大小必须为2次幂，为了使用 k &amp; (n-1) 求对应数组下标。</p>\n<p>RingBuffer 中为了避免伪共享，做了很多的填充，例如整个的数组会多创建一些填充对象。</p>\n<p>总结来说，<strong>RingBuffer 的创建流程主要完成以下几件事情：</strong></p>\n<ol>\n<li><strong>创建环形数组并且创建所有 Event 对象</strong></li>\n<li><strong>根据生产者类型创建对应的 Sequencer</strong></li>\n</ol>\n<br>\n\n<h3 id=\"消费者\"><a href=\"#消费者\" class=\"headerlink\" title=\"消费者\"></a>消费者</h3><p>Disruptor 在启动前就需要指定消费者，同时也可以指定各消费者之间的依赖关系（也就是层级消费。</p>\n<p><strong>消费者的依赖关系也就是层级消费，以 EventHandlerGroup 作为基本单位进行依赖关系的编排</strong>，GroupA 可以根据 GroupB 的消费进度进行事件消费。</p>\n<blockquote>\n<p>即使在 EventHandlerGroup 中的 EventHandler 对象也不会共享一个 Sequence，会各自消费完整的事件列表。</p>\n</blockquote>\n<br>\n\n<h4 id=\"注册和启动流程\"><a href=\"#注册和启动流程\" class=\"headerlink\" title=\"注册和启动流程\"></a>注册和启动流程</h4><p>Disruptor 中的消费者需要提前注册（上文中提到的 Disruptor 会保存所有的消费者信息），然后随着框架的启动而开始执行。</p>\n<br>\n\n<p>Disruptor 提供了多种方式来进行注册：（消费者是向 Disruptor 对象注册的</p>\n<ol>\n<li>EventHandler（最终会被包装为 EventProcessor 进行注册，当前 Disruptor 所持有的 RingBuffer 会作为 DataProvider 传入。</li>\n<li>EventProcessorFactory（会使用工厂类直接创建 EventProcessor 进行消费者的注册</li>\n<li>EventProcessor（继承了 Runnable，在启动时执行</li>\n<li>WorkHandler</li>\n</ol>\n<br>\n\n<p>以下是通过 EventHandler 创建消费者的过程：</p>\n<p>（源码中主要需要注意 Disruptor 对于 Sequence 的处理，因为期间需要相互依赖。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">// Disruptor#handleEventsWith</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">final</span> EventHandlerGroup&lt;T&gt; <span class=\"hljs-title function_\">handleEventsWith</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">final</span> EventHandler&lt;? <span class=\"hljs-built_in\">super</span> T&gt;... handlers)</span>&#123;<br>  <span class=\"hljs-comment\">// 直接创建 EventProcessor</span><br>  <span class=\"hljs-comment\">// 初始化一个空的 Sequence 表示当前的消费者无依赖关系（除了生产者依赖</span><br>  <span class=\"hljs-keyword\">return</span> createEventProcessors(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Sequence</span>[<span class=\"hljs-number\">0</span>], handlers);<br>&#125;<br><br><span class=\"hljs-comment\">// Disruptor#createEventProcessors</span><br><span class=\"hljs-comment\">// 创建消费者实例</span><br><span class=\"hljs-comment\">// 参数包含 barrierSequence，是他依赖的上层消费者，当前消费者只能消费上层已经全部消费过的数据</span><br><span class=\"hljs-comment\">// 例如，当前依赖的三个上层消费者的 offset [1,10,10]，那么此时只能消费 1 的数据</span><br>EventHandlerGroup&lt;T&gt; <span class=\"hljs-title function_\">createEventProcessors</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">final</span> Sequence[] barrierSequences,<span class=\"hljs-keyword\">final</span> EventHandler&lt;? <span class=\"hljs-built_in\">super</span> T&gt;[] eventHandlers)</span>&#123;<br>  <span class=\"hljs-comment\">// 只能在未开始的时候添加消费者</span><br>  checkNotStarted();<br>  <span class=\"hljs-comment\">// 注册的消费者的 Sequence</span><br>  <span class=\"hljs-keyword\">final</span> Sequence[] processorSequences = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Sequence</span>[eventHandlers.length];<br>  <span class=\"hljs-comment\">// 创建 Barrier（是当前消费者依赖的 Barrier，由 RingBuffer 创建</span><br>  <span class=\"hljs-comment\">// ！！！消费者对于生产者的依赖是此时创建的，在后续创建 BatchEventProcessor 的时候添加进消费者</span><br>  <span class=\"hljs-comment\">// 此时创建的对象是 ProcessingSequenceBarrier，包含了依赖的 Sequence 和 RingBuffer 的 Sequence</span><br>  <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">SequenceBarrier</span> <span class=\"hljs-variable\">barrier</span> <span class=\"hljs-operator\">=</span> ringBuffer.newBarrier(barrierSequences);<br>\t<span class=\"hljs-comment\">// 遍历创建 BatchEventProcessor</span><br>  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>, eventHandlersLength = eventHandlers.length; i &lt; eventHandlersLength; i++)&#123;<br>    <span class=\"hljs-keyword\">final</span> EventHandler&lt;? <span class=\"hljs-built_in\">super</span> T&gt; eventHandler = eventHandlers[i];<br>    <span class=\"hljs-comment\">// ！！important  创建的最终消费实例是 BatchEventProcessor 添加了依赖的 barrier</span><br>    <span class=\"hljs-keyword\">final</span> BatchEventProcessor&lt;T&gt; batchEventProcessor = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">BatchEventProcessor</span>&lt;&gt;(ringBuffer, barrier, eventHandler);<br>    <span class=\"hljs-comment\">// 异常处理，这个是 Disruptor 确定的</span><br>    <span class=\"hljs-keyword\">if</span> (exceptionHandler != <span class=\"hljs-literal\">null</span>)&#123;<br>      batchEventProcessor.setExceptionHandler(exceptionHandler);<br>    &#125;<br>    <span class=\"hljs-comment\">// 消费者注册中心（会保存几类常用的映射</span><br>    consumerRepository.add(batchEventProcessor, eventHandler, barrier);<br>    <span class=\"hljs-comment\">// 消费者的 Processor</span><br>    processorSequences[i] = batchEventProcessor.getSequence();<br>  &#125;<br>  <span class=\"hljs-comment\">// 更新 Disruptor 的 GatingSequences</span><br>  <span class=\"hljs-comment\">// barrierSequences 是指定当前消费者的依赖对象</span><br>  updateGatingSequencesForNextInChain(barrierSequences, processorSequences);<br>  <span class=\"hljs-comment\">// 返回一个 EventhandlerGroup，调用当前方法的所有 EventHandler 会被包含在一个 Group 里面</span><br>  <span class=\"hljs-comment\">// 通过 EvntHandlerGroup 可以进一步编排后续处理逻辑</span><br>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">EventHandlerGroup</span>&lt;&gt;(<span class=\"hljs-built_in\">this</span>, consumerRepository, processorSequences);<br>&#125;<br><br><span class=\"hljs-comment\">// Disruptor#updateGatingSequencesForNextInChain</span><br><span class=\"hljs-comment\">// 更新 GatingSequences</span><br><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">updateGatingSequencesForNextInChain</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">final</span> Sequence[] barrierSequences, <span class=\"hljs-keyword\">final</span> Sequence[] processorSequences)</span>&#123;<br>  <span class=\"hljs-keyword\">if</span> (processorSequences.length &gt; <span class=\"hljs-number\">0</span>)&#123;<br>    <span class=\"hljs-comment\">// 将消费者的 Sequences 添加到 ringBuffer</span><br>    ringBuffer.addGatingSequences(processorSequences);<br>    <span class=\"hljs-comment\">// 因为当前消费者消费的都是 barrierSequences 中消费过的数据，所以当前消费者肯定是最低的 offset</span><br>    <span class=\"hljs-comment\">// 因此依赖的 barrier 就没必要保存了</span><br>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">final</span> Sequence barrierSequence : barrierSequences)&#123;<br>      ringBuffer.removeGatingSequence(barrierSequence);<br>    &#125;<br>    <span class=\"hljs-comment\">// barrierSequences 代表的的是当前消费者集的依赖，需要取消 endOfChain 的标记,因为他的下层还有当前的消费者</span><br>    consumerRepository.unMarkEventProcessorsAsEndOfChain(barrierSequences);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n<p>注册消费主要流程如下：</p>\n<ol>\n<li>检查 Disruptor 是否已经开启</li>\n<li>创建对应的 EventProcessor （具体对象为 BatchEventProcessor，包含了ExceptionHandler 和 RingBuffer。</li>\n<li>向 ConsumerRepository 注册当前的消费者信息（消费者并未启动，所以此时需要集中管理</li>\n<li>处理 Sequence（非常重要，依赖关系都靠这个协调<ul>\n<li>向 RingBuffer 添加当前的消费者的 Sequence（<strong>保证生产者的 Sequence 不超过消费者</strong></li>\n<li>移除 RingBuffer 中当前消费者依赖的 Sequence（当前消费者的序号肯定小于依赖，所以只需要关注当前消费者的序号就好</li>\n<li>处理具有依赖关系的消费者之间的 Sequence（<strong>当前消费者不能超过依赖目标的序号。</strong></li>\n</ul>\n</li>\n<li>返回 EventHandlerGroup（EventHandlerGroup 对象包含 after 等方法可以作为顺序处理逻辑的编排方法</li>\n</ol>\n<p>消费者最终的实例对象为 BatchEventProcessor（后续的消费逻辑，通过 RingBuffer 获取事件以及调用对应处理方法的逻辑都在该类中实现，EventProcessor 继承了 Runnable 所以可以直接执行。</p>\n<blockquote>\n<p>需要注意的是，Disruptor 不允许在运行过程中添加消费者，所以在  <code>Disruptor#start()</code> 前就需要注册全部的消费者。</p>\n</blockquote>\n<br>\n\n<h4 id=\"启动流程\"><a href=\"#启动流程\" class=\"headerlink\" title=\"启动流程\"></a>启动流程</h4><p>启动流程对应的是 <code>Disruptor#start</code> 方法，在启动之前所有的消费者都以 EventProcessor 的形式保存在 ConsumerRepository 中。</p>\n<p>方法的源码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> RingBuffer&lt;T&gt; <span class=\"hljs-title function_\">start</span><span class=\"hljs-params\">()</span>&#123;<br>  <span class=\"hljs-comment\">// 只能启动一次</span><br>  checkOnlyStartedOnce();<br>  <span class=\"hljs-comment\">// 遍历所有注册的消费者并启动</span><br>  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">final</span> ConsumerInfo consumerInfo : consumerRepository)&#123;<br>    consumerInfo.start(executor);<br>  &#125;<br>\t<span class=\"hljs-comment\">// 返回 RingBuffer</span><br>  <span class=\"hljs-keyword\">return</span> ringBuffer;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>EventProcessor 继承了 Runnable 方法可以直接使用 Executor 启动该类，在 Disruotor 创建的时候传入的 ThreadFactory 参数会被包装为 Executor，此时就用到了。</p>\n<h4 id=\"消费流程\"><a href=\"#消费流程\" class=\"headerlink\" title=\"消费流程\"></a>消费流程</h4><p>启动过程中 EvnetProcessor 就作为 Runnable 被放入线程池执行，所以消费的主题流程也实现在继承的 run() 方法中。</p>\n<p>（以下的实现 BatchEventProcessor 为主，WorkProcessor 还没看呢</p>\n<br>\n\n<p>以下是 BatchEventProcessor 的处理逻辑：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Override</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">run</span><span class=\"hljs-params\">()</span>&#123;<br>\t<span class=\"hljs-comment\">// 更新当前的状态，启动处理器</span><br>  <span class=\"hljs-comment\">// 状态是从 IDLE 到 RUNNING</span><br>  <span class=\"hljs-keyword\">if</span> (running.compareAndSet(IDLE, RUNNING))&#123;<br>    <span class=\"hljs-comment\">// 清除警告</span><br>    sequenceBarrier.clearAlert();<br>    <span class=\"hljs-comment\">// 如果继承了 LifecycleAware，则执行 onStart 方法</span><br>    <span class=\"hljs-comment\">// onStart 方法是每次从 IDLE 转变到 RUNNING 状态的时候都会执行的，而不是创建的时候一次</span><br>    notifyStart();<br>    <span class=\"hljs-keyword\">try</span>&#123;<br>      <span class=\"hljs-comment\">// 在判断一次是否启动成功</span><br>      <span class=\"hljs-keyword\">if</span> (running.get() == RUNNING)&#123;<br>        <span class=\"hljs-comment\">// 实际的处理逻辑</span><br>        processEvents();<br>      &#125;<br>    &#125;<span class=\"hljs-keyword\">finally</span>&#123;<br>      <span class=\"hljs-comment\">// 如果继承了 LifecycleAware，则执行 onShutdown 方法</span><br>      notifyShutdown();<br>      <span class=\"hljs-comment\">// 正常退出,标记处理器为空闲状态</span><br>      running.set(IDLE);<br>    &#125;<br>  &#125;<span class=\"hljs-keyword\">else</span>&#123;<br>\t\t<span class=\"hljs-comment\">// 可能是已经启动（那本次就是重复启动</span><br>    <span class=\"hljs-keyword\">if</span> (running.get() == RUNNING)&#123;<br>      <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">IllegalStateException</span>(<span class=\"hljs-string\">&quot;Thread is already running&quot;</span>);<br>    &#125;<span class=\"hljs-keyword\">else</span>&#123;<br>\t\t\t<span class=\"hljs-comment\">// 未启动成功并且当前状态部位 RUNNING</span><br>      <span class=\"hljs-comment\">// 可能是当前处于 HALTED 状态</span><br>      <span class=\"hljs-comment\">// 该方法就是执行一遍 onStart 和 onShutdown</span><br>      earlyExit();<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n<p>在消费者启动和关闭的时候都有对应的回调方法（notifyStart &#x2F; notifyStart），对应的就是  <strong>LifecycleAware</strong> 接口：</p>\n<p><img src=\"/assets/image-20230619%E4%B8%8A%E5%8D%88122557863.png\" alt=\"image-20230619上午122557863\"></p>\n<blockquote>\n<p>EventHandler 可以通过继承该接口实现前后的回调，在整个生命周期各执行一次。</p>\n</blockquote>\n<p>消费的正常逻辑就是以下几步：</p>\n<ol>\n<li>CAS 修改状态（IDLE -&gt; RUNNING</li>\n<li>前置回调（LifecycleAware#onStart</li>\n<li>事件处理（processEvents</li>\n<li>后置回调（LifecycleAware#onShutdown</li>\n<li>状态修改 （任何状态 -&gt; IDLE</li>\n</ol>\n<h4 id=\"事件轮询和阻塞逻辑\"><a href=\"#事件轮询和阻塞逻辑\" class=\"headerlink\" title=\"事件轮询和阻塞逻辑\"></a>事件轮询和阻塞逻辑</h4><p>以下是 processEvents 的处理逻辑：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">processEvents</span><span class=\"hljs-params\">()</span>&#123;<br>  <span class=\"hljs-type\">T</span> <span class=\"hljs-variable\">event</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-literal\">null</span>;<br>  <span class=\"hljs-type\">long</span> <span class=\"hljs-variable\">nextSequence</span> <span class=\"hljs-operator\">=</span> sequence.get() + <span class=\"hljs-number\">1L</span>;<br>  <span class=\"hljs-comment\">// 死循环了,没有break别想走</span><br>  <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-literal\">true</span>)&#123;<br>    <span class=\"hljs-keyword\">try</span>&#123;<br>      <span class=\"hljs-comment\">// 等待下一个可用序号（waitFor 里面就包含了消费者和生产者之间通过序号协调的逻辑</span><br>      <span class=\"hljs-comment\">// 返回最大可用序号</span><br>      <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">long</span> <span class=\"hljs-variable\">availableSequence</span> <span class=\"hljs-operator\">=</span> sequenceBarrier.waitFor(nextSequence);<br>      <span class=\"hljs-comment\">// 在事件的批量处理之前,会有一个前置方法</span><br>      <span class=\"hljs-keyword\">if</span> (batchStartAware != <span class=\"hljs-literal\">null</span>)&#123;<br>        <span class=\"hljs-comment\">// 当前批次的大小</span><br>        batchStartAware.onBatchStart(availableSequence - nextSequence + <span class=\"hljs-number\">1</span>);<br>      &#125;<br>      <span class=\"hljs-comment\">// 循环遍历所有可用序号</span><br>      <span class=\"hljs-keyword\">while</span> (nextSequence &lt;= availableSequence)&#123;<br>        <span class=\"hljs-comment\">// 获取对应序号下的事件</span><br>        event = dataProvider.get(nextSequence);<br>        <span class=\"hljs-comment\">// 调用实际方法处理获取的事件</span><br>        eventHandler.onEvent(event, nextSequence, nextSequence == availableSequence);<br>        nextSequence++;<br>      &#125;<br>      sequence.set(availableSequence);<br>    &#125;<span class=\"hljs-keyword\">catch</span> (<span class=\"hljs-keyword\">final</span> TimeoutException e)&#123;<br>      <span class=\"hljs-comment\">// 处理超时异常</span><br>      notifyTimeout(sequence.get());<br>    &#125;<span class=\"hljs-keyword\">catch</span> (<span class=\"hljs-keyword\">final</span> AlertException ex)&#123;<br>      <span class=\"hljs-comment\">// AlertException 应该是状态变更的时候爆的</span><br>      <span class=\"hljs-comment\">// 如果不是运行中状态就退出</span><br>      <span class=\"hljs-keyword\">if</span> (running.get() != RUNNING)&#123;<br>        <span class=\"hljs-keyword\">break</span>;<br>      &#125;<br>    &#125;<span class=\"hljs-keyword\">catch</span> (<span class=\"hljs-keyword\">final</span> Throwable ex)&#123;<br>      <span class=\"hljs-comment\">// 处理异常</span><br>      handleEventException(ex, nextSequence, event);<br>      <span class=\"hljs-comment\">// 记录处理的序号（nextSequence 就是处理失败的序号</span><br>      sequence.set(nextSequence);<br>      <span class=\"hljs-comment\">// 接下来的序号（直接忽略了出现异常的这次事件处理</span><br>      nextSequence++;<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n<p>事件的轮训通过一个死循环包括，<strong>不是 AlertEcveption 就无法退出</strong>。</p>\n<blockquote>\n<p>一个消费者是一个无限执行的任务，所以最好不要用线程池去执行消费的 Runnable，或者说线程数和消费者数量最好是 1:1</p>\n</blockquote>\n<p>BatchEventProcessor 并不会直接访问 RingBuffer 获取可用事件，而是通过 SequenceBarrier 实现（此前是通过 RingBuffer#newBarrier 创建的。</p>\n<blockquote>\n<p>消费者通过 SequenceBarrier 来实现对生产者和上层消费者的依赖。</p>\n</blockquote>\n<p>在获取到可用序号后，会先执行批量处理的前置回调 BatchStartAware#onBatchStart。</p>\n<blockquote>\n<p>BatchStartAware 也是通过 EventHandler 实现的。</p>\n<p>（Disruptor 这个实现我喜欢，<strong>所有的 Aware 都需要富集到 EventHandler 中统一注册。</strong></p>\n</blockquote>\n<p>完成回调之后，遍历可用序号逐个从 RingBuffer 中获取事件（DataProvider 就是 RingBuffer。</p>\n<p>然后调用 EventHandler#onEvent 完成实际的事件处理。</p>\n<br>\n\n<p>对于执行过程中的 TimeoutException（等待的超时，处理过程中的超时），都会触发 TimeoutHandler#onTimeout。</p>\n<p>对于 AlterException 则会判断状态，在非运行中状态时跳出循环。</p>\n<p>对于其他未知异常则会调用 ExceptionHandler#handleEventException 方法处理。</p>\n<h5 id=\"阻塞逻辑\"><a href=\"#阻塞逻辑\" class=\"headerlink\" title=\"阻塞逻辑\"></a>阻塞逻辑</h5><blockquote>\n<p>在消费速度大于生产速度的时候，就需要消费者阻塞等待生产。</p>\n</blockquote>\n<p>消费者并不会直接访问 RingBuffer，而是通过 SequenceBarrier，以下是对应的 waitFor 方法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">// sequence 表示的是需要等待的序号</span><br><span class=\"hljs-meta\">@Override</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">long</span> <span class=\"hljs-title function_\">waitFor</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">long</span> sequence)</span><br>  <span class=\"hljs-keyword\">throws</span> AlertException, InterruptedException, TimeoutException&#123;<br>  <span class=\"hljs-comment\">// 检查是否有告警信息</span><br>  checkAlert();<br>  <span class=\"hljs-comment\">// cursorSequence 表示的是生产者当前的序号</span><br>  <span class=\"hljs-comment\">// dependentSequence 是上层消费者的序号</span><br>  <span class=\"hljs-comment\">// this 就是当前的消费者</span><br>  <span class=\"hljs-type\">long</span> <span class=\"hljs-variable\">availableSequence</span> <span class=\"hljs-operator\">=</span> waitStrategy.waitFor(sequence, cursorSequence, dependentSequence, <span class=\"hljs-built_in\">this</span>);<br>  <span class=\"hljs-comment\">// 如果获取的消费者小雨 sequence，表示咩没有货渠到可用的事件</span><br>  <span class=\"hljs-comment\">// 直接返回最大可用事件</span><br>  <span class=\"hljs-keyword\">if</span> (availableSequence &lt; sequence)&#123;<br>    <span class=\"hljs-keyword\">return</span> availableSequence;<br>  &#125;<br>  <span class=\"hljs-comment\">// 存在可用的事件，获取最大的可用序号</span><br>  <span class=\"hljs-keyword\">return</span> sequencer.getHighestPublishedSequence(sequence, availableSequence);<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>而 SequenceBarrier 也是通过 WaitStrategy 抽象出等待逻辑，在 Disruptor 官方实现中提供了以下几种：</p>\n<table>\n<thead>\n<tr>\n<th>实现类</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>BlockingWaitStrategy</td>\n<td>使用 ReentrantLock$Condition#await 实现的阻塞等待</td>\n</tr>\n<tr>\n<td>BusySpinWaitStrategy</td>\n<td>调用 Thread#onSpinWait 实现等待（可能没有，那就是空轮训</td>\n</tr>\n<tr>\n<td>LiteBlockingWaitStrategy</td>\n<td></td>\n</tr>\n<tr>\n<td>LiteTimeoutBlockingWaitStrategy</td>\n<td></td>\n</tr>\n<tr>\n<td>PhasedBackoffWaitStrategy</td>\n<td></td>\n</tr>\n<tr>\n<td>SleepingWaitStrategy</td>\n<td></td>\n</tr>\n<tr>\n<td>TimeoutBlockingWaitStrategy</td>\n<td></td>\n</tr>\n<tr>\n<td>YieldingWaitStrategy</td>\n<td></td>\n</tr>\n</tbody></table>\n<p>以 BlockingWaitStrategy 为例子：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">// cursorSequence 表示的是生产者当前的序号</span><br><span class=\"hljs-comment\">// dependentSequence 是上层消费者的序号</span><br><span class=\"hljs-meta\">@Override</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">long</span> <span class=\"hljs-title function_\">waitFor</span><span class=\"hljs-params\">(<span class=\"hljs-type\">long</span> sequence, Sequence cursorSequence, Sequence dependentSequence, SequenceBarrier barrier)</span><br>  <span class=\"hljs-keyword\">throws</span> AlertException, InterruptedException &#123;<br>  <span class=\"hljs-type\">long</span> availableSequence;<br>  <span class=\"hljs-comment\">// 如果当前序号小于需要的序号则直接使用 lock 上锁，并使用 condition 挂起当前线程</span><br>  <span class=\"hljs-keyword\">if</span> (cursorSequence.get() &lt; sequence)&#123;<br>    lock.lock();<br>    <span class=\"hljs-keyword\">try</span>&#123;<br>      <span class=\"hljs-keyword\">while</span> (cursorSequence.get() &lt; sequence)&#123;<br>        barrier.checkAlert();<br>        <span class=\"hljs-comment\">// condition 直接挂起</span><br>        processorNotifyCondition.await();<br>      &#125;<br>    &#125;<span class=\"hljs-keyword\">finally</span>&#123;<br>      lock.unlock();<br>    &#125;<br>  &#125;<br>  <span class=\"hljs-keyword\">while</span> ((availableSequence = dependentSequence.get()) &lt; sequence)&#123;<br>    barrier.checkAlert();<br>    <span class=\"hljs-comment\">// 调用的 Thread#onSpinWait</span><br>    <span class=\"hljs-comment\">// 类似于 Thread#sleep(0)，但是性能相对好一点</span><br>    ThreadHints.onSpinWait();<br>  &#125;<br>  <span class=\"hljs-keyword\">return</span> availableSequence;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n<p><strong>消费者对于生产者的依赖是直接使用 ReentreLock 上锁，并使用 Condition 阻塞的，但是对于上层消费者，只有使用空轮询等待</strong></p>\n<p>如果上层消费者有多个，dependentSequence 就是被包装的 FixedSequenceGroup，获取对应的序号就是获取一组 Sequence 中最小的序号。</p>\n<p>参考了其他的实现，对于上层消费者的等待实现基本都是空轮询，所以对于同类消费者分层的时候需要保证消费的高效，如果上层消费者阻塞会直接拉爆下层消费者所在工作线程。</p>\n<h4 id=\"层级消费的实现\"><a href=\"#层级消费的实现\" class=\"headerlink\" title=\"层级消费的实现\"></a>层级消费的实现</h4><p>上面消费的流程已经说明了大部分的实现了，下层的消费者必须要持有上层消费者的 Sequence。</p>\n<h4 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h4><h5 id=\"状态流转\"><a href=\"#状态流转\" class=\"headerlink\" title=\"状态流转\"></a>状态流转</h5><pre class=\"mermaid\">stateDiagram-v2\n        state \"IDLE(空闲)\" as I\n        state \"HALTED(停止)\" as H\n        state \"RUNNING(运行中)\" as R\n        \n        [*] --> I\n        I --> R: Disruptor#start（EventProcessor 被送入 Executor 执行\n        R --> H: Disruptor#halt（修改状态并设置告警\n        R --> H: Disruptor#shutdown（等待所有事件都被消费完,再调用 halt\n        H --> I: 感知到告警（checkAlert,跳出循环后修改</pre>\n\n\n\n<p>Disruptor#halt 方法除了修改当前 <strong>EventProcessor</strong> 的状态，还会在依赖的 <strong>SequenceBarrier</strong> 中记录一个告警状态，并且唤醒所有等待中消费者。</p>\n<p>重新执行的过程中感知到告警状态就会抛出 AlertException，从而跳出整个 BatchEventProcessor#processEvents 的处理循环，而后在外层 BatchEventProcessor#run 中修改为 IDLE 状态。</p>\n<p>整体流程如下：</p>\n<pre class=\"mermaid\">graph TD\n      A(\"Runnable#run(整个流程的起点\") --> B[/\"更新当前状态(IDEL -> RUNNING\"/]\n      B --更新成功--> C[\"清空告警(clearAlert\"]\n      C --> D[\"执行 LifecycleAware#onStart\"]\n      D --> E[/\"判断当前状态(RUNNING\"/]\n      E --> F\n    subgraph 事件处理\n    F[\"获取可用序号(sequenceBarrier#waitFor\"]\n    F --有可用事件,返回可用的最大序号--> G[\"执行 batchStartAware#onBatchStart\"]\n    G --> H[\"获取 nextSequence 对应事件\"]\n    H --> I[\"处理事件（处理完 nextSequence++\"]\n    I --> H\n    I --> J[\"设置当前消费序号(nextSequence\"]\n    J --> F\n    F --状态改变,抛出 AlertExceotion--> K[\"break(跳出循环\"]\n    \n    F --等待超时--> M[\"执行 TimeoutHandler#onTimeout\"]\n    M --> F\n    end\n    K --> L[\"执行 LifecycleAware#onShutdown\"]\n    L --> N(\"更新状态到 IDEL（可以重新启动\")</pre>\n\n<p>（在 Disruptor#shutdown 之后，是可以重新直接 Disruptor#start 的，生产者&#x2F;消费者的序号没有清空。</p>\n<h5 id=\"消费者的线程模型\"><a href=\"#消费者的线程模型\" class=\"headerlink\" title=\"消费者的线程模型\"></a>消费者的线程模型</h5><p>Disruptor 的构造函数中已经表明，作者不建议使用 Executor 来执行消费者的任务。</p>\n<p>因为从上文可知，消费者的线程需要循环去获取事件，Runnable 主流程在 Disruptor 关闭前就不会退出，也就是说他会独占一个线程。</p>\n<p>另外在生产者端，发布事件的时候，生产速度是受限于所有消费者组中的最慢消费速度的。</p>\n<p>因此在使用 Disruptor 的实现，都需要尽可能使用单个线程处理消费者逻辑。</p>\n<p>例如在一个【用户注册】的场景，需要在注册后进行【发送欢迎短信】、【赠送注册积分】等逻辑，就可以由单个线程去接收用户注册事件，然后外接线程池去完成对应业务。</p>\n<h3 id=\"生产者\"><a href=\"#生产者\" class=\"headerlink\" title=\"生产者\"></a>生产者</h3><p>生产者不在 Disruptor 的控制范围之内，任何持有 Disruptor 对象的都可以作为生产者，调用 Disruptor#pushlishEvent 发布事件。</p>\n<p>上文提到过，Disruptor 使用的环形队列保存待消费的事务，并且 RingBuffer 在一开始就会创建所有的 Event 对象。</p>\n<p>所以生产者的流程简单来说就是如下流程：</p>\n<ol>\n<li>获取可用的序号，并获取序号对应的 Event（该序号表示的 Event 可以使用</li>\n<li>重新赋值 Event（不需要重新创建对象</li>\n<li>更新生产者序号</li>\n</ol>\n<br>\n\n<p>然后在看一下这些流程在 Disruptor 的实现。</p>\n<br>\n\n<p>生产的形式可以分为以下几种（Disruptor 的方法声明：</p>\n<p><img src=\"https://chenqwwq.oss-cn-hangzhou.aliyuncs.com/note/Disruptor_publishEvent.png\" alt=\"Disruptor_publishEvent.png\"></p>\n<p>EventTranslator 就是对应的事件赋值接口，相关定义如下：</p>\n<p><img src=\"https://chenqwwq.oss-cn-hangzhou.aliyuncs.com/note/EventTranslator.png\" alt=\"EventTranslator\"></p>\n<p>接口参数【event】表示当前需要赋值的事件对象，而【sequence】表示事件对应的序号。</p>\n<p>方法接收一个 EventTranslator 的 Lambda 实现，<strong>对于获取的事件会通过【translateTo】方法重新赋值并且重新发布</strong>。</p>\n<p>最终都是调用 RingBuffer 的对应方法，以第一个 EventTranslator 为例，其方法实现如下：</p>\n<p><img src=\"https://chenqwwq.oss-cn-hangzhou.aliyuncs.com/note/RingBuffer_publishEvent.png\" alt=\"RingBuffer#publishEvent\"></p>\n<p>具体的使用场景（RingBuffer 的具体发布流程）如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">// RingBuffer#publishEvent</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">publishEvent</span><span class=\"hljs-params\">(EventTranslator&lt;E&gt; translator)</span>&#123;<br>  <span class=\"hljs-comment\">// 获取下次发布的事件序号</span><br>  <span class=\"hljs-comment\">// 这里的 Sequence 是 RingBuffer 的，已经将所有的消费者添加为 gateSequences</span><br>  <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">long</span> <span class=\"hljs-variable\">sequence</span> <span class=\"hljs-operator\">=</span> sequencer.next();<br>  <span class=\"hljs-comment\">// 转换并发布事件</span><br>  translateAndPublish(translator, sequence);<br>&#125;<br><br><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">translateAndPublish</span><span class=\"hljs-params\">(EventTranslator&lt;E&gt; translator, <span class=\"hljs-type\">long</span> sequence)</span>&#123;<br>  <span class=\"hljs-keyword\">try</span>&#123;<br>    <span class=\"hljs-comment\">// get 方法就是获取 RingBuffer 中对应位置的事件对象</span><br>    <span class=\"hljs-comment\">// 使用传入的 lambda，修改了对应对象的属性（其实怎么改都随你,不改都行</span><br>    translator.translateTo(get(sequence), sequence);<br>  &#125;<span class=\"hljs-keyword\">finally</span>&#123;<br>    <span class=\"hljs-comment\">// 对序号进行一个发布</span><br>    sequencer.publish(sequence);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>根据最开始生产者类型的区别，sequencer 会有不同的实现（这里又是一种策略模式的表现。</p>\n<p>单生产者并不需要并发控制，而多生产者需要在并发的情况下保证生产者的 Sequnce 正确，并且如果出现消费不及时的情况，生产者还需要等待。</p>\n<p>（等待的逻辑也保存在 【sequencer.next()】中。</p>\n<h4 id=\"SingleProducerSequencer\"><a href=\"#SingleProducerSequencer\" class=\"headerlink\" title=\"SingleProducerSequencer\"></a>SingleProducerSequencer</h4><p>对于单生产者模式对应的类型为【SingleProducerSequencer】，不需要对生产的序号作并发控制，但是需要与消费者的序号协调：<strong>生产者的序号不能超过消费者的序号。</strong></p>\n<blockquote>\n<p>因为是环形队列，所以生产的速度不能赶上消费者的速度（覆盖了未消费的事件。</p>\n<p>在序号中的表示就是：生产者的序号不能超过消费者的最低序号。</p>\n</blockquote>\n<p>以下是单生产者的下个可用序号获取流程：（感觉整个脑回路有点怪</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">long</span> <span class=\"hljs-title function_\">next</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> n)</span>&#123;<br>  <span class=\"hljs-comment\">// 获取的序号必须大于1（n表示希望获取几个序号</span><br>  <span class=\"hljs-keyword\">if</span> (n &lt; <span class=\"hljs-number\">1</span>)&#123;<br>    <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">IllegalArgumentException</span>(<span class=\"hljs-string\">&quot;n must be &gt; 0&quot;</span>);<br>  &#125;<br>  <span class=\"hljs-comment\">// 下一个值（初始为-1</span><br>  <span class=\"hljs-type\">long</span> <span class=\"hljs-variable\">nextValue</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-built_in\">this</span>.nextValue;<br>  <span class=\"hljs-comment\">// 加上希望获取的个数（此时相加可能会超过环形数组大小</span><br>  <span class=\"hljs-type\">long</span> <span class=\"hljs-variable\">nextSequence</span> <span class=\"hljs-operator\">=</span> nextValue + n;<br>  <span class=\"hljs-comment\">// 减去环形数组大小（如果下标越界，此时就回到环形队列头部</span><br>  <span class=\"hljs-type\">long</span> <span class=\"hljs-variable\">wrapPoint</span> <span class=\"hljs-operator\">=</span> nextSequence - bufferSize;<br>\t<span class=\"hljs-comment\">// 缓存的最小依赖值（初始为-1</span><br>  <span class=\"hljs-comment\">// 这里是会缓存最小值的（cachedValue 表示的就是所有 gatingSequences 的最小值</span><br>  <span class=\"hljs-type\">long</span> <span class=\"hljs-variable\">cachedGatingSequence</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-built_in\">this</span>.cachedValue;<br>\t<span class=\"hljs-comment\">// 分情况判断是否出现消费不及时的情况 </span><br>  <span class=\"hljs-comment\">// 情况1是表示生产序号越界之后又超出了消费序号</span><br>  <span class=\"hljs-comment\">// 情况2是表示生产序号已经越界之后消费序号没有跟上的情况</span><br>  <span class=\"hljs-keyword\">if</span> (wrapPoint &gt; cachedGatingSequence || cachedGatingSequence &gt; nextValue)&#123;<br>    <span class=\"hljs-comment\">// cursor 又是啥东西？？？</span><br>    cursor.setVolatile(nextValue);  <span class=\"hljs-comment\">// StoreLoad fence</span><br>    <span class=\"hljs-comment\">// 这里应该是循环等消费进度,等待消费进度赶上生产速度</span><br>    <span class=\"hljs-type\">long</span> minSequence;<br>    <span class=\"hljs-keyword\">while</span> (wrapPoint &gt; (minSequence = Util.getMinimumSequence(gatingSequences, nextValue)))&#123;<br>      LockSupport.parkNanos(<span class=\"hljs-number\">1L</span>); <span class=\"hljs-comment\">// <span class=\"hljs-doctag\">TODO:</span> Use waitStrategy to spin?</span><br>    &#125;<br>    <span class=\"hljs-built_in\">this</span>.cachedValue = minSequence;<br>  &#125;<br>  <span class=\"hljs-built_in\">this</span>.nextValue = nextSequence;<br>  <span class=\"hljs-keyword\">return</span> nextSequence;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n<p>gatingSequences 就是各个消费者的序号，在注册消费者的时候添加（通过 AtomicReferenceFieldUpdater 添加的。</p>\n<p>（我一直以为是没有更新的空数组，日。 </p>\n<h4 id=\"MultiProducerSequencer\"><a href=\"#MultiProducerSequencer\" class=\"headerlink\" title=\"MultiProducerSequencer\"></a>MultiProducerSequencer</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Override</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">long</span> <span class=\"hljs-title function_\">next</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> n)</span>&#123;<br>  <span class=\"hljs-keyword\">if</span> (n &lt; <span class=\"hljs-number\">1</span>)&#123;<br>    <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">IllegalArgumentException</span>(<span class=\"hljs-string\">&quot;n must be &gt; 0&quot;</span>);<br>  &#125;<br><br>  <span class=\"hljs-type\">long</span> current;<br>  <span class=\"hljs-type\">long</span> next;<br><br>  <span class=\"hljs-keyword\">do</span>&#123;<br>    current = cursor.get();<br>    next = current + n;<br><br>    <span class=\"hljs-type\">long</span> <span class=\"hljs-variable\">wrapPoint</span> <span class=\"hljs-operator\">=</span> next - bufferSize;<br>    <span class=\"hljs-type\">long</span> <span class=\"hljs-variable\">cachedGatingSequence</span> <span class=\"hljs-operator\">=</span> gatingSequenceCache.get();<br><br>    <span class=\"hljs-keyword\">if</span> (wrapPoint &gt; cachedGatingSequence || cachedGatingSequence &gt; current)&#123;<br>      <span class=\"hljs-type\">long</span> <span class=\"hljs-variable\">gatingSequence</span> <span class=\"hljs-operator\">=</span> Util.getMinimumSequence(gatingSequences, current);<br><br>      <span class=\"hljs-keyword\">if</span> (wrapPoint &gt; gatingSequence) &#123;<br>        LockSupport.parkNanos(<span class=\"hljs-number\">1</span>); <span class=\"hljs-comment\">// TODO, should we spin based on the wait strategy?</span><br>        <span class=\"hljs-keyword\">continue</span>;<br>      &#125;<br>\t\t  gatingSequenceCache.set(gatingSequence);<br>    &#125; <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (cursor.compareAndSet(current, next))&#123;<br>      <span class=\"hljs-keyword\">break</span>;<br>    &#125;<br>  &#125;<span class=\"hljs-keyword\">while</span> (<span class=\"hljs-literal\">true</span>);<br>  <span class=\"hljs-keyword\">return</span> next;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"相关实现\"><a href=\"#相关实现\" class=\"headerlink\" title=\"相关实现\"></a>相关实现</h2><h3 id=\"Disruptor-中对象间引用关系\"><a href=\"#Disruptor-中对象间引用关系\" class=\"headerlink\" title=\"Disruptor 中对象间引用关系\"></a>Disruptor 中对象间引用关系</h3><h3 id=\"Disruptor-如何实现依赖关系\"><a href=\"#Disruptor-如何实现依赖关系\" class=\"headerlink\" title=\"Disruptor 如何实现依赖关系\"></a>Disruptor 如何实现依赖关系</h3><p>Disruptor 中的依赖关系根据角色划分可以简单理解为以下几种：</p>\n<ol>\n<li>生产者对于消费者的依赖（生产者不能覆盖掉未被消费的事件</li>\n<li>消费者对于生产者的依赖（消费者不能消费旧事件</li>\n<li>下层消费者对于上层消费者的依赖（下层消费者只能消费上层消费过的事件</li>\n</ol>\n<h2 id=\"总结-1\"><a href=\"#总结-1\" class=\"headerlink\" title=\"总结\"></a>总结</h2><blockquote>\n<p>Disruptor 实现高性能的基础。</p>\n</blockquote>\n<ol>\n<li>RingBuffer 对于对象的复用</li>\n</ol>\n<p>RingBuffer 就是 Disruptor 实现的对象池。</p>\n<p>复用的对象数组可以降低了 GC 频率，提高 CPU 的利用率，相对于 ArrayBlockedQueue 来说，RingBuffer 创建的事件对象数目是固定的。</p>\n<ol start=\"2\">\n<li>避免了伪共享（缓存行</li>\n</ol>\n<p>（伪共享的影响可以参考 Java 中横向和纵向访问二维数组的时间消耗，存在几倍的延迟。</p>\n<p>Sequence 中通过填充 long 对象的形式来避免伪共享。</p>\n<ol start=\"3\">\n<li>无锁化实现</li>\n</ol>\n<p>在 RingBuffer 生产者的实现中，区分了单生产者和多生产者，多生产者以及消费者层面都是通过 CAS 来保证并发安全。</p>\n"},{"title":"MySQL 复习总结（残酷学习版","index_img":"https://chenqwwq.oss-cn-hangzhou.aliyuncs.com/note/assets/image-20220322%E4%B8%8B%E5%8D%8844525458.png","banner_img":"https://chenqwwq.oss-cn-hangzhou.aliyuncs.com/note/assets/image-20220322%E4%B8%8B%E5%8D%8844525458.png","excerpt":"MySQL 重要知识点整理，包含事务，索引，锁，日志，主从等","date":"2022-03-18T03:24:35.000Z","_content":"\n# MySQL（残酷学习版\n\n[TOC]\n\n## MySQL 的整体架构\n\n\n\n![MySQL整体架构](https://chenqwwq.oss-cn-hangzhou.aliyuncs.com/note/MySQL%E7%9A%84%E6%95%B4%E4%BD%93%E6%9E%B6%E6%9E%84-7940422.png)\n\n\n\n### 连接器\n\n连接器就是负责管理连接的，包括权限验证等等流程，因为连接是 TCP 的可能还包括连接状态的维护。\n\n\n\n### 分析器\n\n分析器的作用是对 SQL 进行词法分析，语法分析，抽出 BST，并交给后续的组件。\n\n\n\n### 优化器\n\n**优化器是 MySQL 中对 SQL 语法的分析器以及索引的选择器，会根据解析出进来的 SQL 语句结合索引以及取样数据选择索引。**\n\n因为其中还包含数据的影响，所以即使符合最左前缀匹配也无法 100% 确定是否真的会走索引。\n\n例如，如果优化器根据数据推测全表扫描的速度大于走索引再回表的速度，那么就会直接放弃索引。\n\n\n\n### 执行器\n\n执行器就相当于是一个调度器，会根据表选择的存储引擎调用不同的存储引擎的接口。\n\n执行器对于上层的优化器屏蔽了底层不同存储引擎带来的查询语法上的差异性。\n\nMySQL 的存储引擎是可插拔式的，在创建表的时候就可以使用不同的存储引擎。\n\n\n\n早期的 MySQL 还会有查询缓存层，但是在4.x版本中就已经被删除了。\n\n> Q: 为什么要删除查询缓存？\n\n查询缓存是以查询语句为 Key，作为命中的要求，所以命中率并不会高，而且大量的缓存在业务逻辑层实现灵活性更高，更加可控，也就实在没必要在数据库中增加缓存机制。\n\n\n\n\n\n## MySQL Transaction（事务\n\n事务的特性有如下四种，**原子性（Atomicity），一致性（Consistency），隔离性（Isolation），持久性（Durability）**。\n\n\n\n原子性指的是事务的操作作为一个不可再分的整体，**要不同时完成要不同时失败**。\n\n隔离性指的是**多个事务并发执行的时候，互相之间的可见性**，多个事务之间互相干扰的情况。\n\n> 隔离性并不是说强制的完全不能看到，类似 InnoDB 提供了多种的隔离级别，低级别隔离也有使用场景。\n\n持久性好理解，**就是保证数据不丢失，在事务提交之后，事务造成的变更就是永久性的。**\n\n一致性指的是事务执行的前后，数据库中的数据都处于一种稳定状态，可能不太好理解，简单举例可以参考转账的操作，转账前后总额是不会增加的。\n\n\n\n\n\n### InnoDB 下事务的隔离级别\n\nMySQL InnoDB 中提供了四种隔离级别：\n\n- READ UNCOMMITTED 读未提交\n- READ COMMITED 读已提交\n- REPEATABLE READ 可重复读（Default）\n- SERIALIZABLE  序列化\n\n\n\n四种隔离级别分别解决了不同的并发问题：\n\n| 隔离解别            | 脏读 | 不可重复读 | 幻读            |\n| ------------------- | ---- | ---------- | --------------- |\n| Read Uncommitted    | Y    | Y          | Y               |\n| Read Committed      | N    | Y          | Y               |\n| Repeatable(default) | N    | N          | Y（InnoDB - N） |\n| Serializable        | N    | N          | N               |\n\n> 简单理解一下这三种并发问题：\n>\n> **脏读（读未提交），事务读取到了其它事务中未提交的数据。**\n>\n> **不可重复读，事务前后多次读取内容不一致。**\n>\n> **幻读，事务前后多次读取总量不一致。**\n\n\n\n**RC  解决脏读依靠的就是锁和MVCC。**\n\n> MVCC 在 InnoDB 的 RR 和 RC 级别下表现是不一样的，RR 级别下，MVCC 以第一次 SELECT 查到的数据为主不会再创建新的快照，但是 RC 级别下，MVCC 机制每次都会创建新的快照，所以也会存在前后数据不一致的情况。\n\n\n\n### InnoDB 中 ACID 的实现\n\n首先是原子性，**InnoDB 使用 Undo Log 实现了原子性**，基本原则就是在失败之后回滚之前的操作。\n\n> InnoDB 的 Undo Log 会根据数据行的版本指针组成一个链表，回滚时可以根据链表向上追溯。\n\n**隔离性，InnoDB 的隔离性是依靠 MVCC 和 锁来实现的。**\n\nInnoDB 中提供了多种不同的隔离级别，每个隔离级别使用不同类型的锁和 MVCC 表现形式来支持隔离性。\n\n> 锁定义了事务并发时访问权限，MVCC 减少了部分上锁的情况（主要还是增加性能。\n\n**持久性，InnoDB 中的持久性是依靠的 redo log 以及 undo log 实现的。**\n\n> 并说不清为什么还需要 undo log，但是因为 WAL 机制，redo log 是在数据修改前就已经持久化的，在事务提交的时候可以保证 redo log 已经落盘了，大部分情况下 redo log 就已经能保障数据的持久性了。\n\n一致性... emmm 不太清楚，应该是其他的东西一起保证的。\n\n\n\n### InnoDB 中的MVCC（多版本并发控制）\n\nMVCC（**Multi-Version  Concurrency Control**） 在我看来是 InnoDB 中一个非常重要的特性，很大程度上提高了 MySQL 的并发性能。\n\nMVCC 机制在数据行中保留了多版本的数据，使用数据行隐藏字段 roll_pointer（回滚指针）串联起一个版本链，可以顺着版本链回滚数据行。\n\n> 因为是链是逐个遍历直到找到当前事务可以看到的数据行，所以当链很长的时候可能会拖慢查询。\n\n基于 MVCC，InnoDB 引入了一个快照读的概念，相对应的还有当前读，快照读指的是当前查询语句读取的是快照的内容，当前读读取的就是当前的真实数据。\n\n> 这里的快照不同于 Redis 的 RDB，是基于隐藏字段 trx_id 实现的可读范围标识。 \n\n\n\nInnoDB 的行记录包含了两个隐藏字段：\n\n| 字段名       | 含义                                 |\n| ------------ | ------------------------------------ |\n| trx_id       | 事务Id，由存储引擎统一下发，确保递增 |\n| roll_pointer | 回滚指针                             |\n\n回滚指针指向的是当前行上次的数据，以此形成一个版本链，如果需要回滚到最先版本的数据，需要顺着 roll_pointer 一直往上。\n\n\n\n**MVCC 根据 trx_id 的大小界定出可见范围。**\n\n事务开始时，会额外保存当前最大和最小的 trx_id，并且保存当前未提交的事务 trx_id 数组。\n\n> 这里的事务开始是指第一次查询，而非 start tran。\n\n小于最小的 trx_id 标识已经提交，所以可见，大于最大的 trx_id 表示开始时还未开启，所以不可见。\n\n如果在中间，则判断 trx_id 数组是否包含来标识是否可读。\n\n\n\n\n\n**MVCC 特性仅仅在 RC 和 RR 级别下生效，**并且在两个级别下的表现形式不同。\n\n**在 RC 级别下，每次查询都会创建一个快照，而在 RR 级别下，只有第一次查询会创建一个快照。**（Important\n\n> 这就导致了事务的表现不同。\n>\n> 在 RC 级别下，事务可以查看到别的事务已经提交的数据，这样就造成了不可重复读，也无法避免脏读。\n>\n> 而在 RR 级别下，事务只会以第一次查询语句为准创建快照，所以 RR 级别下不会出现所谓的不可重复读问题。\n\n\n\n \n\n### 参考文档\n\n- [相见恨晚，MVCC 这么理解，早就通关了](https://mp.weixin.qq.com/s/dMErouLlrte84Nmb97MkTQ)\n- [『浅入深出』MySQL 中事务的实现](https://draveness.me/mysql-transaction/)\n\n\n\n## MySQL Index（索引\n\n索引就是用来加速查询速度的特殊结构。\n\n\n\n### InnoDB 中的索引结构\n\n**常见的索引结构有B+树，B树或者 Hash 索引，倒排索引**。\n\n> InnoDB 中以B+树为主，存在自适应 Hash索引，提供特殊形式的查询优化。\n\n<bf>\n\nB+ 树就是平衡的搜索树，可以简单理解为是二叉搜索树（BST）或者二叉平衡树（AVL）的变种。\n\nAVL **就是任意节点左右子树的高度差不超过1的树，**为了维持这种特性需要大量的旋转操作（添加最多旋转两次，但是删除最多需要 Lg(N)，并且随着深度的增加搜索的效率也会慢慢降低，在动辄千万亿万的数据的数据库中，二叉搜索树明显是不合适的。\n\nM 阶的B+树，根节点的节点数为[2,M]，索引节点的节点数为[M/2,M]，**而且保证了数据的有序性质**，所以层次更低，查询速度更快也更平稳。\n\n> 因为B+树数据有序性的特点，所以如果不使用单调递增的索引键，在插入和删除操作时候就会存在页分裂和页合并的问题，十分影响效率。\n\n\n\nB 树和 B+树 的区别如下：\n\n1. B+ 树的所有数据都在子节点中，这样的**查询更加稳定**，所有的查询都需要树高度次的查询。\n2. B+ 树所有的子节点**组成一个链表**，这样非常便于**实现范围查询**。\n\n相对于 B 树和 Hash 来说，B+树更加符合磁盘的特性。\n\n\n\n> 为什么说 B+ 树更加符合磁盘特性呢？\n\n相比于 Hash 来说，B+ 树的层级更低（往往只有三四层，对于 B+ 树的存储来说，往往一个节点就是一个数据页，因此正常情况下 3～4 次磁盘 IO 就可以获取到想要的内容，并且 B+ 树将所有的叶子节点连成链，更加适合范围查询。\n\n相比于 B 树，除去叶子节点成链不说，B+ 树的非叶子节点不保存数据，具有更稳定的查询效率，B 树虽然在某些查询中可以更快速，但是整体查询并不稳定，读取同样大小的索引页 B+ 树有更多的索引项。\n\n\n\n> MySQL 为什么不使用 Hash 表或者跳表作为索引实现？\n\nHash 表只适合等值查询，几乎无法做范围查询。\n\n\n\n> 为什么不使用跳表的原因如下：\n\nMySQL 的主要数据还是保存在磁盘中，相对于跳表，B+ 树更加适配磁盘的特性，每个索引块可以保存在一个盘页。\n\n（以 Redis 为例，如果纯内存的数据库跳表应该和 B+ 树访问速度差不多。\n\n\n\n### 索引分类\n\n#### 聚集索引和非聚集索引\n\n聚集索引并**不是一种单独的索引类型，而是一种数据的存储方式**，在 InnoDB 中，主键索引就是聚集索引，**所有的数据都保存在主键索引的叶子节点中，数据按照主键的顺序排列存储。**\n\nInnoDB 中，主键索引决定了数据的物理存储顺序，应该更能理解主键的乱序插入带来的页分裂等等问题了。\n\n> 如果没有明确定义表的主键，MySQL 也会挑选一个唯一键作为主键，如果没有唯一键则会生成一个 rowId 作为主键。\n\n非聚集索引就是非聚集索引，**和聚集索引相反的它的逻辑顺序和物理的存储顺序就是完全无关的。**\n\nInnoDB 的实现中，次级索引都是非聚集索引，保存的是主键。\n\n> 所以 InnoDB 中存在回表操作，就是在一个索引树中无法完全确定数据是否可用时，先返回主键，查询完整的数据再来判断。\n>\n> 增加单索引中字段，索引下推，索引联合都可以起到减少回表的作用。\n\nMyISAM 中的非聚集索引实现不同，MyISAM 中所有的索引树都是非聚集索引，包括主键在内，保存的都是数据的真实地址。\n\n> MyISAM 和 InnoDB 的不同在这里就有体现：\n>\n> MyISAM 支持没有主键，理论上来说 MyISAM 的主键索引和次级索引没有任何区别。\n>\n> MyISAM 的索引中保存的都是数据地址，而 InnoDB 的次级索引保存的主键。\n\n\n\n#### 稠密索引和稀疏索引\n\n稠密索引会为每一个键值建立一个索引记录，可以i加快查询速度，但是需要更多的空战占用以及维护成本。（类似 MySQL 中的主键索引\n\n稀疏索引不会为每一个键值建立索引，这种索引往往出现在有序的排序中，例如跳表结构就是稀疏索引的典型实现（Mongo 以及 Kafka 都算是稀疏索引，Mongo 的文档可能会缺失某些字段？Kafka 是以时间戳为序间隔一定长度建立索引项\n\n\n\n#### 唯一索引和非唯一索引\n\n唯一索引就是在表内需要保证字段值全局唯一的索引。\n\n> 唯一索引是保证不重复调用或者记录唯一的有效手段。\n>\n> 比如希望点赞数不重复被记录，那么就可以将帖子Id和用户Id组成一个唯一索引，确保一个用户只能对一个帖子点赞一次。\n\n在 InnoDB 中唯一索引还会导致一些另外的问题，有好也有坏，但影响其实都不大，仅做了解：\n\n1. 首先等值查询时，如果查找字段有唯一索引，那么查询到一条记录就会返回，而非唯一索引会顺着链表继续查询到一条不相等的记录。\n2. 在插入或者修改数据的时候，InnoDB 的 Change Buffer 可能有效的减少随机读操作，而唯一索引无法使用该特性，因为在修改或者插入前都需要判断是否唯一\n\n\n\n> Q：什么是 Change Buffer？\n\nChange Buffer 早期又称为 Insert Buffer，在数据插入时生效，后面扩展到数据的修改。\n\nChange Buffer 主要优化非唯一辅助索引的维护成本。\n\n在涉及到数据修改时，如果记录所在数据页在内存中则直接修改，如果不在可能需要先加载再修改，此时这个加载过程就是随机读的过程，相对于顺序读而言随机读的效率低了不止一点点。\n\n所以在修改的时候，InnoDB 会把这些更新操作缓存到 Changge Buffer 中，日志正常保存，即使宕机也能根据日志恢复。\n\n保存在 Change Buffer 的数据在下一次读取到数据页时合并，也就是 Merge 过程。\n\n\n\n#### 前缀索引\n\n前缀索引是指在一个长字符串字段中，可以选取其中N字节长度的前缀作为索引。\n\n> 长字符串的索引除了使用前缀索引，还可以直接独立一个字段做hash，搜索会更加全面。\n\n\n\n\n\n### 索引使用的相关算法\n\n#### 最左前缀匹配\n\n最左前缀匹配在联合索引中是一个非常重要的概念，**就是依据左前缀判断是否可以使用该索引。**\n\n> 简单的例子，联合索引[a,b,c]，可是使用该索引的查询条件是[a]，[a,b]，[a,b,c]，但是绝对不包括[b,c]等不以a开头的查询条件\n\n本质上来说，联合索引在 InnoDB 中的数据结构仍然是一棵 B+ 树，并且索引节点保存以声明顺序所表示的索引数据。\n\n> 例如[a,b,c]，在索引树中的排序就是先按照a排序，a相同按照b排序，b相同按照c排序。\n>\n> ！！！利用索引有序的结构，可以完美的优化查询语句中的排序，但是在联合索引中，如果搜索条件是[a,b]并且按照b排序就不会出现文件排序，因为在a相同时，b本身就是有序的。\n>\n> 但是在搜索条件为[a,c]时，当a相同时，c并非有序，所以查询会出现 file sort。\n\n#### 覆盖索引\n\n覆盖索引是指在索引树中的内容已经包含了需要查找所需要所有字段，所以可以直接返回而跳过回表。\n\n> 回表可以简单理解为使用二级索引查询获得主键之后，为了获得更多的数据而需要再一次扫描主键索引树。\n>\n> ！！一般来说扫描二级索引树获得的主键，会返回给 Server 层，由 Server 再次发起查询。\n\n有些时候大量的回表会导致查询的效率十分低下，此时适当冗余索引字段也不失为一个好办法。\n\n#### 索引下推\n\n索引下推是在 MySQL 5.6 引入的对索引使用方式的优化，在次级索引树的遍历过程中，尽量多的使用索引树中的字段。\n\n> 在5.6之前，[a,b,c]索引查询[a,c]，只能使用到a字段，c字段就需要回表之后判断，如果a的筛率不高就会有大量的回表，\n>\n> 而在5.6以后，c字段也能下推判断，进一步的判断也减少了回表的记录数，加快了查询速度。\n\n#### 索引联合\n\n索引联合了解的不多，在使用or的等值查询过程中可能会用到索引联合，搜索两棵索引树在做值的整合，相当于 union all 吧。\n\n\n\n\n\n> 虽然索引有这好那好，但是走哪个索引还是依据优化器的，优化器也是根据抽样统计信息的，偶尔也可能出错。\n\n\n\n\n\n### 建立索引的思考\n\n1. 联合索引的字段排序（a，b，c 的联合索引，b 相对于 a 有序，c 相对于 b 有序，如果需要以a排序就可以建立（b，c，a 或者 c，b，a）索引，消除排序\n2. 字段的区分度（比如 sex，存它干嘛呢，撑死了三个值\n3. 实用程度（？，有些使用频率低的 SQL，可能并不需要特定的索引，索引也需要消耗一定的空间，并且降低更新和插入的效率。\n\n\n\n\n\n## MySQL Log（日志\n\n\n\nMySQL 中存在多种日志，比如 **binlog ，redo log 以及 undo log。**\n\nredo log 和  undo log 属于 InnoDB 层的日志，而 binlog 属于 MySQL Server 层的日志。\n\n\n\nbinlog 主要用于主从复制，数据归档（可以单独根据 binlog 实现数据恢复，但不能保证 crash-safe\n\nredo log 和 undo log 共同实现原子性，在正常的回滚下可能仅仅需要 undo log 来进行行记录的回滚，但是如果是经过 crash 则需要 redo log 来判断事务是否已经提交。\n\nundo log 在 InnoDB 中另外实现了 MVCC。\n\n\n\n### binlog（归档日志\n\n binlog 属于归档日志，在 MySQL 中属于 Server 层日志， **MySQL 中所有的存储引擎都会记录该日志。**\n\nbinlog  记录了所有的**数据库变更操作**，包括 UPDATE，INSERT，DELETE，也包括表结构的修改 ALTER TABLE 等。\n\n\n\n**binlog 的主要作用是 1. 主从复制  2. 数据归档（奔溃后的适度恢复）。**\n\n但是 binlog 并不能提供 crash-safe 的保证。\n\n\n\n#### 日志格式\n\n**binlog 有如下三种格式：**\n\n1. statement\n\nstatement 完整的保存执行的语句，但是因为 now() 等即时函数的存在复制的异常，所以用于复制的情况下会出现异常。\n\n1. row\n\n**row 记录的是表中数据 完整的变更，比如 now() 就会直接记录当前时间，数据较为准确，不会受语句上下文环境的影响**\n\n但是相对的日志文件会比较大，因为 statement 一个删除语句，row 会保存所有的行记录。\n\n1. mixed\n\nmixed 基本上就是混合两种的情况。\n\n\n\n\n\n#### 相关配置\n\n再说两个 binlog 相关的主要配置：\n\n1. binlog_cache_size\n\n该值表示在 MySQL 中 binlog 缓冲区的大小，用于缓存事务产生的 binlog。\n\n**binlog cache 是线程私有的，不同线程之间不共享缓冲区。**\n\n因为一个事务中可能涉及多个更新语句，并且多个更新语句不能拆分写入，因此需要单独一个缓冲区。\n\n1. sync_binlog \n\nbinlog 的 fsync 刷盘策略，有如下几种配置形式：\n\n- 0 - 系统自由决定何时刷盘，所有 binlog 只做 write\n- 1 - 每次都需要刷盘\n- n - 每次提交事务都会 write，但是n次的操作之后才会进行刷盘\n\n为0时性能最好，但是如果系统宕机，会丢失未落盘的内容。\n\n\n\n\n\n### redo log（重做日志\n\nredo log 是 InnoDB 的日志，根据 Write Ahead Log（WAL）机制和 force log at commit 机制保证数据的持久性。\n\nWAL（Write Ahead Log ）就是预写日志技术，在 InnoDB 中所有的修改都需要写日志，再做修改内存数据，同时在提交事务的时候也需要先将日志落盘。\n\n所以理论上 redo log 可以单独提供 crash-safe 的保证。\n\n\n\nredo log 中记录的是每次修改的物理日志，即每个数据页的修改（包含主键索引和次级索引。\n\n\n\n#### redo log buffer\n\nInnoDB 中的 redo log 有一个固定的大小的缓冲区，并且首尾相连组成一个环，环上有两个主要的指针: check_point 和 write_pos。\n\n\n\n![img](https://chenqwwq.oss-cn-hangzhou.aliyuncs.com/note/16a7950217b3f0f4ed02db5db59562a7-7940422.png)\n\n\n\n在 write_pos 和 check_point 之间的就是日志的可写范围，如果刷盘不及时导致 write_pos 追上了 check_point，就会开启强制的刷盘（所以在 MySQL 大量写的时候会有瞬间抖动的现象。\n\n另外在 MySQL 的后台线程也会定时刷盘，在正常关闭 MySQL 的时候也会将 redo log 落盘。\n\n\n\n#### redo log 的配置\n\nredo log 的刷盘策略也有参数控制 - **innodb_fluish_log_at_trx_commit**（这个非常非常重要！。\n\n1. innodb_fluish_log_at_trx_commit\n\n该参数为1时，每次的 redo log 都会调用 fsync，真正落盘持久化保存。\n\n\n\n\n\n### undo log（回滚日志\n\nundo log 在 InnoDB 中用于实现 MVCC 和原子性。\n\n\n\nInnoDB 在修改行记录都会带有几个隐藏字段：\n\n1. TRX_ID -  修改的事务Id（事务 Id 由 MySQL 统一下发保证全局唯一并且递增。\n2. ROLL_PTR - 回滚指针，指向旧版本数据，数据行根据指针组成一个单向链表（新 -> 旧\n\n**MVCC 的实现就是在查询的时候沿着 ROLL_PTR 遍历到一个当前事务可见的行记录并返回（因此也存在 undo log 记录太多，导致查询缓慢的问题。**\n\n**原子性的实现就是直接替换当前行记录，修改都是会上锁的所以不存在多个修改并行的情况。**\n\n\n\nundo log 在 5.6 之后记录在单独的表空间，并且使用回滚段作为组织的形式。\n\n> 所以 undo log 并算不上 InnoDB WAL 机制的实现，因为 undo log 自身的持久化都要基于 redo log。\n\nundo log 不会一直存在，当事务提交的时候 undo log 就没有作用了（已经提交了，当前事务不需要回滚了），但是是否要删除还得看对于目前还存活的事务 undo log 是否可用。\n\n最终的删除还是根据后台的 purge 线程决定。\n\n\n\n\n\n### binlog 和 redo log 的 2PC（二阶段提交\n\n**binlog 和 redo log 需要做二阶段提交，保证双方日志的一致性，保证经过 binlog 复制的操作不会丢失或者被回滚。**\n\n之所以要保证一致性的原因是因为 binlog 作为归档日志以及复制功能基础，如果 binlog 已经写入的数据，redo log 回滚，就会导致主从或者恢复前后的数据不一致。\n\n\n\n二阶段提交的流程如下：\n\n1. 准备阶段（Storage Engine（InnoDB） Transaction Prepare Phase）\n\n该阶段生成 XID（事务Id），进入 PREPARED 阶段，此时 binlog 不需要落盘，但 redo log 需要先落盘。\n\n该阶段可能执行多次，每次修改都需要将 redo log 落盘。\n\n1. 提交阶段（Storage Engine（InnoDB）Commit Phase）\n\n如果将事务提交，则将 binlog 落盘，如果回滚则使用 undo log 进行回滚。\n\n1. 完成阶段\n\n事务提交或者回滚都需要看情况清除对应的 undo log。\n\n\n\nbinlog 在 2PC 中充当了事务的协调者（Transaction Coordinator），并且以 binlog 是否写入来判断事务是否成功，使用 XID 建立当前日志之间的对应关系。\n\n在恢复的时候，redo log 检查到最近的 checkpoint，然后查看之后的日志，需要确定事务是否已经提交则通过 XID 找到对应的 binlog 俩判断 commit 状态。\n\n\n\n\n\n### group commit（组提交策略\n\n\n\n[沙尘暴也阻挡不了学习的脚步-- 面试官：你竟然不知道MySQL的组提交](https://www.modb.pro/db/62473)\n\n### checkpoint（检查点\n\n**checkpoint 就是将脏页刷回磁盘的机制。**\n\n当 MySQL 重启后会第一时间定位到最后的 checkpoint，在 checkpoint 之前的数据就不需要做恢复，只需要对其后的数据做恢复（按照 redo log。\n\ncheckpoint 可以分为以下两种：\n\n- Sharp Checkpoint \n\n在当 MySQL 关闭的时候，需要将所有的脏页刷回磁盘，此时 checkpoint 会直接拉到日志最末尾。\n\n- Fuzzy Checkpoint\n\n基本就是刷脏页的触发时机，包含后台定时线程触发，redo log buffer 里 write_point 追上 checkpoint 触发，LRU 空闲页面不够的刷盘。\n\n\n\n### LSN（Log Sequence Number，日志序列号\n\nLSN 表示的就是日志的序号，在 InnoDB 中占8个字节。\n\n表空间中的数据页、缓存页、内存中的 rodo log、磁盘中的 redo log 以及 checkponit 都有LSN标记。\n\n\n\n### 崩溃恢复的流程\n\n\n\n### reference\n\n- [Redo log,Undo log 和 Binlog](https://huzb.me/2019/04/24/redo-undo和binlog/)\n- [详细分析MySQL事务日志(redo log和undo log)](https://www.cnblogs.com/f-ck-need-u/p/9010872.html)\n\n\n\n## InnoDB 特性\n\n\n\n### 一、 Change Buffer（修改缓存\n\nChange Buffer 的主要作用就是**缓存对二级（辅助）非唯一索引的修改**（早期只在 Insert 操作中生效，称为 Insert Buffer。\n\nChanger Buffer 属于日志的一种，在 InnoDB 底层的 Buffer Pool 中会占据一定的空间。\n\n\n\n如果没有 Change Buffer，在一次数据更新中会需要将数据所有的索引树加载到 Buffer Pool 之后再做更新（因为 Redo Log 的存在，所以此时 Buffer Pool 不需要立即刷到磁盘中。\n\n**Change Buffer 会在适当的时候进行 Merge**，例如当索引页被加载到 Buffer Pool 的时候，或者服务空闲的时候，服务关闭之前等等。\n\n\n\nChange Buffer 的机制可以和 redo log 做类比，redo log 减少了随机写的操作，而 Change Buffer 减少了随机读的操作（对于磁盘操作顺序操作比随机操作快了好几倍。\n\n\n\n### 二、Double Write（两次写\n\nInnoDB 的两次写是为了防止部分页刷新的问题。\n\n默认的 InnoDB 内部的 Buffer Pool 的页大小为 16kb，但是系统写文件却大部分以 4kb 为单位，此时可能就出现页数据没有被完全写入就奔溃的情况。\n\nMySQL 在磁盘共享空间中会创建一个 Double Write 的区域用于存放临时数据。\n\n所有的脏数据写入会分为两次，一次写入 Double Write 的磁盘区，而后在将脏页具体刷盘。\n\n\n\n### 三、Flush Neighbor Page（刷新邻接页\n\n刷脏页的时候连带着将附近的一起刷了（处处透露着优化。\n\n\n\n### 四、自适应 Hash 索引\n\nTODO\n\n\n\n\n\n### InnoDB 的内存管理（LRU\n\n\n\n**InnoDB 底层会申请一片的 Buffer Pool 用于保存数据页以及其他数据，默认情况下一页为 16kb（通过 innodb_page_size 控制。**\n\n数据页会根据 LRU 算法进行保存，InnoDB 的 LRU 经过一定的优化，链表将其前 3/8 的部分作为热数据区，后面的属于冷数据区，中间点可以称之为 midpoint。\n\n\n\n![img](https://chenqwwq.oss-cn-hangzhou.aliyuncs.com/note/v2-b1542fa213b5322ed17364411af8cf99_1440w-7940422.jpg)\n\n\n\n读取的新数据并不是直接添加到链表的头部，而是添加到冷区头部，在一定的时间内被访问才会进入到热区。\n\n再次基础上，LRU 还优化了热区的移动逻辑，热区前1/4的数据被访问时不会再被移动（用来减少指针移动带来的锁。\n\n此类优化适合数据库查询相结合的，因为部分查询可能会大量查询到无用的数据页（类似全表扫描），如果一股脑全部填充到首部会将真实的热数据冲散。\n\n#### 页分裂问题\n\nInnoDB 中每张表都要求必须有一个主键Id（没有就隐式生成一个 row_id，并且主键索引就是聚簇索引，因此都是按照主键 Id 的顺序存放的数据。\n\n当前主键 Id 递增时，每次都是在最后一页新增一行数据，如果超出则新申请一页，但当在两个主键中插入一个中间值时，此时如果页面数据也是满的就可能产生页分裂的情况。\n\n页分裂的情况会导致部分数据需要被拷贝到新的数据页，因此也会显著降低插入的效率。\n\n\n\n\n\n## MySQL 锁相关\n\n\n\nMySQL 中的锁需要根据存储引擎的不同来说。\n\n在 MyISAM 中仅仅只有表锁，所有的插入操作都需要事先锁表，而 InnoDB 支持表锁，行锁，甚至多级上锁。\n\n### InnoDB 的基础锁类型\n\nInnoDB 中根据划分依据的不同存在多种不同的锁。\n\n根据锁的粒度，或者说锁的目标来划分，存在以下几种锁：**行锁，表锁，间隙锁。**\n\n根据锁的排他性或者锁的目标行为来划分，存在**写锁和读锁。**\n\n\n\n### 二阶段锁协议\n\n**二阶段锁协议的简单理解就是随机上锁，最终（事务提交）解锁。**\n\n**在 InnoDB 中加锁的过程是根据语句的执行过程慢慢加的。**\n\n> 例如 `INSERT INTO ... SELECT ... FROM` 语句，该语句如果用于迁表，那么就会感觉到上锁的过程是跟随语句的执行过程慢慢发展到锁表。\n\n**而锁的释放是在事务提交之后一次性释放的。**\n\n> 中间可能会有一些优化，类似于 AUTO_INCREMENT 带来的插入锁，会提前释放，并且一些行锁也可能提前释放，但总得来说大部分的锁都还是在事务提交时被释放的。\n\n\n\n### 读锁和写锁\n\n读锁和写锁是锁的两个程度，读锁就是所谓的排他锁，而写锁就是所谓的共享锁。\n\n> Javaer 可以直接联想 ReadWriteLock。\n\n**读锁和读锁之间相互兼容，写锁排斥一切。**\n\n因为 MVCC 的存在，所以 MySQL 的查询一般来说是不会上锁的（因此，就算在写也是可以读到内容，并不是读写相融。\n\n强行上锁可以使用以下语句加锁：\n\n```\n// 读锁\nSELECT * FROM tableName WHERE ... LOCK IN SHARE MODE\n// 写锁\nSELECT * FROM tableName WHERE ...  FOR UPDATE\n```\n\n划分读锁和写锁的意义就在于，让两个读锁可以通知执行，增加并发度（基于 MVCC 的无锁化实现才是性能提升的最大原因。\n\n### 行锁和表锁以及意向锁\n\n根据粒度划分，InnoDB 中存在行锁，也就是对**表中的单行记录上锁**，也有表锁，可以对**整张表上锁**。\n\n> ！！！InnoDB 中并没有真正意义上的表锁，就是直接对表上锁的那种，而是通过行锁+间隙锁的形式锁表。\n>\n> 多粒度的锁也是 InnoDB 的特性之一，MyISAM 就只有表锁。\n\n**对于常规的 CURD 语句，判断行锁还是表锁，简单来看就是是否走索引，不走索引的 CRUD 语句都会经过一个全表扫描的过程，扫描过程中慢慢的就会锁表。**\n\n\n\nInnoDb 支持多粒度上锁，即表锁和行锁，如果表锁和行锁都为读锁，那也不会冲突，而如何在上表锁的时候判断是否在表中存在行锁就会出现问题，总不能扫表来判断是否有锁吧，此时就出现了意向锁。\n\n**意向锁是为了兼容多粒度的锁而设计的**，在上读锁的同时会给对应的表上读的意向锁，此时上写的表锁会被意向锁卡住。\n\n### GAP 锁\n\n**GAP 锁的锁定目标就是两个索引记录之间的区域（左开右闭）**，GAP 锁的目的就是为了防止其他的事务在间隙（GAP）范围内插入数据。\n\n**GAP 锁是共享锁**，也就是说两个事务可以同时对相同的 GAP 上锁（咩有写的 GAP 锁。\n\nGAP 锁仅仅在 RR 级别下生效。\n\n\n\n### Next-Key Lock\n\nNext-Key Lock 就是**行锁和 GAP 锁的结合**，GAP 锁锁定的是命中的索引记录之前的间隙。\n\nNext-Key Lock 的存在使 InnoDB 在 RR 级别下面就可以解决幻读问题。\n\n\n\n### 死锁\n\n死锁出现的情况就是互相持有对象需要的锁。\n\n> 例如，持有A资源，等待B资源的线程和持有B资源，等待A资源的线程会造成死锁。\n\n死锁的必要条件：\n\n1. 资源互斥 - 只有一个对象可以使用资源\n2. 占有等待 - 在等待另外的资源期间，已有资源并不会释放\n3. 不可强占 - 资源不可强行剥夺，即无法强行获取别的所持有的资源\n4. 循环等待 - 若干对象循环持有对方所需要的资源\n\n\n\n如何避免死锁（减少死锁的发生：\n\n1. 缩小事务范围\n\n> MySQL 的上锁是逐步的，扫描索引树的时候逐步上锁，并且在事务提交的时候才会释放，所以缩小事务范围可以有效减少死锁的发生。\n>\n> 因为事务的解锁统一在事务的提交的时候，所以即使不同表的更新也会造成死锁。\n\n1. 尽量使用主键索引更新语句\n\n> 避免对索引树的扫描导致一次更新覆盖太多的行。\n\n1. 以相同的顺序更新\n\n> 死锁的原因是在更新多条记录的时候，互相持有部分记录的锁（单条记录的更新不会有死锁的问题。\n>\n> 所以将更新的顺序改为一致就可以解决死锁的问题，改死锁为等待（同个事务下更新的执行可以认为是无关先后顺序的，都是在提交的一刻生效。\n>\n> 对应的场景有 IM 中群聊会话的更新。\n\n\n\n### rference\n\n- [浅谈数据库并发控制 - 锁和 MVCC](https://draveness.me/database-concurrency-control/)\n- [史上最全的select加锁分析(Mysql)](https://www.cnblogs.com/rjzheng/p/9950951.html)\n\n\n\n\n\n## 排序算法\n\nMySQL 中的排序算法包括三种：\n\n1. 全字段排序\n\n全字段排序就是将全部需要的字段放入 sort_buffer 统一排序后返回。\n\n1. rowId 排序\n\n在排序内容较多的时候，可能仅使用 rowId + 排序字段进行排序，然后回表查询另外的内容。\n\n此时的效率可能非常低，因为先根据筛选字段查询 rowId 以及 排序字段（此时可能已经经过一次回表，而排序结束之后可能再次使用 rowId 进行二次回表。\n\n1. 索引树排序\n\nMySQL 索引本身就是有序的，因此如果排序条件满足索引（最左匹配原则，则可以直接使用索引中的顺序。\n\n\n\nexplain 的 Extra 字段中可能出现 filesort 标记，表示出现额外排序（并不一定是磁盘排序。\n\n\n\n相关的还有分页问题，大数据量分页的时候可能会非常的慢，因为例如 limit 1000000,1000002; 此时会将 1000002 的数据全部先排序然后在选去后两条。\n\n此时的优化应该减少待排序内容，使用索引或者子查询。\n\n\n\n\n\n\n\n## 联表查询算法\n\n\n\n联表查询包含如下几种形式：\n\n1. 全连接/内连接查询\n\n全链接查询最后的数据集只会保存驱动和被驱动表都匹配的数据。\n\n例如 select * from a,b where a.id = b.id。\n\n此时 a 和 b 的 id 在对方表中无匹配项的就不会被返回。\n\n1. 左连接查询\n2. 右连接查询\n\n\n\n> 普通的 A join B，会是 MySQL 自行选择驱动表，而使用 A straight_join B，会固定 A 为驱动表。\n>\n> 驱动表可以简单理解为先查询的数据表，会根据驱动表的数据去匹配被驱动表。\n\n\n\n**联表查询的时候应该是小表作为驱动，小表的判断依据是单个表执行完 WHERE 语句之后剩余的数据集。**\n\n\n\n### Index Nested-Loop Join\n\nTODO\n\n### Simple  Nested-Loop Join\n\nTODO\n\n### Block Nested-Loop Join\n\nTODO\n\n\n\n### 相关参数\n\n|      参数名      |                           参数作用                           |\n| :--------------: | :----------------------------------------------------------: |\n| join_buffer_size | join buffer 的大小（在合适的范围之内，Join Buffer 肯定是越大越好 |\n|                  |                                                              |\n|                  |                                                              |\n\n\n\n## 分页算法\n\nTODO\n\n\n\n\n\n## Master-Slave Replication（主从复制\n\n\n\n![img](https://chenqwwq.oss-cn-hangzhou.aliyuncs.com/note/a66c154c1bc51e071dd2cc8c1d6ca6a3-7940422.png)\n\n（还是 MySQL 45讲里面的图片。\n\n### 复制的作用\n\n1. 多机备份，数据安全性保证（在单机突然爆炸的情况下也能保证数据安全\n2. 读性能的水平扩展（主从分离之后，可以将读写进一步分离\n3. 数据的异步化处理（例如阿里 canal，可以监听 binlog 用来进一步处理\n\n\n\n### 基本复制流程\n\nMySQL 的主从复制是基于 Server 层的 binlog 实现的复制功能（可以类比于 Redis 的复制，binlog 转成 Redis 的复制缓冲区。\n\n在 master 接收到 slave 传递的 start slave 指令后就开始复制过程，此时 slave 需要指定 binlog 的日志偏移量。\n\n复制过程主要涉及的有以下几个线程（线程池）：\n\n1. Dump Thread\n\nmaster 侧的线程，负责从 binlog 中读取日志记录并推送到 Slave，注意读取的是 binlog 的磁盘文件（binlog 的缓存区是线程私有的也读取不到。\n\nmaster 会为每个从节点创建一个 Dump Thread，从不同的起始点开始读取日志文件（因此一主多从多架构对主的要求很高。\n\n1. I/O Thread\n\nslave 侧的线程，负责接收从 master 请求来的日志数据，并写入 relay log（relay log 就是中转日志，负责缓存从 master 接收的日志数据。\n\n1. SQL Thread Group\n\n旧版本的 MySQL 可能就是单个线程，在5.?之后变成了线程组，但是因为 SQL 语句可能存在上下文语境，因此并发执行需要额外判断。\n\n该线程组用来执行从 relay log 解析出来的 SQL 语句。\n\n\n\n和 Redis 不同的是，MySQL 支持 Master-Master（主主）架构，此时需要双方各自指定自身的 server_id 防止日志的无限复制。\n\n另外的 MySQL 还支持级联复制，Slave 可以复制 Slave 节点的数据，主节点只需要创建一个 Dump Thread 去扩散日志，其他的从节点都从一级从节点复制。\n\n\n\n\n\n### Replication Model（复制模式\n\n复制模式可以对比 Kafka 的 asks 参数策略，不同的模式反映了不同的一致性和安全性保证。\n\n\n\n#### Async-Model（异步模式\n\n异步模式下，master 不会主动推送 binlog 到从节点，在接收到客户端的 SQL 以后，本地执行完毕就会返回结果，并不会关心从库是否已经接收。\n\n该情况下，master 和 slave 可能存在明显的时间延迟，导致读写不一致，并且在 master 宕机之后如果以 slave 为新 master，可能出现数据丢失的情况。\n\n\n\n#### Semi-Sync（半同步模式\n\n半同步模式下，master 节点在执行完 SQL 之后会等待至少一个从库确定接收到对应 binlog 信息后才会返回结果。\n\n此时写的性能至少延迟两个 TTL，并且写得性能完全看最快的节点。\n\n \n\n#### Sync（全同步模式\n\n全同步模式则是进一步强化复制过程，需要全部的 slave 都已经复制 binlog 才会返回。\n\n\n\n### GTID 模式\n\nGTID 模式是对复制进度的表示优化，之前的流程中 slave 需要指定 binlog 的复制偏移量来获取之后的日志，但是这个比较难以界定（鬼知道我最后一条日志在 binlog 的哪里），不仅难找而且容易遗漏，所以就出现了 GTID 模式。\n\nGTID 就是 Global Transaction Identifier 即全局事务 Id，此时每个在主库上执行的事务都会指定一个唯一的 ID（全局递增，GTID 的组成由 server_id 和 transaction_id）。\n\nGTID 模式下，通过 GTID 代替了之前的 binlog 偏移量，可以清楚的界定出复制的进度，在事务提交的过程中也会一起记录，在 SQL 线程回放的过程中也会对比本地的 binlog 判断是否已经执行保证 SQL 复制的幂等性。\n\n\n\n\n\n### reference\n\n- [MySQL 主从复制原理不再难](https://www.cnblogs.com/rickiyang/p/13856388.html)\n- [【MySQL】主从复制实现原理详解](https://blog.nowcoder.net/n/b90c959437734a8583fddeaa6d102e43)\n\n## Explain 分析\n\n\n\n> Explain 是 MySQL 中常规的 SQL 解析工具，能展示出SQL的部分执行逻辑和过程。\n>\n> 分析 Explain 的输出就能帮助我们优化和改进 SQL 语句。\n\n### 示例\n\n```\nmysql> explain select * from servers;\n+----+-------------+---------+------+---------------+------+---------+------+------+-------+\n| id | select_type | table   | type | possible_keys | key  | key_len | ref  | rows | Extra |\n+----+-------------+---------+------+---------------+------+---------+------+------+-------+\n|  1 | SIMPLE      | servers | ALL  | NULL          | NULL | NULL    | NULL |    1 | NULL  |\n+----+-------------+---------+------+---------------+------+---------+------+------+-------+\n1 row in set (0.03 sec)\n```\n\nexplain 用于展示 SQL 语句的执行计划，可以将其作为 SQL 优化的辅助工具。\n\n主要关注的几个字段如下：\n\n### possible_keys\n\n可能选择索引名称。\n\n这里会将表结构中可以用到的所有索引列出，然后从中选择效率最高的执行（可能选择错误）。\n\n\n\n如果 possible_keys 为空，表示没有任何索引可以使用，所以都会作全表扫描处理。\n\n### key / key_len\n\n最终选择的索引，以及索引的长度。\n\nkey_len 肯定是越小越好，类型上 int 的匹配优于字符串匹配。\n\n### rows \n\n扫描行数。\n\n每个查询语句可能扫描的记录行数，InnoDB 中该行数只是一个粗略值（经抽样统计得出）。\n\n### extra\n\n额外信息，表示为了完成查询 MySQL 需要做的额外的事情（这里是不是指的 Server 层需要做的事情。\n\n|       额外信息        |                           出现含义                           |                如何解决                |\n| :-------------------: | :----------------------------------------------------------: | :------------------------------------: |\n|      using where      |                表示在 Server 层需要额外的判断                | 一般来说不需要关心，不会太影响查询效率 |\n|      using index      | 只需要读取索引文件就可以获取全部的数据，而不需要读取数据文件，表示不需要进行回表，或者直接使用索引覆盖。 |                   可                   |\n|    using filesort     |             需要进行额外排序（不一定包含文件排序             |   可以利用联合索引的相对顺序避免排序   |\n| using_index_condition |                        使用了索引下推                        |                                        |\n|                       |                                                              |                                        |\n\n[MySQL - explain output format](https://dev.mysql.com/doc/refman/5.6/en/explain-output.html)\n\n\n\n## Q & A\n\n\n\n\n\n### InnoDB 和 MyISAM 的区别:\n\n\n\n|                            InnoDB                            |          MYSQL           |\n| :----------------------------------------------------------: | :----------------------: |\n|                           支持事务                           |        不支持事务        |\n| 聚簇索引（主键索引就是聚簇索引，所以必须包含主键，没有就帮你隐式创建一个 | 非聚簇索引（可以没有主键 |\n|          count 需要扫索引树（有 MVCC 也没法记准确的          |   会在表中记录当前行数   |\n|                    支持外键（虽然没啥卵用                    |        不支持外键        |\n|                多级锁机制（行锁，表锁，Gap 锁                |     表锁（一个烂的摆     |\n\n\n\n\n\n### 如果解决深度分页问题？\n\n\n\n\n\n### 索引失效的常见情况\n\n|     索引失效的情况     |                           失效原因                           |\n| :--------------------: | :----------------------------------------------------------: |\n| **索引列**存在函数调用 | 注意是对索引列的函数，对索引的函数操作可能会影响索引的有序性 |\n|     隐式的类型转换     | 和上条类似，MySQL 中通常也是使用函数来进行类型转换（在 MySQL 中，字符串和数字做比较的话，是将字符串转换成数字。 |\n|     不满足最左前缀     |                   如果存在索引下推勉强能用                   |\n|       左模糊匹配       | 类似 LIKE %XX，对于字符串类型，索引的顺序是按照字典序排列的，因此左模糊匹配也会 |\n\n\n\n索引的原理就是按照有序性进行二分（一次性排除大量数据无用数据），所以在改变了有序性之后索引失效就是理所当然的。\n\n\n\n\n\n## Reference\n\n- [官方文档](https://dev.mysql.com/doc/refman/5.6/en/preface.html)\n","source":"_posts/MySQL.md","raw":"---\ntitle: MySQL 复习总结（残酷学习版\nindex_img: https://chenqwwq.oss-cn-hangzhou.aliyuncs.com/note/assets/image-20220322%E4%B8%8B%E5%8D%8844525458.png\nbanner_img: https://chenqwwq.oss-cn-hangzhou.aliyuncs.com/note/assets/image-20220322%E4%B8%8B%E5%8D%8844525458.png\nexcerpt: MySQL 重要知识点整理，包含事务，索引，锁，日志，主从等\ndate: 2022-03-18 11:24:35\ncategories:\n- 数据库\ntags:\n- MySQL\n---\n\n# MySQL（残酷学习版\n\n[TOC]\n\n## MySQL 的整体架构\n\n\n\n![MySQL整体架构](https://chenqwwq.oss-cn-hangzhou.aliyuncs.com/note/MySQL%E7%9A%84%E6%95%B4%E4%BD%93%E6%9E%B6%E6%9E%84-7940422.png)\n\n\n\n### 连接器\n\n连接器就是负责管理连接的，包括权限验证等等流程，因为连接是 TCP 的可能还包括连接状态的维护。\n\n\n\n### 分析器\n\n分析器的作用是对 SQL 进行词法分析，语法分析，抽出 BST，并交给后续的组件。\n\n\n\n### 优化器\n\n**优化器是 MySQL 中对 SQL 语法的分析器以及索引的选择器，会根据解析出进来的 SQL 语句结合索引以及取样数据选择索引。**\n\n因为其中还包含数据的影响，所以即使符合最左前缀匹配也无法 100% 确定是否真的会走索引。\n\n例如，如果优化器根据数据推测全表扫描的速度大于走索引再回表的速度，那么就会直接放弃索引。\n\n\n\n### 执行器\n\n执行器就相当于是一个调度器，会根据表选择的存储引擎调用不同的存储引擎的接口。\n\n执行器对于上层的优化器屏蔽了底层不同存储引擎带来的查询语法上的差异性。\n\nMySQL 的存储引擎是可插拔式的，在创建表的时候就可以使用不同的存储引擎。\n\n\n\n早期的 MySQL 还会有查询缓存层，但是在4.x版本中就已经被删除了。\n\n> Q: 为什么要删除查询缓存？\n\n查询缓存是以查询语句为 Key，作为命中的要求，所以命中率并不会高，而且大量的缓存在业务逻辑层实现灵活性更高，更加可控，也就实在没必要在数据库中增加缓存机制。\n\n\n\n\n\n## MySQL Transaction（事务\n\n事务的特性有如下四种，**原子性（Atomicity），一致性（Consistency），隔离性（Isolation），持久性（Durability）**。\n\n\n\n原子性指的是事务的操作作为一个不可再分的整体，**要不同时完成要不同时失败**。\n\n隔离性指的是**多个事务并发执行的时候，互相之间的可见性**，多个事务之间互相干扰的情况。\n\n> 隔离性并不是说强制的完全不能看到，类似 InnoDB 提供了多种的隔离级别，低级别隔离也有使用场景。\n\n持久性好理解，**就是保证数据不丢失，在事务提交之后，事务造成的变更就是永久性的。**\n\n一致性指的是事务执行的前后，数据库中的数据都处于一种稳定状态，可能不太好理解，简单举例可以参考转账的操作，转账前后总额是不会增加的。\n\n\n\n\n\n### InnoDB 下事务的隔离级别\n\nMySQL InnoDB 中提供了四种隔离级别：\n\n- READ UNCOMMITTED 读未提交\n- READ COMMITED 读已提交\n- REPEATABLE READ 可重复读（Default）\n- SERIALIZABLE  序列化\n\n\n\n四种隔离级别分别解决了不同的并发问题：\n\n| 隔离解别            | 脏读 | 不可重复读 | 幻读            |\n| ------------------- | ---- | ---------- | --------------- |\n| Read Uncommitted    | Y    | Y          | Y               |\n| Read Committed      | N    | Y          | Y               |\n| Repeatable(default) | N    | N          | Y（InnoDB - N） |\n| Serializable        | N    | N          | N               |\n\n> 简单理解一下这三种并发问题：\n>\n> **脏读（读未提交），事务读取到了其它事务中未提交的数据。**\n>\n> **不可重复读，事务前后多次读取内容不一致。**\n>\n> **幻读，事务前后多次读取总量不一致。**\n\n\n\n**RC  解决脏读依靠的就是锁和MVCC。**\n\n> MVCC 在 InnoDB 的 RR 和 RC 级别下表现是不一样的，RR 级别下，MVCC 以第一次 SELECT 查到的数据为主不会再创建新的快照，但是 RC 级别下，MVCC 机制每次都会创建新的快照，所以也会存在前后数据不一致的情况。\n\n\n\n### InnoDB 中 ACID 的实现\n\n首先是原子性，**InnoDB 使用 Undo Log 实现了原子性**，基本原则就是在失败之后回滚之前的操作。\n\n> InnoDB 的 Undo Log 会根据数据行的版本指针组成一个链表，回滚时可以根据链表向上追溯。\n\n**隔离性，InnoDB 的隔离性是依靠 MVCC 和 锁来实现的。**\n\nInnoDB 中提供了多种不同的隔离级别，每个隔离级别使用不同类型的锁和 MVCC 表现形式来支持隔离性。\n\n> 锁定义了事务并发时访问权限，MVCC 减少了部分上锁的情况（主要还是增加性能。\n\n**持久性，InnoDB 中的持久性是依靠的 redo log 以及 undo log 实现的。**\n\n> 并说不清为什么还需要 undo log，但是因为 WAL 机制，redo log 是在数据修改前就已经持久化的，在事务提交的时候可以保证 redo log 已经落盘了，大部分情况下 redo log 就已经能保障数据的持久性了。\n\n一致性... emmm 不太清楚，应该是其他的东西一起保证的。\n\n\n\n### InnoDB 中的MVCC（多版本并发控制）\n\nMVCC（**Multi-Version  Concurrency Control**） 在我看来是 InnoDB 中一个非常重要的特性，很大程度上提高了 MySQL 的并发性能。\n\nMVCC 机制在数据行中保留了多版本的数据，使用数据行隐藏字段 roll_pointer（回滚指针）串联起一个版本链，可以顺着版本链回滚数据行。\n\n> 因为是链是逐个遍历直到找到当前事务可以看到的数据行，所以当链很长的时候可能会拖慢查询。\n\n基于 MVCC，InnoDB 引入了一个快照读的概念，相对应的还有当前读，快照读指的是当前查询语句读取的是快照的内容，当前读读取的就是当前的真实数据。\n\n> 这里的快照不同于 Redis 的 RDB，是基于隐藏字段 trx_id 实现的可读范围标识。 \n\n\n\nInnoDB 的行记录包含了两个隐藏字段：\n\n| 字段名       | 含义                                 |\n| ------------ | ------------------------------------ |\n| trx_id       | 事务Id，由存储引擎统一下发，确保递增 |\n| roll_pointer | 回滚指针                             |\n\n回滚指针指向的是当前行上次的数据，以此形成一个版本链，如果需要回滚到最先版本的数据，需要顺着 roll_pointer 一直往上。\n\n\n\n**MVCC 根据 trx_id 的大小界定出可见范围。**\n\n事务开始时，会额外保存当前最大和最小的 trx_id，并且保存当前未提交的事务 trx_id 数组。\n\n> 这里的事务开始是指第一次查询，而非 start tran。\n\n小于最小的 trx_id 标识已经提交，所以可见，大于最大的 trx_id 表示开始时还未开启，所以不可见。\n\n如果在中间，则判断 trx_id 数组是否包含来标识是否可读。\n\n\n\n\n\n**MVCC 特性仅仅在 RC 和 RR 级别下生效，**并且在两个级别下的表现形式不同。\n\n**在 RC 级别下，每次查询都会创建一个快照，而在 RR 级别下，只有第一次查询会创建一个快照。**（Important\n\n> 这就导致了事务的表现不同。\n>\n> 在 RC 级别下，事务可以查看到别的事务已经提交的数据，这样就造成了不可重复读，也无法避免脏读。\n>\n> 而在 RR 级别下，事务只会以第一次查询语句为准创建快照，所以 RR 级别下不会出现所谓的不可重复读问题。\n\n\n\n \n\n### 参考文档\n\n- [相见恨晚，MVCC 这么理解，早就通关了](https://mp.weixin.qq.com/s/dMErouLlrte84Nmb97MkTQ)\n- [『浅入深出』MySQL 中事务的实现](https://draveness.me/mysql-transaction/)\n\n\n\n## MySQL Index（索引\n\n索引就是用来加速查询速度的特殊结构。\n\n\n\n### InnoDB 中的索引结构\n\n**常见的索引结构有B+树，B树或者 Hash 索引，倒排索引**。\n\n> InnoDB 中以B+树为主，存在自适应 Hash索引，提供特殊形式的查询优化。\n\n<bf>\n\nB+ 树就是平衡的搜索树，可以简单理解为是二叉搜索树（BST）或者二叉平衡树（AVL）的变种。\n\nAVL **就是任意节点左右子树的高度差不超过1的树，**为了维持这种特性需要大量的旋转操作（添加最多旋转两次，但是删除最多需要 Lg(N)，并且随着深度的增加搜索的效率也会慢慢降低，在动辄千万亿万的数据的数据库中，二叉搜索树明显是不合适的。\n\nM 阶的B+树，根节点的节点数为[2,M]，索引节点的节点数为[M/2,M]，**而且保证了数据的有序性质**，所以层次更低，查询速度更快也更平稳。\n\n> 因为B+树数据有序性的特点，所以如果不使用单调递增的索引键，在插入和删除操作时候就会存在页分裂和页合并的问题，十分影响效率。\n\n\n\nB 树和 B+树 的区别如下：\n\n1. B+ 树的所有数据都在子节点中，这样的**查询更加稳定**，所有的查询都需要树高度次的查询。\n2. B+ 树所有的子节点**组成一个链表**，这样非常便于**实现范围查询**。\n\n相对于 B 树和 Hash 来说，B+树更加符合磁盘的特性。\n\n\n\n> 为什么说 B+ 树更加符合磁盘特性呢？\n\n相比于 Hash 来说，B+ 树的层级更低（往往只有三四层，对于 B+ 树的存储来说，往往一个节点就是一个数据页，因此正常情况下 3～4 次磁盘 IO 就可以获取到想要的内容，并且 B+ 树将所有的叶子节点连成链，更加适合范围查询。\n\n相比于 B 树，除去叶子节点成链不说，B+ 树的非叶子节点不保存数据，具有更稳定的查询效率，B 树虽然在某些查询中可以更快速，但是整体查询并不稳定，读取同样大小的索引页 B+ 树有更多的索引项。\n\n\n\n> MySQL 为什么不使用 Hash 表或者跳表作为索引实现？\n\nHash 表只适合等值查询，几乎无法做范围查询。\n\n\n\n> 为什么不使用跳表的原因如下：\n\nMySQL 的主要数据还是保存在磁盘中，相对于跳表，B+ 树更加适配磁盘的特性，每个索引块可以保存在一个盘页。\n\n（以 Redis 为例，如果纯内存的数据库跳表应该和 B+ 树访问速度差不多。\n\n\n\n### 索引分类\n\n#### 聚集索引和非聚集索引\n\n聚集索引并**不是一种单独的索引类型，而是一种数据的存储方式**，在 InnoDB 中，主键索引就是聚集索引，**所有的数据都保存在主键索引的叶子节点中，数据按照主键的顺序排列存储。**\n\nInnoDB 中，主键索引决定了数据的物理存储顺序，应该更能理解主键的乱序插入带来的页分裂等等问题了。\n\n> 如果没有明确定义表的主键，MySQL 也会挑选一个唯一键作为主键，如果没有唯一键则会生成一个 rowId 作为主键。\n\n非聚集索引就是非聚集索引，**和聚集索引相反的它的逻辑顺序和物理的存储顺序就是完全无关的。**\n\nInnoDB 的实现中，次级索引都是非聚集索引，保存的是主键。\n\n> 所以 InnoDB 中存在回表操作，就是在一个索引树中无法完全确定数据是否可用时，先返回主键，查询完整的数据再来判断。\n>\n> 增加单索引中字段，索引下推，索引联合都可以起到减少回表的作用。\n\nMyISAM 中的非聚集索引实现不同，MyISAM 中所有的索引树都是非聚集索引，包括主键在内，保存的都是数据的真实地址。\n\n> MyISAM 和 InnoDB 的不同在这里就有体现：\n>\n> MyISAM 支持没有主键，理论上来说 MyISAM 的主键索引和次级索引没有任何区别。\n>\n> MyISAM 的索引中保存的都是数据地址，而 InnoDB 的次级索引保存的主键。\n\n\n\n#### 稠密索引和稀疏索引\n\n稠密索引会为每一个键值建立一个索引记录，可以i加快查询速度，但是需要更多的空战占用以及维护成本。（类似 MySQL 中的主键索引\n\n稀疏索引不会为每一个键值建立索引，这种索引往往出现在有序的排序中，例如跳表结构就是稀疏索引的典型实现（Mongo 以及 Kafka 都算是稀疏索引，Mongo 的文档可能会缺失某些字段？Kafka 是以时间戳为序间隔一定长度建立索引项\n\n\n\n#### 唯一索引和非唯一索引\n\n唯一索引就是在表内需要保证字段值全局唯一的索引。\n\n> 唯一索引是保证不重复调用或者记录唯一的有效手段。\n>\n> 比如希望点赞数不重复被记录，那么就可以将帖子Id和用户Id组成一个唯一索引，确保一个用户只能对一个帖子点赞一次。\n\n在 InnoDB 中唯一索引还会导致一些另外的问题，有好也有坏，但影响其实都不大，仅做了解：\n\n1. 首先等值查询时，如果查找字段有唯一索引，那么查询到一条记录就会返回，而非唯一索引会顺着链表继续查询到一条不相等的记录。\n2. 在插入或者修改数据的时候，InnoDB 的 Change Buffer 可能有效的减少随机读操作，而唯一索引无法使用该特性，因为在修改或者插入前都需要判断是否唯一\n\n\n\n> Q：什么是 Change Buffer？\n\nChange Buffer 早期又称为 Insert Buffer，在数据插入时生效，后面扩展到数据的修改。\n\nChange Buffer 主要优化非唯一辅助索引的维护成本。\n\n在涉及到数据修改时，如果记录所在数据页在内存中则直接修改，如果不在可能需要先加载再修改，此时这个加载过程就是随机读的过程，相对于顺序读而言随机读的效率低了不止一点点。\n\n所以在修改的时候，InnoDB 会把这些更新操作缓存到 Changge Buffer 中，日志正常保存，即使宕机也能根据日志恢复。\n\n保存在 Change Buffer 的数据在下一次读取到数据页时合并，也就是 Merge 过程。\n\n\n\n#### 前缀索引\n\n前缀索引是指在一个长字符串字段中，可以选取其中N字节长度的前缀作为索引。\n\n> 长字符串的索引除了使用前缀索引，还可以直接独立一个字段做hash，搜索会更加全面。\n\n\n\n\n\n### 索引使用的相关算法\n\n#### 最左前缀匹配\n\n最左前缀匹配在联合索引中是一个非常重要的概念，**就是依据左前缀判断是否可以使用该索引。**\n\n> 简单的例子，联合索引[a,b,c]，可是使用该索引的查询条件是[a]，[a,b]，[a,b,c]，但是绝对不包括[b,c]等不以a开头的查询条件\n\n本质上来说，联合索引在 InnoDB 中的数据结构仍然是一棵 B+ 树，并且索引节点保存以声明顺序所表示的索引数据。\n\n> 例如[a,b,c]，在索引树中的排序就是先按照a排序，a相同按照b排序，b相同按照c排序。\n>\n> ！！！利用索引有序的结构，可以完美的优化查询语句中的排序，但是在联合索引中，如果搜索条件是[a,b]并且按照b排序就不会出现文件排序，因为在a相同时，b本身就是有序的。\n>\n> 但是在搜索条件为[a,c]时，当a相同时，c并非有序，所以查询会出现 file sort。\n\n#### 覆盖索引\n\n覆盖索引是指在索引树中的内容已经包含了需要查找所需要所有字段，所以可以直接返回而跳过回表。\n\n> 回表可以简单理解为使用二级索引查询获得主键之后，为了获得更多的数据而需要再一次扫描主键索引树。\n>\n> ！！一般来说扫描二级索引树获得的主键，会返回给 Server 层，由 Server 再次发起查询。\n\n有些时候大量的回表会导致查询的效率十分低下，此时适当冗余索引字段也不失为一个好办法。\n\n#### 索引下推\n\n索引下推是在 MySQL 5.6 引入的对索引使用方式的优化，在次级索引树的遍历过程中，尽量多的使用索引树中的字段。\n\n> 在5.6之前，[a,b,c]索引查询[a,c]，只能使用到a字段，c字段就需要回表之后判断，如果a的筛率不高就会有大量的回表，\n>\n> 而在5.6以后，c字段也能下推判断，进一步的判断也减少了回表的记录数，加快了查询速度。\n\n#### 索引联合\n\n索引联合了解的不多，在使用or的等值查询过程中可能会用到索引联合，搜索两棵索引树在做值的整合，相当于 union all 吧。\n\n\n\n\n\n> 虽然索引有这好那好，但是走哪个索引还是依据优化器的，优化器也是根据抽样统计信息的，偶尔也可能出错。\n\n\n\n\n\n### 建立索引的思考\n\n1. 联合索引的字段排序（a，b，c 的联合索引，b 相对于 a 有序，c 相对于 b 有序，如果需要以a排序就可以建立（b，c，a 或者 c，b，a）索引，消除排序\n2. 字段的区分度（比如 sex，存它干嘛呢，撑死了三个值\n3. 实用程度（？，有些使用频率低的 SQL，可能并不需要特定的索引，索引也需要消耗一定的空间，并且降低更新和插入的效率。\n\n\n\n\n\n## MySQL Log（日志\n\n\n\nMySQL 中存在多种日志，比如 **binlog ，redo log 以及 undo log。**\n\nredo log 和  undo log 属于 InnoDB 层的日志，而 binlog 属于 MySQL Server 层的日志。\n\n\n\nbinlog 主要用于主从复制，数据归档（可以单独根据 binlog 实现数据恢复，但不能保证 crash-safe\n\nredo log 和 undo log 共同实现原子性，在正常的回滚下可能仅仅需要 undo log 来进行行记录的回滚，但是如果是经过 crash 则需要 redo log 来判断事务是否已经提交。\n\nundo log 在 InnoDB 中另外实现了 MVCC。\n\n\n\n### binlog（归档日志\n\n binlog 属于归档日志，在 MySQL 中属于 Server 层日志， **MySQL 中所有的存储引擎都会记录该日志。**\n\nbinlog  记录了所有的**数据库变更操作**，包括 UPDATE，INSERT，DELETE，也包括表结构的修改 ALTER TABLE 等。\n\n\n\n**binlog 的主要作用是 1. 主从复制  2. 数据归档（奔溃后的适度恢复）。**\n\n但是 binlog 并不能提供 crash-safe 的保证。\n\n\n\n#### 日志格式\n\n**binlog 有如下三种格式：**\n\n1. statement\n\nstatement 完整的保存执行的语句，但是因为 now() 等即时函数的存在复制的异常，所以用于复制的情况下会出现异常。\n\n1. row\n\n**row 记录的是表中数据 完整的变更，比如 now() 就会直接记录当前时间，数据较为准确，不会受语句上下文环境的影响**\n\n但是相对的日志文件会比较大，因为 statement 一个删除语句，row 会保存所有的行记录。\n\n1. mixed\n\nmixed 基本上就是混合两种的情况。\n\n\n\n\n\n#### 相关配置\n\n再说两个 binlog 相关的主要配置：\n\n1. binlog_cache_size\n\n该值表示在 MySQL 中 binlog 缓冲区的大小，用于缓存事务产生的 binlog。\n\n**binlog cache 是线程私有的，不同线程之间不共享缓冲区。**\n\n因为一个事务中可能涉及多个更新语句，并且多个更新语句不能拆分写入，因此需要单独一个缓冲区。\n\n1. sync_binlog \n\nbinlog 的 fsync 刷盘策略，有如下几种配置形式：\n\n- 0 - 系统自由决定何时刷盘，所有 binlog 只做 write\n- 1 - 每次都需要刷盘\n- n - 每次提交事务都会 write，但是n次的操作之后才会进行刷盘\n\n为0时性能最好，但是如果系统宕机，会丢失未落盘的内容。\n\n\n\n\n\n### redo log（重做日志\n\nredo log 是 InnoDB 的日志，根据 Write Ahead Log（WAL）机制和 force log at commit 机制保证数据的持久性。\n\nWAL（Write Ahead Log ）就是预写日志技术，在 InnoDB 中所有的修改都需要写日志，再做修改内存数据，同时在提交事务的时候也需要先将日志落盘。\n\n所以理论上 redo log 可以单独提供 crash-safe 的保证。\n\n\n\nredo log 中记录的是每次修改的物理日志，即每个数据页的修改（包含主键索引和次级索引。\n\n\n\n#### redo log buffer\n\nInnoDB 中的 redo log 有一个固定的大小的缓冲区，并且首尾相连组成一个环，环上有两个主要的指针: check_point 和 write_pos。\n\n\n\n![img](https://chenqwwq.oss-cn-hangzhou.aliyuncs.com/note/16a7950217b3f0f4ed02db5db59562a7-7940422.png)\n\n\n\n在 write_pos 和 check_point 之间的就是日志的可写范围，如果刷盘不及时导致 write_pos 追上了 check_point，就会开启强制的刷盘（所以在 MySQL 大量写的时候会有瞬间抖动的现象。\n\n另外在 MySQL 的后台线程也会定时刷盘，在正常关闭 MySQL 的时候也会将 redo log 落盘。\n\n\n\n#### redo log 的配置\n\nredo log 的刷盘策略也有参数控制 - **innodb_fluish_log_at_trx_commit**（这个非常非常重要！。\n\n1. innodb_fluish_log_at_trx_commit\n\n该参数为1时，每次的 redo log 都会调用 fsync，真正落盘持久化保存。\n\n\n\n\n\n### undo log（回滚日志\n\nundo log 在 InnoDB 中用于实现 MVCC 和原子性。\n\n\n\nInnoDB 在修改行记录都会带有几个隐藏字段：\n\n1. TRX_ID -  修改的事务Id（事务 Id 由 MySQL 统一下发保证全局唯一并且递增。\n2. ROLL_PTR - 回滚指针，指向旧版本数据，数据行根据指针组成一个单向链表（新 -> 旧\n\n**MVCC 的实现就是在查询的时候沿着 ROLL_PTR 遍历到一个当前事务可见的行记录并返回（因此也存在 undo log 记录太多，导致查询缓慢的问题。**\n\n**原子性的实现就是直接替换当前行记录，修改都是会上锁的所以不存在多个修改并行的情况。**\n\n\n\nundo log 在 5.6 之后记录在单独的表空间，并且使用回滚段作为组织的形式。\n\n> 所以 undo log 并算不上 InnoDB WAL 机制的实现，因为 undo log 自身的持久化都要基于 redo log。\n\nundo log 不会一直存在，当事务提交的时候 undo log 就没有作用了（已经提交了，当前事务不需要回滚了），但是是否要删除还得看对于目前还存活的事务 undo log 是否可用。\n\n最终的删除还是根据后台的 purge 线程决定。\n\n\n\n\n\n### binlog 和 redo log 的 2PC（二阶段提交\n\n**binlog 和 redo log 需要做二阶段提交，保证双方日志的一致性，保证经过 binlog 复制的操作不会丢失或者被回滚。**\n\n之所以要保证一致性的原因是因为 binlog 作为归档日志以及复制功能基础，如果 binlog 已经写入的数据，redo log 回滚，就会导致主从或者恢复前后的数据不一致。\n\n\n\n二阶段提交的流程如下：\n\n1. 准备阶段（Storage Engine（InnoDB） Transaction Prepare Phase）\n\n该阶段生成 XID（事务Id），进入 PREPARED 阶段，此时 binlog 不需要落盘，但 redo log 需要先落盘。\n\n该阶段可能执行多次，每次修改都需要将 redo log 落盘。\n\n1. 提交阶段（Storage Engine（InnoDB）Commit Phase）\n\n如果将事务提交，则将 binlog 落盘，如果回滚则使用 undo log 进行回滚。\n\n1. 完成阶段\n\n事务提交或者回滚都需要看情况清除对应的 undo log。\n\n\n\nbinlog 在 2PC 中充当了事务的协调者（Transaction Coordinator），并且以 binlog 是否写入来判断事务是否成功，使用 XID 建立当前日志之间的对应关系。\n\n在恢复的时候，redo log 检查到最近的 checkpoint，然后查看之后的日志，需要确定事务是否已经提交则通过 XID 找到对应的 binlog 俩判断 commit 状态。\n\n\n\n\n\n### group commit（组提交策略\n\n\n\n[沙尘暴也阻挡不了学习的脚步-- 面试官：你竟然不知道MySQL的组提交](https://www.modb.pro/db/62473)\n\n### checkpoint（检查点\n\n**checkpoint 就是将脏页刷回磁盘的机制。**\n\n当 MySQL 重启后会第一时间定位到最后的 checkpoint，在 checkpoint 之前的数据就不需要做恢复，只需要对其后的数据做恢复（按照 redo log。\n\ncheckpoint 可以分为以下两种：\n\n- Sharp Checkpoint \n\n在当 MySQL 关闭的时候，需要将所有的脏页刷回磁盘，此时 checkpoint 会直接拉到日志最末尾。\n\n- Fuzzy Checkpoint\n\n基本就是刷脏页的触发时机，包含后台定时线程触发，redo log buffer 里 write_point 追上 checkpoint 触发，LRU 空闲页面不够的刷盘。\n\n\n\n### LSN（Log Sequence Number，日志序列号\n\nLSN 表示的就是日志的序号，在 InnoDB 中占8个字节。\n\n表空间中的数据页、缓存页、内存中的 rodo log、磁盘中的 redo log 以及 checkponit 都有LSN标记。\n\n\n\n### 崩溃恢复的流程\n\n\n\n### reference\n\n- [Redo log,Undo log 和 Binlog](https://huzb.me/2019/04/24/redo-undo和binlog/)\n- [详细分析MySQL事务日志(redo log和undo log)](https://www.cnblogs.com/f-ck-need-u/p/9010872.html)\n\n\n\n## InnoDB 特性\n\n\n\n### 一、 Change Buffer（修改缓存\n\nChange Buffer 的主要作用就是**缓存对二级（辅助）非唯一索引的修改**（早期只在 Insert 操作中生效，称为 Insert Buffer。\n\nChanger Buffer 属于日志的一种，在 InnoDB 底层的 Buffer Pool 中会占据一定的空间。\n\n\n\n如果没有 Change Buffer，在一次数据更新中会需要将数据所有的索引树加载到 Buffer Pool 之后再做更新（因为 Redo Log 的存在，所以此时 Buffer Pool 不需要立即刷到磁盘中。\n\n**Change Buffer 会在适当的时候进行 Merge**，例如当索引页被加载到 Buffer Pool 的时候，或者服务空闲的时候，服务关闭之前等等。\n\n\n\nChange Buffer 的机制可以和 redo log 做类比，redo log 减少了随机写的操作，而 Change Buffer 减少了随机读的操作（对于磁盘操作顺序操作比随机操作快了好几倍。\n\n\n\n### 二、Double Write（两次写\n\nInnoDB 的两次写是为了防止部分页刷新的问题。\n\n默认的 InnoDB 内部的 Buffer Pool 的页大小为 16kb，但是系统写文件却大部分以 4kb 为单位，此时可能就出现页数据没有被完全写入就奔溃的情况。\n\nMySQL 在磁盘共享空间中会创建一个 Double Write 的区域用于存放临时数据。\n\n所有的脏数据写入会分为两次，一次写入 Double Write 的磁盘区，而后在将脏页具体刷盘。\n\n\n\n### 三、Flush Neighbor Page（刷新邻接页\n\n刷脏页的时候连带着将附近的一起刷了（处处透露着优化。\n\n\n\n### 四、自适应 Hash 索引\n\nTODO\n\n\n\n\n\n### InnoDB 的内存管理（LRU\n\n\n\n**InnoDB 底层会申请一片的 Buffer Pool 用于保存数据页以及其他数据，默认情况下一页为 16kb（通过 innodb_page_size 控制。**\n\n数据页会根据 LRU 算法进行保存，InnoDB 的 LRU 经过一定的优化，链表将其前 3/8 的部分作为热数据区，后面的属于冷数据区，中间点可以称之为 midpoint。\n\n\n\n![img](https://chenqwwq.oss-cn-hangzhou.aliyuncs.com/note/v2-b1542fa213b5322ed17364411af8cf99_1440w-7940422.jpg)\n\n\n\n读取的新数据并不是直接添加到链表的头部，而是添加到冷区头部，在一定的时间内被访问才会进入到热区。\n\n再次基础上，LRU 还优化了热区的移动逻辑，热区前1/4的数据被访问时不会再被移动（用来减少指针移动带来的锁。\n\n此类优化适合数据库查询相结合的，因为部分查询可能会大量查询到无用的数据页（类似全表扫描），如果一股脑全部填充到首部会将真实的热数据冲散。\n\n#### 页分裂问题\n\nInnoDB 中每张表都要求必须有一个主键Id（没有就隐式生成一个 row_id，并且主键索引就是聚簇索引，因此都是按照主键 Id 的顺序存放的数据。\n\n当前主键 Id 递增时，每次都是在最后一页新增一行数据，如果超出则新申请一页，但当在两个主键中插入一个中间值时，此时如果页面数据也是满的就可能产生页分裂的情况。\n\n页分裂的情况会导致部分数据需要被拷贝到新的数据页，因此也会显著降低插入的效率。\n\n\n\n\n\n## MySQL 锁相关\n\n\n\nMySQL 中的锁需要根据存储引擎的不同来说。\n\n在 MyISAM 中仅仅只有表锁，所有的插入操作都需要事先锁表，而 InnoDB 支持表锁，行锁，甚至多级上锁。\n\n### InnoDB 的基础锁类型\n\nInnoDB 中根据划分依据的不同存在多种不同的锁。\n\n根据锁的粒度，或者说锁的目标来划分，存在以下几种锁：**行锁，表锁，间隙锁。**\n\n根据锁的排他性或者锁的目标行为来划分，存在**写锁和读锁。**\n\n\n\n### 二阶段锁协议\n\n**二阶段锁协议的简单理解就是随机上锁，最终（事务提交）解锁。**\n\n**在 InnoDB 中加锁的过程是根据语句的执行过程慢慢加的。**\n\n> 例如 `INSERT INTO ... SELECT ... FROM` 语句，该语句如果用于迁表，那么就会感觉到上锁的过程是跟随语句的执行过程慢慢发展到锁表。\n\n**而锁的释放是在事务提交之后一次性释放的。**\n\n> 中间可能会有一些优化，类似于 AUTO_INCREMENT 带来的插入锁，会提前释放，并且一些行锁也可能提前释放，但总得来说大部分的锁都还是在事务提交时被释放的。\n\n\n\n### 读锁和写锁\n\n读锁和写锁是锁的两个程度，读锁就是所谓的排他锁，而写锁就是所谓的共享锁。\n\n> Javaer 可以直接联想 ReadWriteLock。\n\n**读锁和读锁之间相互兼容，写锁排斥一切。**\n\n因为 MVCC 的存在，所以 MySQL 的查询一般来说是不会上锁的（因此，就算在写也是可以读到内容，并不是读写相融。\n\n强行上锁可以使用以下语句加锁：\n\n```\n// 读锁\nSELECT * FROM tableName WHERE ... LOCK IN SHARE MODE\n// 写锁\nSELECT * FROM tableName WHERE ...  FOR UPDATE\n```\n\n划分读锁和写锁的意义就在于，让两个读锁可以通知执行，增加并发度（基于 MVCC 的无锁化实现才是性能提升的最大原因。\n\n### 行锁和表锁以及意向锁\n\n根据粒度划分，InnoDB 中存在行锁，也就是对**表中的单行记录上锁**，也有表锁，可以对**整张表上锁**。\n\n> ！！！InnoDB 中并没有真正意义上的表锁，就是直接对表上锁的那种，而是通过行锁+间隙锁的形式锁表。\n>\n> 多粒度的锁也是 InnoDB 的特性之一，MyISAM 就只有表锁。\n\n**对于常规的 CURD 语句，判断行锁还是表锁，简单来看就是是否走索引，不走索引的 CRUD 语句都会经过一个全表扫描的过程，扫描过程中慢慢的就会锁表。**\n\n\n\nInnoDb 支持多粒度上锁，即表锁和行锁，如果表锁和行锁都为读锁，那也不会冲突，而如何在上表锁的时候判断是否在表中存在行锁就会出现问题，总不能扫表来判断是否有锁吧，此时就出现了意向锁。\n\n**意向锁是为了兼容多粒度的锁而设计的**，在上读锁的同时会给对应的表上读的意向锁，此时上写的表锁会被意向锁卡住。\n\n### GAP 锁\n\n**GAP 锁的锁定目标就是两个索引记录之间的区域（左开右闭）**，GAP 锁的目的就是为了防止其他的事务在间隙（GAP）范围内插入数据。\n\n**GAP 锁是共享锁**，也就是说两个事务可以同时对相同的 GAP 上锁（咩有写的 GAP 锁。\n\nGAP 锁仅仅在 RR 级别下生效。\n\n\n\n### Next-Key Lock\n\nNext-Key Lock 就是**行锁和 GAP 锁的结合**，GAP 锁锁定的是命中的索引记录之前的间隙。\n\nNext-Key Lock 的存在使 InnoDB 在 RR 级别下面就可以解决幻读问题。\n\n\n\n### 死锁\n\n死锁出现的情况就是互相持有对象需要的锁。\n\n> 例如，持有A资源，等待B资源的线程和持有B资源，等待A资源的线程会造成死锁。\n\n死锁的必要条件：\n\n1. 资源互斥 - 只有一个对象可以使用资源\n2. 占有等待 - 在等待另外的资源期间，已有资源并不会释放\n3. 不可强占 - 资源不可强行剥夺，即无法强行获取别的所持有的资源\n4. 循环等待 - 若干对象循环持有对方所需要的资源\n\n\n\n如何避免死锁（减少死锁的发生：\n\n1. 缩小事务范围\n\n> MySQL 的上锁是逐步的，扫描索引树的时候逐步上锁，并且在事务提交的时候才会释放，所以缩小事务范围可以有效减少死锁的发生。\n>\n> 因为事务的解锁统一在事务的提交的时候，所以即使不同表的更新也会造成死锁。\n\n1. 尽量使用主键索引更新语句\n\n> 避免对索引树的扫描导致一次更新覆盖太多的行。\n\n1. 以相同的顺序更新\n\n> 死锁的原因是在更新多条记录的时候，互相持有部分记录的锁（单条记录的更新不会有死锁的问题。\n>\n> 所以将更新的顺序改为一致就可以解决死锁的问题，改死锁为等待（同个事务下更新的执行可以认为是无关先后顺序的，都是在提交的一刻生效。\n>\n> 对应的场景有 IM 中群聊会话的更新。\n\n\n\n### rference\n\n- [浅谈数据库并发控制 - 锁和 MVCC](https://draveness.me/database-concurrency-control/)\n- [史上最全的select加锁分析(Mysql)](https://www.cnblogs.com/rjzheng/p/9950951.html)\n\n\n\n\n\n## 排序算法\n\nMySQL 中的排序算法包括三种：\n\n1. 全字段排序\n\n全字段排序就是将全部需要的字段放入 sort_buffer 统一排序后返回。\n\n1. rowId 排序\n\n在排序内容较多的时候，可能仅使用 rowId + 排序字段进行排序，然后回表查询另外的内容。\n\n此时的效率可能非常低，因为先根据筛选字段查询 rowId 以及 排序字段（此时可能已经经过一次回表，而排序结束之后可能再次使用 rowId 进行二次回表。\n\n1. 索引树排序\n\nMySQL 索引本身就是有序的，因此如果排序条件满足索引（最左匹配原则，则可以直接使用索引中的顺序。\n\n\n\nexplain 的 Extra 字段中可能出现 filesort 标记，表示出现额外排序（并不一定是磁盘排序。\n\n\n\n相关的还有分页问题，大数据量分页的时候可能会非常的慢，因为例如 limit 1000000,1000002; 此时会将 1000002 的数据全部先排序然后在选去后两条。\n\n此时的优化应该减少待排序内容，使用索引或者子查询。\n\n\n\n\n\n\n\n## 联表查询算法\n\n\n\n联表查询包含如下几种形式：\n\n1. 全连接/内连接查询\n\n全链接查询最后的数据集只会保存驱动和被驱动表都匹配的数据。\n\n例如 select * from a,b where a.id = b.id。\n\n此时 a 和 b 的 id 在对方表中无匹配项的就不会被返回。\n\n1. 左连接查询\n2. 右连接查询\n\n\n\n> 普通的 A join B，会是 MySQL 自行选择驱动表，而使用 A straight_join B，会固定 A 为驱动表。\n>\n> 驱动表可以简单理解为先查询的数据表，会根据驱动表的数据去匹配被驱动表。\n\n\n\n**联表查询的时候应该是小表作为驱动，小表的判断依据是单个表执行完 WHERE 语句之后剩余的数据集。**\n\n\n\n### Index Nested-Loop Join\n\nTODO\n\n### Simple  Nested-Loop Join\n\nTODO\n\n### Block Nested-Loop Join\n\nTODO\n\n\n\n### 相关参数\n\n|      参数名      |                           参数作用                           |\n| :--------------: | :----------------------------------------------------------: |\n| join_buffer_size | join buffer 的大小（在合适的范围之内，Join Buffer 肯定是越大越好 |\n|                  |                                                              |\n|                  |                                                              |\n\n\n\n## 分页算法\n\nTODO\n\n\n\n\n\n## Master-Slave Replication（主从复制\n\n\n\n![img](https://chenqwwq.oss-cn-hangzhou.aliyuncs.com/note/a66c154c1bc51e071dd2cc8c1d6ca6a3-7940422.png)\n\n（还是 MySQL 45讲里面的图片。\n\n### 复制的作用\n\n1. 多机备份，数据安全性保证（在单机突然爆炸的情况下也能保证数据安全\n2. 读性能的水平扩展（主从分离之后，可以将读写进一步分离\n3. 数据的异步化处理（例如阿里 canal，可以监听 binlog 用来进一步处理\n\n\n\n### 基本复制流程\n\nMySQL 的主从复制是基于 Server 层的 binlog 实现的复制功能（可以类比于 Redis 的复制，binlog 转成 Redis 的复制缓冲区。\n\n在 master 接收到 slave 传递的 start slave 指令后就开始复制过程，此时 slave 需要指定 binlog 的日志偏移量。\n\n复制过程主要涉及的有以下几个线程（线程池）：\n\n1. Dump Thread\n\nmaster 侧的线程，负责从 binlog 中读取日志记录并推送到 Slave，注意读取的是 binlog 的磁盘文件（binlog 的缓存区是线程私有的也读取不到。\n\nmaster 会为每个从节点创建一个 Dump Thread，从不同的起始点开始读取日志文件（因此一主多从多架构对主的要求很高。\n\n1. I/O Thread\n\nslave 侧的线程，负责接收从 master 请求来的日志数据，并写入 relay log（relay log 就是中转日志，负责缓存从 master 接收的日志数据。\n\n1. SQL Thread Group\n\n旧版本的 MySQL 可能就是单个线程，在5.?之后变成了线程组，但是因为 SQL 语句可能存在上下文语境，因此并发执行需要额外判断。\n\n该线程组用来执行从 relay log 解析出来的 SQL 语句。\n\n\n\n和 Redis 不同的是，MySQL 支持 Master-Master（主主）架构，此时需要双方各自指定自身的 server_id 防止日志的无限复制。\n\n另外的 MySQL 还支持级联复制，Slave 可以复制 Slave 节点的数据，主节点只需要创建一个 Dump Thread 去扩散日志，其他的从节点都从一级从节点复制。\n\n\n\n\n\n### Replication Model（复制模式\n\n复制模式可以对比 Kafka 的 asks 参数策略，不同的模式反映了不同的一致性和安全性保证。\n\n\n\n#### Async-Model（异步模式\n\n异步模式下，master 不会主动推送 binlog 到从节点，在接收到客户端的 SQL 以后，本地执行完毕就会返回结果，并不会关心从库是否已经接收。\n\n该情况下，master 和 slave 可能存在明显的时间延迟，导致读写不一致，并且在 master 宕机之后如果以 slave 为新 master，可能出现数据丢失的情况。\n\n\n\n#### Semi-Sync（半同步模式\n\n半同步模式下，master 节点在执行完 SQL 之后会等待至少一个从库确定接收到对应 binlog 信息后才会返回结果。\n\n此时写的性能至少延迟两个 TTL，并且写得性能完全看最快的节点。\n\n \n\n#### Sync（全同步模式\n\n全同步模式则是进一步强化复制过程，需要全部的 slave 都已经复制 binlog 才会返回。\n\n\n\n### GTID 模式\n\nGTID 模式是对复制进度的表示优化，之前的流程中 slave 需要指定 binlog 的复制偏移量来获取之后的日志，但是这个比较难以界定（鬼知道我最后一条日志在 binlog 的哪里），不仅难找而且容易遗漏，所以就出现了 GTID 模式。\n\nGTID 就是 Global Transaction Identifier 即全局事务 Id，此时每个在主库上执行的事务都会指定一个唯一的 ID（全局递增，GTID 的组成由 server_id 和 transaction_id）。\n\nGTID 模式下，通过 GTID 代替了之前的 binlog 偏移量，可以清楚的界定出复制的进度，在事务提交的过程中也会一起记录，在 SQL 线程回放的过程中也会对比本地的 binlog 判断是否已经执行保证 SQL 复制的幂等性。\n\n\n\n\n\n### reference\n\n- [MySQL 主从复制原理不再难](https://www.cnblogs.com/rickiyang/p/13856388.html)\n- [【MySQL】主从复制实现原理详解](https://blog.nowcoder.net/n/b90c959437734a8583fddeaa6d102e43)\n\n## Explain 分析\n\n\n\n> Explain 是 MySQL 中常规的 SQL 解析工具，能展示出SQL的部分执行逻辑和过程。\n>\n> 分析 Explain 的输出就能帮助我们优化和改进 SQL 语句。\n\n### 示例\n\n```\nmysql> explain select * from servers;\n+----+-------------+---------+------+---------------+------+---------+------+------+-------+\n| id | select_type | table   | type | possible_keys | key  | key_len | ref  | rows | Extra |\n+----+-------------+---------+------+---------------+------+---------+------+------+-------+\n|  1 | SIMPLE      | servers | ALL  | NULL          | NULL | NULL    | NULL |    1 | NULL  |\n+----+-------------+---------+------+---------------+------+---------+------+------+-------+\n1 row in set (0.03 sec)\n```\n\nexplain 用于展示 SQL 语句的执行计划，可以将其作为 SQL 优化的辅助工具。\n\n主要关注的几个字段如下：\n\n### possible_keys\n\n可能选择索引名称。\n\n这里会将表结构中可以用到的所有索引列出，然后从中选择效率最高的执行（可能选择错误）。\n\n\n\n如果 possible_keys 为空，表示没有任何索引可以使用，所以都会作全表扫描处理。\n\n### key / key_len\n\n最终选择的索引，以及索引的长度。\n\nkey_len 肯定是越小越好，类型上 int 的匹配优于字符串匹配。\n\n### rows \n\n扫描行数。\n\n每个查询语句可能扫描的记录行数，InnoDB 中该行数只是一个粗略值（经抽样统计得出）。\n\n### extra\n\n额外信息，表示为了完成查询 MySQL 需要做的额外的事情（这里是不是指的 Server 层需要做的事情。\n\n|       额外信息        |                           出现含义                           |                如何解决                |\n| :-------------------: | :----------------------------------------------------------: | :------------------------------------: |\n|      using where      |                表示在 Server 层需要额外的判断                | 一般来说不需要关心，不会太影响查询效率 |\n|      using index      | 只需要读取索引文件就可以获取全部的数据，而不需要读取数据文件，表示不需要进行回表，或者直接使用索引覆盖。 |                   可                   |\n|    using filesort     |             需要进行额外排序（不一定包含文件排序             |   可以利用联合索引的相对顺序避免排序   |\n| using_index_condition |                        使用了索引下推                        |                                        |\n|                       |                                                              |                                        |\n\n[MySQL - explain output format](https://dev.mysql.com/doc/refman/5.6/en/explain-output.html)\n\n\n\n## Q & A\n\n\n\n\n\n### InnoDB 和 MyISAM 的区别:\n\n\n\n|                            InnoDB                            |          MYSQL           |\n| :----------------------------------------------------------: | :----------------------: |\n|                           支持事务                           |        不支持事务        |\n| 聚簇索引（主键索引就是聚簇索引，所以必须包含主键，没有就帮你隐式创建一个 | 非聚簇索引（可以没有主键 |\n|          count 需要扫索引树（有 MVCC 也没法记准确的          |   会在表中记录当前行数   |\n|                    支持外键（虽然没啥卵用                    |        不支持外键        |\n|                多级锁机制（行锁，表锁，Gap 锁                |     表锁（一个烂的摆     |\n\n\n\n\n\n### 如果解决深度分页问题？\n\n\n\n\n\n### 索引失效的常见情况\n\n|     索引失效的情况     |                           失效原因                           |\n| :--------------------: | :----------------------------------------------------------: |\n| **索引列**存在函数调用 | 注意是对索引列的函数，对索引的函数操作可能会影响索引的有序性 |\n|     隐式的类型转换     | 和上条类似，MySQL 中通常也是使用函数来进行类型转换（在 MySQL 中，字符串和数字做比较的话，是将字符串转换成数字。 |\n|     不满足最左前缀     |                   如果存在索引下推勉强能用                   |\n|       左模糊匹配       | 类似 LIKE %XX，对于字符串类型，索引的顺序是按照字典序排列的，因此左模糊匹配也会 |\n\n\n\n索引的原理就是按照有序性进行二分（一次性排除大量数据无用数据），所以在改变了有序性之后索引失效就是理所当然的。\n\n\n\n\n\n## Reference\n\n- [官方文档](https://dev.mysql.com/doc/refman/5.6/en/preface.html)\n","slug":"MySQL","published":1,"updated":"2022-06-28T15:33:01.533Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clk87sjyf0001wnbv4k36fqdd","content":"<h1 id=\"MySQL（残酷学习版\"><a href=\"#MySQL（残酷学习版\" class=\"headerlink\" title=\"MySQL（残酷学习版\"></a>MySQL（残酷学习版</h1><p>[TOC]</p>\n<h2 id=\"MySQL-的整体架构\"><a href=\"#MySQL-的整体架构\" class=\"headerlink\" title=\"MySQL 的整体架构\"></a>MySQL 的整体架构</h2><p><img src=\"https://chenqwwq.oss-cn-hangzhou.aliyuncs.com/note/MySQL%E7%9A%84%E6%95%B4%E4%BD%93%E6%9E%B6%E6%9E%84-7940422.png\" alt=\"MySQL整体架构\"></p>\n<h3 id=\"连接器\"><a href=\"#连接器\" class=\"headerlink\" title=\"连接器\"></a>连接器</h3><p>连接器就是负责管理连接的，包括权限验证等等流程，因为连接是 TCP 的可能还包括连接状态的维护。</p>\n<h3 id=\"分析器\"><a href=\"#分析器\" class=\"headerlink\" title=\"分析器\"></a>分析器</h3><p>分析器的作用是对 SQL 进行词法分析，语法分析，抽出 BST，并交给后续的组件。</p>\n<h3 id=\"优化器\"><a href=\"#优化器\" class=\"headerlink\" title=\"优化器\"></a>优化器</h3><p><strong>优化器是 MySQL 中对 SQL 语法的分析器以及索引的选择器，会根据解析出进来的 SQL 语句结合索引以及取样数据选择索引。</strong></p>\n<p>因为其中还包含数据的影响，所以即使符合最左前缀匹配也无法 100% 确定是否真的会走索引。</p>\n<p>例如，如果优化器根据数据推测全表扫描的速度大于走索引再回表的速度，那么就会直接放弃索引。</p>\n<h3 id=\"执行器\"><a href=\"#执行器\" class=\"headerlink\" title=\"执行器\"></a>执行器</h3><p>执行器就相当于是一个调度器，会根据表选择的存储引擎调用不同的存储引擎的接口。</p>\n<p>执行器对于上层的优化器屏蔽了底层不同存储引擎带来的查询语法上的差异性。</p>\n<p>MySQL 的存储引擎是可插拔式的，在创建表的时候就可以使用不同的存储引擎。</p>\n<p>早期的 MySQL 还会有查询缓存层，但是在4.x版本中就已经被删除了。</p>\n<blockquote>\n<p>Q: 为什么要删除查询缓存？</p>\n</blockquote>\n<p>查询缓存是以查询语句为 Key，作为命中的要求，所以命中率并不会高，而且大量的缓存在业务逻辑层实现灵活性更高，更加可控，也就实在没必要在数据库中增加缓存机制。</p>\n<h2 id=\"MySQL-Transaction（事务\"><a href=\"#MySQL-Transaction（事务\" class=\"headerlink\" title=\"MySQL Transaction（事务\"></a>MySQL Transaction（事务</h2><p>事务的特性有如下四种，<strong>原子性（Atomicity），一致性（Consistency），隔离性（Isolation），持久性（Durability）</strong>。</p>\n<p>原子性指的是事务的操作作为一个不可再分的整体，<strong>要不同时完成要不同时失败</strong>。</p>\n<p>隔离性指的是<strong>多个事务并发执行的时候，互相之间的可见性</strong>，多个事务之间互相干扰的情况。</p>\n<blockquote>\n<p>隔离性并不是说强制的完全不能看到，类似 InnoDB 提供了多种的隔离级别，低级别隔离也有使用场景。</p>\n</blockquote>\n<p>持久性好理解，<strong>就是保证数据不丢失，在事务提交之后，事务造成的变更就是永久性的。</strong></p>\n<p>一致性指的是事务执行的前后，数据库中的数据都处于一种稳定状态，可能不太好理解，简单举例可以参考转账的操作，转账前后总额是不会增加的。</p>\n<h3 id=\"InnoDB-下事务的隔离级别\"><a href=\"#InnoDB-下事务的隔离级别\" class=\"headerlink\" title=\"InnoDB 下事务的隔离级别\"></a>InnoDB 下事务的隔离级别</h3><p>MySQL InnoDB 中提供了四种隔离级别：</p>\n<ul>\n<li>READ UNCOMMITTED 读未提交</li>\n<li>READ COMMITED 读已提交</li>\n<li>REPEATABLE READ 可重复读（Default）</li>\n<li>SERIALIZABLE  序列化</li>\n</ul>\n<p>四种隔离级别分别解决了不同的并发问题：</p>\n<table>\n<thead>\n<tr>\n<th>隔离解别</th>\n<th>脏读</th>\n<th>不可重复读</th>\n<th>幻读</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Read Uncommitted</td>\n<td>Y</td>\n<td>Y</td>\n<td>Y</td>\n</tr>\n<tr>\n<td>Read Committed</td>\n<td>N</td>\n<td>Y</td>\n<td>Y</td>\n</tr>\n<tr>\n<td>Repeatable(default)</td>\n<td>N</td>\n<td>N</td>\n<td>Y（InnoDB - N）</td>\n</tr>\n<tr>\n<td>Serializable</td>\n<td>N</td>\n<td>N</td>\n<td>N</td>\n</tr>\n</tbody></table>\n<blockquote>\n<p>简单理解一下这三种并发问题：</p>\n<p><strong>脏读（读未提交），事务读取到了其它事务中未提交的数据。</strong></p>\n<p><strong>不可重复读，事务前后多次读取内容不一致。</strong></p>\n<p><strong>幻读，事务前后多次读取总量不一致。</strong></p>\n</blockquote>\n<p><strong>RC  解决脏读依靠的就是锁和MVCC。</strong></p>\n<blockquote>\n<p>MVCC 在 InnoDB 的 RR 和 RC 级别下表现是不一样的，RR 级别下，MVCC 以第一次 SELECT 查到的数据为主不会再创建新的快照，但是 RC 级别下，MVCC 机制每次都会创建新的快照，所以也会存在前后数据不一致的情况。</p>\n</blockquote>\n<h3 id=\"InnoDB-中-ACID-的实现\"><a href=\"#InnoDB-中-ACID-的实现\" class=\"headerlink\" title=\"InnoDB 中 ACID 的实现\"></a>InnoDB 中 ACID 的实现</h3><p>首先是原子性，<strong>InnoDB 使用 Undo Log 实现了原子性</strong>，基本原则就是在失败之后回滚之前的操作。</p>\n<blockquote>\n<p>InnoDB 的 Undo Log 会根据数据行的版本指针组成一个链表，回滚时可以根据链表向上追溯。</p>\n</blockquote>\n<p><strong>隔离性，InnoDB 的隔离性是依靠 MVCC 和 锁来实现的。</strong></p>\n<p>InnoDB 中提供了多种不同的隔离级别，每个隔离级别使用不同类型的锁和 MVCC 表现形式来支持隔离性。</p>\n<blockquote>\n<p>锁定义了事务并发时访问权限，MVCC 减少了部分上锁的情况（主要还是增加性能。</p>\n</blockquote>\n<p><strong>持久性，InnoDB 中的持久性是依靠的 redo log 以及 undo log 实现的。</strong></p>\n<blockquote>\n<p>并说不清为什么还需要 undo log，但是因为 WAL 机制，redo log 是在数据修改前就已经持久化的，在事务提交的时候可以保证 redo log 已经落盘了，大部分情况下 redo log 就已经能保障数据的持久性了。</p>\n</blockquote>\n<p>一致性… emmm 不太清楚，应该是其他的东西一起保证的。</p>\n<h3 id=\"InnoDB-中的MVCC（多版本并发控制）\"><a href=\"#InnoDB-中的MVCC（多版本并发控制）\" class=\"headerlink\" title=\"InnoDB 中的MVCC（多版本并发控制）\"></a>InnoDB 中的MVCC（多版本并发控制）</h3><p>MVCC（<strong>Multi-Version  Concurrency Control</strong>） 在我看来是 InnoDB 中一个非常重要的特性，很大程度上提高了 MySQL 的并发性能。</p>\n<p>MVCC 机制在数据行中保留了多版本的数据，使用数据行隐藏字段 roll_pointer（回滚指针）串联起一个版本链，可以顺着版本链回滚数据行。</p>\n<blockquote>\n<p>因为是链是逐个遍历直到找到当前事务可以看到的数据行，所以当链很长的时候可能会拖慢查询。</p>\n</blockquote>\n<p>基于 MVCC，InnoDB 引入了一个快照读的概念，相对应的还有当前读，快照读指的是当前查询语句读取的是快照的内容，当前读读取的就是当前的真实数据。</p>\n<blockquote>\n<p>这里的快照不同于 Redis 的 RDB，是基于隐藏字段 trx_id 实现的可读范围标识。 </p>\n</blockquote>\n<p>InnoDB 的行记录包含了两个隐藏字段：</p>\n<table>\n<thead>\n<tr>\n<th>字段名</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>trx_id</td>\n<td>事务Id，由存储引擎统一下发，确保递增</td>\n</tr>\n<tr>\n<td>roll_pointer</td>\n<td>回滚指针</td>\n</tr>\n</tbody></table>\n<p>回滚指针指向的是当前行上次的数据，以此形成一个版本链，如果需要回滚到最先版本的数据，需要顺着 roll_pointer 一直往上。</p>\n<p><strong>MVCC 根据 trx_id 的大小界定出可见范围。</strong></p>\n<p>事务开始时，会额外保存当前最大和最小的 trx_id，并且保存当前未提交的事务 trx_id 数组。</p>\n<blockquote>\n<p>这里的事务开始是指第一次查询，而非 start tran。</p>\n</blockquote>\n<p>小于最小的 trx_id 标识已经提交，所以可见，大于最大的 trx_id 表示开始时还未开启，所以不可见。</p>\n<p>如果在中间，则判断 trx_id 数组是否包含来标识是否可读。</p>\n<p><strong>MVCC 特性仅仅在 RC 和 RR 级别下生效，</strong>并且在两个级别下的表现形式不同。</p>\n<p><strong>在 RC 级别下，每次查询都会创建一个快照，而在 RR 级别下，只有第一次查询会创建一个快照。</strong>（Important</p>\n<blockquote>\n<p>这就导致了事务的表现不同。</p>\n<p>在 RC 级别下，事务可以查看到别的事务已经提交的数据，这样就造成了不可重复读，也无法避免脏读。</p>\n<p>而在 RR 级别下，事务只会以第一次查询语句为准创建快照，所以 RR 级别下不会出现所谓的不可重复读问题。</p>\n</blockquote>\n<h3 id=\"参考文档\"><a href=\"#参考文档\" class=\"headerlink\" title=\"参考文档\"></a>参考文档</h3><ul>\n<li><a href=\"https://mp.weixin.qq.com/s/dMErouLlrte84Nmb97MkTQ\">相见恨晚，MVCC 这么理解，早就通关了</a></li>\n<li><a href=\"https://draveness.me/mysql-transaction/\">『浅入深出』MySQL 中事务的实现</a></li>\n</ul>\n<h2 id=\"MySQL-Index（索引\"><a href=\"#MySQL-Index（索引\" class=\"headerlink\" title=\"MySQL Index（索引\"></a>MySQL Index（索引</h2><p>索引就是用来加速查询速度的特殊结构。</p>\n<h3 id=\"InnoDB-中的索引结构\"><a href=\"#InnoDB-中的索引结构\" class=\"headerlink\" title=\"InnoDB 中的索引结构\"></a>InnoDB 中的索引结构</h3><p><strong>常见的索引结构有B+树，B树或者 Hash 索引，倒排索引</strong>。</p>\n<blockquote>\n<p>InnoDB 中以B+树为主，存在自适应 Hash索引，提供特殊形式的查询优化。</p>\n</blockquote>\n<bf>\n\n<p>B+ 树就是平衡的搜索树，可以简单理解为是二叉搜索树（BST）或者二叉平衡树（AVL）的变种。</p>\n<p>AVL <strong>就是任意节点左右子树的高度差不超过1的树，</strong>为了维持这种特性需要大量的旋转操作（添加最多旋转两次，但是删除最多需要 Lg(N)，并且随着深度的增加搜索的效率也会慢慢降低，在动辄千万亿万的数据的数据库中，二叉搜索树明显是不合适的。</p>\n<p>M 阶的B+树，根节点的节点数为[2,M]，索引节点的节点数为[M&#x2F;2,M]，<strong>而且保证了数据的有序性质</strong>，所以层次更低，查询速度更快也更平稳。</p>\n<blockquote>\n<p>因为B+树数据有序性的特点，所以如果不使用单调递增的索引键，在插入和删除操作时候就会存在页分裂和页合并的问题，十分影响效率。</p>\n</blockquote>\n<p>B 树和 B+树 的区别如下：</p>\n<ol>\n<li>B+ 树的所有数据都在子节点中，这样的<strong>查询更加稳定</strong>，所有的查询都需要树高度次的查询。</li>\n<li>B+ 树所有的子节点<strong>组成一个链表</strong>，这样非常便于<strong>实现范围查询</strong>。</li>\n</ol>\n<p>相对于 B 树和 Hash 来说，B+树更加符合磁盘的特性。</p>\n<blockquote>\n<p>为什么说 B+ 树更加符合磁盘特性呢？</p>\n</blockquote>\n<p>相比于 Hash 来说，B+ 树的层级更低（往往只有三四层，对于 B+ 树的存储来说，往往一个节点就是一个数据页，因此正常情况下 3～4 次磁盘 IO 就可以获取到想要的内容，并且 B+ 树将所有的叶子节点连成链，更加适合范围查询。</p>\n<p>相比于 B 树，除去叶子节点成链不说，B+ 树的非叶子节点不保存数据，具有更稳定的查询效率，B 树虽然在某些查询中可以更快速，但是整体查询并不稳定，读取同样大小的索引页 B+ 树有更多的索引项。</p>\n<blockquote>\n<p>MySQL 为什么不使用 Hash 表或者跳表作为索引实现？</p>\n</blockquote>\n<p>Hash 表只适合等值查询，几乎无法做范围查询。</p>\n<blockquote>\n<p>为什么不使用跳表的原因如下：</p>\n</blockquote>\n<p>MySQL 的主要数据还是保存在磁盘中，相对于跳表，B+ 树更加适配磁盘的特性，每个索引块可以保存在一个盘页。</p>\n<p>（以 Redis 为例，如果纯内存的数据库跳表应该和 B+ 树访问速度差不多。</p>\n<h3 id=\"索引分类\"><a href=\"#索引分类\" class=\"headerlink\" title=\"索引分类\"></a>索引分类</h3><h4 id=\"聚集索引和非聚集索引\"><a href=\"#聚集索引和非聚集索引\" class=\"headerlink\" title=\"聚集索引和非聚集索引\"></a>聚集索引和非聚集索引</h4><p>聚集索引并<strong>不是一种单独的索引类型，而是一种数据的存储方式</strong>，在 InnoDB 中，主键索引就是聚集索引，<strong>所有的数据都保存在主键索引的叶子节点中，数据按照主键的顺序排列存储。</strong></p>\n<p>InnoDB 中，主键索引决定了数据的物理存储顺序，应该更能理解主键的乱序插入带来的页分裂等等问题了。</p>\n<blockquote>\n<p>如果没有明确定义表的主键，MySQL 也会挑选一个唯一键作为主键，如果没有唯一键则会生成一个 rowId 作为主键。</p>\n</blockquote>\n<p>非聚集索引就是非聚集索引，<strong>和聚集索引相反的它的逻辑顺序和物理的存储顺序就是完全无关的。</strong></p>\n<p>InnoDB 的实现中，次级索引都是非聚集索引，保存的是主键。</p>\n<blockquote>\n<p>所以 InnoDB 中存在回表操作，就是在一个索引树中无法完全确定数据是否可用时，先返回主键，查询完整的数据再来判断。</p>\n<p>增加单索引中字段，索引下推，索引联合都可以起到减少回表的作用。</p>\n</blockquote>\n<p>MyISAM 中的非聚集索引实现不同，MyISAM 中所有的索引树都是非聚集索引，包括主键在内，保存的都是数据的真实地址。</p>\n<blockquote>\n<p>MyISAM 和 InnoDB 的不同在这里就有体现：</p>\n<p>MyISAM 支持没有主键，理论上来说 MyISAM 的主键索引和次级索引没有任何区别。</p>\n<p>MyISAM 的索引中保存的都是数据地址，而 InnoDB 的次级索引保存的主键。</p>\n</blockquote>\n<h4 id=\"稠密索引和稀疏索引\"><a href=\"#稠密索引和稀疏索引\" class=\"headerlink\" title=\"稠密索引和稀疏索引\"></a>稠密索引和稀疏索引</h4><p>稠密索引会为每一个键值建立一个索引记录，可以i加快查询速度，但是需要更多的空战占用以及维护成本。（类似 MySQL 中的主键索引</p>\n<p>稀疏索引不会为每一个键值建立索引，这种索引往往出现在有序的排序中，例如跳表结构就是稀疏索引的典型实现（Mongo 以及 Kafka 都算是稀疏索引，Mongo 的文档可能会缺失某些字段？Kafka 是以时间戳为序间隔一定长度建立索引项</p>\n<h4 id=\"唯一索引和非唯一索引\"><a href=\"#唯一索引和非唯一索引\" class=\"headerlink\" title=\"唯一索引和非唯一索引\"></a>唯一索引和非唯一索引</h4><p>唯一索引就是在表内需要保证字段值全局唯一的索引。</p>\n<blockquote>\n<p>唯一索引是保证不重复调用或者记录唯一的有效手段。</p>\n<p>比如希望点赞数不重复被记录，那么就可以将帖子Id和用户Id组成一个唯一索引，确保一个用户只能对一个帖子点赞一次。</p>\n</blockquote>\n<p>在 InnoDB 中唯一索引还会导致一些另外的问题，有好也有坏，但影响其实都不大，仅做了解：</p>\n<ol>\n<li>首先等值查询时，如果查找字段有唯一索引，那么查询到一条记录就会返回，而非唯一索引会顺着链表继续查询到一条不相等的记录。</li>\n<li>在插入或者修改数据的时候，InnoDB 的 Change Buffer 可能有效的减少随机读操作，而唯一索引无法使用该特性，因为在修改或者插入前都需要判断是否唯一</li>\n</ol>\n<blockquote>\n<p>Q：什么是 Change Buffer？</p>\n</blockquote>\n<p>Change Buffer 早期又称为 Insert Buffer，在数据插入时生效，后面扩展到数据的修改。</p>\n<p>Change Buffer 主要优化非唯一辅助索引的维护成本。</p>\n<p>在涉及到数据修改时，如果记录所在数据页在内存中则直接修改，如果不在可能需要先加载再修改，此时这个加载过程就是随机读的过程，相对于顺序读而言随机读的效率低了不止一点点。</p>\n<p>所以在修改的时候，InnoDB 会把这些更新操作缓存到 Changge Buffer 中，日志正常保存，即使宕机也能根据日志恢复。</p>\n<p>保存在 Change Buffer 的数据在下一次读取到数据页时合并，也就是 Merge 过程。</p>\n<h4 id=\"前缀索引\"><a href=\"#前缀索引\" class=\"headerlink\" title=\"前缀索引\"></a>前缀索引</h4><p>前缀索引是指在一个长字符串字段中，可以选取其中N字节长度的前缀作为索引。</p>\n<blockquote>\n<p>长字符串的索引除了使用前缀索引，还可以直接独立一个字段做hash，搜索会更加全面。</p>\n</blockquote>\n<h3 id=\"索引使用的相关算法\"><a href=\"#索引使用的相关算法\" class=\"headerlink\" title=\"索引使用的相关算法\"></a>索引使用的相关算法</h3><h4 id=\"最左前缀匹配\"><a href=\"#最左前缀匹配\" class=\"headerlink\" title=\"最左前缀匹配\"></a>最左前缀匹配</h4><p>最左前缀匹配在联合索引中是一个非常重要的概念，<strong>就是依据左前缀判断是否可以使用该索引。</strong></p>\n<blockquote>\n<p>简单的例子，联合索引[a,b,c]，可是使用该索引的查询条件是[a]，[a,b]，[a,b,c]，但是绝对不包括[b,c]等不以a开头的查询条件</p>\n</blockquote>\n<p>本质上来说，联合索引在 InnoDB 中的数据结构仍然是一棵 B+ 树，并且索引节点保存以声明顺序所表示的索引数据。</p>\n<blockquote>\n<p>例如[a,b,c]，在索引树中的排序就是先按照a排序，a相同按照b排序，b相同按照c排序。</p>\n<p>！！！利用索引有序的结构，可以完美的优化查询语句中的排序，但是在联合索引中，如果搜索条件是[a,b]并且按照b排序就不会出现文件排序，因为在a相同时，b本身就是有序的。</p>\n<p>但是在搜索条件为[a,c]时，当a相同时，c并非有序，所以查询会出现 file sort。</p>\n</blockquote>\n<h4 id=\"覆盖索引\"><a href=\"#覆盖索引\" class=\"headerlink\" title=\"覆盖索引\"></a>覆盖索引</h4><p>覆盖索引是指在索引树中的内容已经包含了需要查找所需要所有字段，所以可以直接返回而跳过回表。</p>\n<blockquote>\n<p>回表可以简单理解为使用二级索引查询获得主键之后，为了获得更多的数据而需要再一次扫描主键索引树。</p>\n<p>！！一般来说扫描二级索引树获得的主键，会返回给 Server 层，由 Server 再次发起查询。</p>\n</blockquote>\n<p>有些时候大量的回表会导致查询的效率十分低下，此时适当冗余索引字段也不失为一个好办法。</p>\n<h4 id=\"索引下推\"><a href=\"#索引下推\" class=\"headerlink\" title=\"索引下推\"></a>索引下推</h4><p>索引下推是在 MySQL 5.6 引入的对索引使用方式的优化，在次级索引树的遍历过程中，尽量多的使用索引树中的字段。</p>\n<blockquote>\n<p>在5.6之前，[a,b,c]索引查询[a,c]，只能使用到a字段，c字段就需要回表之后判断，如果a的筛率不高就会有大量的回表，</p>\n<p>而在5.6以后，c字段也能下推判断，进一步的判断也减少了回表的记录数，加快了查询速度。</p>\n</blockquote>\n<h4 id=\"索引联合\"><a href=\"#索引联合\" class=\"headerlink\" title=\"索引联合\"></a>索引联合</h4><p>索引联合了解的不多，在使用or的等值查询过程中可能会用到索引联合，搜索两棵索引树在做值的整合，相当于 union all 吧。</p>\n<blockquote>\n<p>虽然索引有这好那好，但是走哪个索引还是依据优化器的，优化器也是根据抽样统计信息的，偶尔也可能出错。</p>\n</blockquote>\n<h3 id=\"建立索引的思考\"><a href=\"#建立索引的思考\" class=\"headerlink\" title=\"建立索引的思考\"></a>建立索引的思考</h3><ol>\n<li>联合索引的字段排序（a，b，c 的联合索引，b 相对于 a 有序，c 相对于 b 有序，如果需要以a排序就可以建立（b，c，a 或者 c，b，a）索引，消除排序</li>\n<li>字段的区分度（比如 sex，存它干嘛呢，撑死了三个值</li>\n<li>实用程度（？，有些使用频率低的 SQL，可能并不需要特定的索引，索引也需要消耗一定的空间，并且降低更新和插入的效率。</li>\n</ol>\n<h2 id=\"MySQL-Log（日志\"><a href=\"#MySQL-Log（日志\" class=\"headerlink\" title=\"MySQL Log（日志\"></a>MySQL Log（日志</h2><p>MySQL 中存在多种日志，比如 <strong>binlog ，redo log 以及 undo log。</strong></p>\n<p>redo log 和  undo log 属于 InnoDB 层的日志，而 binlog 属于 MySQL Server 层的日志。</p>\n<p>binlog 主要用于主从复制，数据归档（可以单独根据 binlog 实现数据恢复，但不能保证 crash-safe</p>\n<p>redo log 和 undo log 共同实现原子性，在正常的回滚下可能仅仅需要 undo log 来进行行记录的回滚，但是如果是经过 crash 则需要 redo log 来判断事务是否已经提交。</p>\n<p>undo log 在 InnoDB 中另外实现了 MVCC。</p>\n<h3 id=\"binlog（归档日志\"><a href=\"#binlog（归档日志\" class=\"headerlink\" title=\"binlog（归档日志\"></a>binlog（归档日志</h3><p> binlog 属于归档日志，在 MySQL 中属于 Server 层日志， <strong>MySQL 中所有的存储引擎都会记录该日志。</strong></p>\n<p>binlog  记录了所有的<strong>数据库变更操作</strong>，包括 UPDATE，INSERT，DELETE，也包括表结构的修改 ALTER TABLE 等。</p>\n<p><strong>binlog 的主要作用是 1. 主从复制  2. 数据归档（奔溃后的适度恢复）。</strong></p>\n<p>但是 binlog 并不能提供 crash-safe 的保证。</p>\n<h4 id=\"日志格式\"><a href=\"#日志格式\" class=\"headerlink\" title=\"日志格式\"></a>日志格式</h4><p><strong>binlog 有如下三种格式：</strong></p>\n<ol>\n<li>statement</li>\n</ol>\n<p>statement 完整的保存执行的语句，但是因为 now() 等即时函数的存在复制的异常，所以用于复制的情况下会出现异常。</p>\n<ol>\n<li>row</li>\n</ol>\n<p><strong>row 记录的是表中数据 完整的变更，比如 now() 就会直接记录当前时间，数据较为准确，不会受语句上下文环境的影响</strong></p>\n<p>但是相对的日志文件会比较大，因为 statement 一个删除语句，row 会保存所有的行记录。</p>\n<ol>\n<li>mixed</li>\n</ol>\n<p>mixed 基本上就是混合两种的情况。</p>\n<h4 id=\"相关配置\"><a href=\"#相关配置\" class=\"headerlink\" title=\"相关配置\"></a>相关配置</h4><p>再说两个 binlog 相关的主要配置：</p>\n<ol>\n<li>binlog_cache_size</li>\n</ol>\n<p>该值表示在 MySQL 中 binlog 缓冲区的大小，用于缓存事务产生的 binlog。</p>\n<p><strong>binlog cache 是线程私有的，不同线程之间不共享缓冲区。</strong></p>\n<p>因为一个事务中可能涉及多个更新语句，并且多个更新语句不能拆分写入，因此需要单独一个缓冲区。</p>\n<ol>\n<li>sync_binlog</li>\n</ol>\n<p>binlog 的 fsync 刷盘策略，有如下几种配置形式：</p>\n<ul>\n<li>0 - 系统自由决定何时刷盘，所有 binlog 只做 write</li>\n<li>1 - 每次都需要刷盘</li>\n<li>n - 每次提交事务都会 write，但是n次的操作之后才会进行刷盘</li>\n</ul>\n<p>为0时性能最好，但是如果系统宕机，会丢失未落盘的内容。</p>\n<h3 id=\"redo-log（重做日志\"><a href=\"#redo-log（重做日志\" class=\"headerlink\" title=\"redo log（重做日志\"></a>redo log（重做日志</h3><p>redo log 是 InnoDB 的日志，根据 Write Ahead Log（WAL）机制和 force log at commit 机制保证数据的持久性。</p>\n<p>WAL（Write Ahead Log ）就是预写日志技术，在 InnoDB 中所有的修改都需要写日志，再做修改内存数据，同时在提交事务的时候也需要先将日志落盘。</p>\n<p>所以理论上 redo log 可以单独提供 crash-safe 的保证。</p>\n<p>redo log 中记录的是每次修改的物理日志，即每个数据页的修改（包含主键索引和次级索引。</p>\n<h4 id=\"redo-log-buffer\"><a href=\"#redo-log-buffer\" class=\"headerlink\" title=\"redo log buffer\"></a>redo log buffer</h4><p>InnoDB 中的 redo log 有一个固定的大小的缓冲区，并且首尾相连组成一个环，环上有两个主要的指针: check_point 和 write_pos。</p>\n<p><img src=\"https://chenqwwq.oss-cn-hangzhou.aliyuncs.com/note/16a7950217b3f0f4ed02db5db59562a7-7940422.png\" alt=\"img\"></p>\n<p>在 write_pos 和 check_point 之间的就是日志的可写范围，如果刷盘不及时导致 write_pos 追上了 check_point，就会开启强制的刷盘（所以在 MySQL 大量写的时候会有瞬间抖动的现象。</p>\n<p>另外在 MySQL 的后台线程也会定时刷盘，在正常关闭 MySQL 的时候也会将 redo log 落盘。</p>\n<h4 id=\"redo-log-的配置\"><a href=\"#redo-log-的配置\" class=\"headerlink\" title=\"redo log 的配置\"></a>redo log 的配置</h4><p>redo log 的刷盘策略也有参数控制 - <strong>innodb_fluish_log_at_trx_commit</strong>（这个非常非常重要！。</p>\n<ol>\n<li>innodb_fluish_log_at_trx_commit</li>\n</ol>\n<p>该参数为1时，每次的 redo log 都会调用 fsync，真正落盘持久化保存。</p>\n<h3 id=\"undo-log（回滚日志\"><a href=\"#undo-log（回滚日志\" class=\"headerlink\" title=\"undo log（回滚日志\"></a>undo log（回滚日志</h3><p>undo log 在 InnoDB 中用于实现 MVCC 和原子性。</p>\n<p>InnoDB 在修改行记录都会带有几个隐藏字段：</p>\n<ol>\n<li>TRX_ID -  修改的事务Id（事务 Id 由 MySQL 统一下发保证全局唯一并且递增。</li>\n<li>ROLL_PTR - 回滚指针，指向旧版本数据，数据行根据指针组成一个单向链表（新 -&gt; 旧</li>\n</ol>\n<p><strong>MVCC 的实现就是在查询的时候沿着 ROLL_PTR 遍历到一个当前事务可见的行记录并返回（因此也存在 undo log 记录太多，导致查询缓慢的问题。</strong></p>\n<p><strong>原子性的实现就是直接替换当前行记录，修改都是会上锁的所以不存在多个修改并行的情况。</strong></p>\n<p>undo log 在 5.6 之后记录在单独的表空间，并且使用回滚段作为组织的形式。</p>\n<blockquote>\n<p>所以 undo log 并算不上 InnoDB WAL 机制的实现，因为 undo log 自身的持久化都要基于 redo log。</p>\n</blockquote>\n<p>undo log 不会一直存在，当事务提交的时候 undo log 就没有作用了（已经提交了，当前事务不需要回滚了），但是是否要删除还得看对于目前还存活的事务 undo log 是否可用。</p>\n<p>最终的删除还是根据后台的 purge 线程决定。</p>\n<h3 id=\"binlog-和-redo-log-的-2PC（二阶段提交\"><a href=\"#binlog-和-redo-log-的-2PC（二阶段提交\" class=\"headerlink\" title=\"binlog 和 redo log 的 2PC（二阶段提交\"></a>binlog 和 redo log 的 2PC（二阶段提交</h3><p><strong>binlog 和 redo log 需要做二阶段提交，保证双方日志的一致性，保证经过 binlog 复制的操作不会丢失或者被回滚。</strong></p>\n<p>之所以要保证一致性的原因是因为 binlog 作为归档日志以及复制功能基础，如果 binlog 已经写入的数据，redo log 回滚，就会导致主从或者恢复前后的数据不一致。</p>\n<p>二阶段提交的流程如下：</p>\n<ol>\n<li>准备阶段（Storage Engine（InnoDB） Transaction Prepare Phase）</li>\n</ol>\n<p>该阶段生成 XID（事务Id），进入 PREPARED 阶段，此时 binlog 不需要落盘，但 redo log 需要先落盘。</p>\n<p>该阶段可能执行多次，每次修改都需要将 redo log 落盘。</p>\n<ol>\n<li>提交阶段（Storage Engine（InnoDB）Commit Phase）</li>\n</ol>\n<p>如果将事务提交，则将 binlog 落盘，如果回滚则使用 undo log 进行回滚。</p>\n<ol>\n<li>完成阶段</li>\n</ol>\n<p>事务提交或者回滚都需要看情况清除对应的 undo log。</p>\n<p>binlog 在 2PC 中充当了事务的协调者（Transaction Coordinator），并且以 binlog 是否写入来判断事务是否成功，使用 XID 建立当前日志之间的对应关系。</p>\n<p>在恢复的时候，redo log 检查到最近的 checkpoint，然后查看之后的日志，需要确定事务是否已经提交则通过 XID 找到对应的 binlog 俩判断 commit 状态。</p>\n<h3 id=\"group-commit（组提交策略\"><a href=\"#group-commit（组提交策略\" class=\"headerlink\" title=\"group commit（组提交策略\"></a>group commit（组提交策略</h3><p><a href=\"https://www.modb.pro/db/62473\">沙尘暴也阻挡不了学习的脚步– 面试官：你竟然不知道MySQL的组提交</a></p>\n<h3 id=\"checkpoint（检查点\"><a href=\"#checkpoint（检查点\" class=\"headerlink\" title=\"checkpoint（检查点\"></a>checkpoint（检查点</h3><p><strong>checkpoint 就是将脏页刷回磁盘的机制。</strong></p>\n<p>当 MySQL 重启后会第一时间定位到最后的 checkpoint，在 checkpoint 之前的数据就不需要做恢复，只需要对其后的数据做恢复（按照 redo log。</p>\n<p>checkpoint 可以分为以下两种：</p>\n<ul>\n<li>Sharp Checkpoint</li>\n</ul>\n<p>在当 MySQL 关闭的时候，需要将所有的脏页刷回磁盘，此时 checkpoint 会直接拉到日志最末尾。</p>\n<ul>\n<li>Fuzzy Checkpoint</li>\n</ul>\n<p>基本就是刷脏页的触发时机，包含后台定时线程触发，redo log buffer 里 write_point 追上 checkpoint 触发，LRU 空闲页面不够的刷盘。</p>\n<h3 id=\"LSN（Log-Sequence-Number，日志序列号\"><a href=\"#LSN（Log-Sequence-Number，日志序列号\" class=\"headerlink\" title=\"LSN（Log Sequence Number，日志序列号\"></a>LSN（Log Sequence Number，日志序列号</h3><p>LSN 表示的就是日志的序号，在 InnoDB 中占8个字节。</p>\n<p>表空间中的数据页、缓存页、内存中的 rodo log、磁盘中的 redo log 以及 checkponit 都有LSN标记。</p>\n<h3 id=\"崩溃恢复的流程\"><a href=\"#崩溃恢复的流程\" class=\"headerlink\" title=\"崩溃恢复的流程\"></a>崩溃恢复的流程</h3><h3 id=\"reference\"><a href=\"#reference\" class=\"headerlink\" title=\"reference\"></a>reference</h3><ul>\n<li><a href=\"https://huzb.me/2019/04/24/redo-undo%E5%92%8Cbinlog/\">Redo log,Undo log 和 Binlog</a></li>\n<li><a href=\"https://www.cnblogs.com/f-ck-need-u/p/9010872.html\">详细分析MySQL事务日志(redo log和undo log)</a></li>\n</ul>\n<h2 id=\"InnoDB-特性\"><a href=\"#InnoDB-特性\" class=\"headerlink\" title=\"InnoDB 特性\"></a>InnoDB 特性</h2><h3 id=\"一、-Change-Buffer（修改缓存\"><a href=\"#一、-Change-Buffer（修改缓存\" class=\"headerlink\" title=\"一、 Change Buffer（修改缓存\"></a>一、 Change Buffer（修改缓存</h3><p>Change Buffer 的主要作用就是<strong>缓存对二级（辅助）非唯一索引的修改</strong>（早期只在 Insert 操作中生效，称为 Insert Buffer。</p>\n<p>Changer Buffer 属于日志的一种，在 InnoDB 底层的 Buffer Pool 中会占据一定的空间。</p>\n<p>如果没有 Change Buffer，在一次数据更新中会需要将数据所有的索引树加载到 Buffer Pool 之后再做更新（因为 Redo Log 的存在，所以此时 Buffer Pool 不需要立即刷到磁盘中。</p>\n<p><strong>Change Buffer 会在适当的时候进行 Merge</strong>，例如当索引页被加载到 Buffer Pool 的时候，或者服务空闲的时候，服务关闭之前等等。</p>\n<p>Change Buffer 的机制可以和 redo log 做类比，redo log 减少了随机写的操作，而 Change Buffer 减少了随机读的操作（对于磁盘操作顺序操作比随机操作快了好几倍。</p>\n<h3 id=\"二、Double-Write（两次写\"><a href=\"#二、Double-Write（两次写\" class=\"headerlink\" title=\"二、Double Write（两次写\"></a>二、Double Write（两次写</h3><p>InnoDB 的两次写是为了防止部分页刷新的问题。</p>\n<p>默认的 InnoDB 内部的 Buffer Pool 的页大小为 16kb，但是系统写文件却大部分以 4kb 为单位，此时可能就出现页数据没有被完全写入就奔溃的情况。</p>\n<p>MySQL 在磁盘共享空间中会创建一个 Double Write 的区域用于存放临时数据。</p>\n<p>所有的脏数据写入会分为两次，一次写入 Double Write 的磁盘区，而后在将脏页具体刷盘。</p>\n<h3 id=\"三、Flush-Neighbor-Page（刷新邻接页\"><a href=\"#三、Flush-Neighbor-Page（刷新邻接页\" class=\"headerlink\" title=\"三、Flush Neighbor Page（刷新邻接页\"></a>三、Flush Neighbor Page（刷新邻接页</h3><p>刷脏页的时候连带着将附近的一起刷了（处处透露着优化。</p>\n<h3 id=\"四、自适应-Hash-索引\"><a href=\"#四、自适应-Hash-索引\" class=\"headerlink\" title=\"四、自适应 Hash 索引\"></a>四、自适应 Hash 索引</h3><p>TODO</p>\n<h3 id=\"InnoDB-的内存管理（LRU\"><a href=\"#InnoDB-的内存管理（LRU\" class=\"headerlink\" title=\"InnoDB 的内存管理（LRU\"></a>InnoDB 的内存管理（LRU</h3><p><strong>InnoDB 底层会申请一片的 Buffer Pool 用于保存数据页以及其他数据，默认情况下一页为 16kb（通过 innodb_page_size 控制。</strong></p>\n<p>数据页会根据 LRU 算法进行保存，InnoDB 的 LRU 经过一定的优化，链表将其前 3&#x2F;8 的部分作为热数据区，后面的属于冷数据区，中间点可以称之为 midpoint。</p>\n<p><img src=\"https://chenqwwq.oss-cn-hangzhou.aliyuncs.com/note/v2-b1542fa213b5322ed17364411af8cf99_1440w-7940422.jpg\" alt=\"img\"></p>\n<p>读取的新数据并不是直接添加到链表的头部，而是添加到冷区头部，在一定的时间内被访问才会进入到热区。</p>\n<p>再次基础上，LRU 还优化了热区的移动逻辑，热区前1&#x2F;4的数据被访问时不会再被移动（用来减少指针移动带来的锁。</p>\n<p>此类优化适合数据库查询相结合的，因为部分查询可能会大量查询到无用的数据页（类似全表扫描），如果一股脑全部填充到首部会将真实的热数据冲散。</p>\n<h4 id=\"页分裂问题\"><a href=\"#页分裂问题\" class=\"headerlink\" title=\"页分裂问题\"></a>页分裂问题</h4><p>InnoDB 中每张表都要求必须有一个主键Id（没有就隐式生成一个 row_id，并且主键索引就是聚簇索引，因此都是按照主键 Id 的顺序存放的数据。</p>\n<p>当前主键 Id 递增时，每次都是在最后一页新增一行数据，如果超出则新申请一页，但当在两个主键中插入一个中间值时，此时如果页面数据也是满的就可能产生页分裂的情况。</p>\n<p>页分裂的情况会导致部分数据需要被拷贝到新的数据页，因此也会显著降低插入的效率。</p>\n<h2 id=\"MySQL-锁相关\"><a href=\"#MySQL-锁相关\" class=\"headerlink\" title=\"MySQL 锁相关\"></a>MySQL 锁相关</h2><p>MySQL 中的锁需要根据存储引擎的不同来说。</p>\n<p>在 MyISAM 中仅仅只有表锁，所有的插入操作都需要事先锁表，而 InnoDB 支持表锁，行锁，甚至多级上锁。</p>\n<h3 id=\"InnoDB-的基础锁类型\"><a href=\"#InnoDB-的基础锁类型\" class=\"headerlink\" title=\"InnoDB 的基础锁类型\"></a>InnoDB 的基础锁类型</h3><p>InnoDB 中根据划分依据的不同存在多种不同的锁。</p>\n<p>根据锁的粒度，或者说锁的目标来划分，存在以下几种锁：<strong>行锁，表锁，间隙锁。</strong></p>\n<p>根据锁的排他性或者锁的目标行为来划分，存在<strong>写锁和读锁。</strong></p>\n<h3 id=\"二阶段锁协议\"><a href=\"#二阶段锁协议\" class=\"headerlink\" title=\"二阶段锁协议\"></a>二阶段锁协议</h3><p><strong>二阶段锁协议的简单理解就是随机上锁，最终（事务提交）解锁。</strong></p>\n<p><strong>在 InnoDB 中加锁的过程是根据语句的执行过程慢慢加的。</strong></p>\n<blockquote>\n<p>例如 <code>INSERT INTO ... SELECT ... FROM</code> 语句，该语句如果用于迁表，那么就会感觉到上锁的过程是跟随语句的执行过程慢慢发展到锁表。</p>\n</blockquote>\n<p><strong>而锁的释放是在事务提交之后一次性释放的。</strong></p>\n<blockquote>\n<p>中间可能会有一些优化，类似于 AUTO_INCREMENT 带来的插入锁，会提前释放，并且一些行锁也可能提前释放，但总得来说大部分的锁都还是在事务提交时被释放的。</p>\n</blockquote>\n<h3 id=\"读锁和写锁\"><a href=\"#读锁和写锁\" class=\"headerlink\" title=\"读锁和写锁\"></a>读锁和写锁</h3><p>读锁和写锁是锁的两个程度，读锁就是所谓的排他锁，而写锁就是所谓的共享锁。</p>\n<blockquote>\n<p>Javaer 可以直接联想 ReadWriteLock。</p>\n</blockquote>\n<p><strong>读锁和读锁之间相互兼容，写锁排斥一切。</strong></p>\n<p>因为 MVCC 的存在，所以 MySQL 的查询一般来说是不会上锁的（因此，就算在写也是可以读到内容，并不是读写相融。</p>\n<p>强行上锁可以使用以下语句加锁：</p>\n<figure class=\"highlight lasso\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs lasso\"><span class=\"hljs-comment\">// 读锁</span><br><span class=\"hljs-keyword\">SELECT</span> * FROM tableName <span class=\"hljs-keyword\">WHERE</span> <span class=\"hljs-params\">...</span> LOCK <span class=\"hljs-keyword\">IN</span> SHARE MODE<br><span class=\"hljs-comment\">// 写锁</span><br><span class=\"hljs-keyword\">SELECT</span> * FROM tableName <span class=\"hljs-keyword\">WHERE</span> <span class=\"hljs-params\">...</span>  FOR UPDATE<br></code></pre></div></td></tr></table></figure>\n\n<p>划分读锁和写锁的意义就在于，让两个读锁可以通知执行，增加并发度（基于 MVCC 的无锁化实现才是性能提升的最大原因。</p>\n<h3 id=\"行锁和表锁以及意向锁\"><a href=\"#行锁和表锁以及意向锁\" class=\"headerlink\" title=\"行锁和表锁以及意向锁\"></a>行锁和表锁以及意向锁</h3><p>根据粒度划分，InnoDB 中存在行锁，也就是对<strong>表中的单行记录上锁</strong>，也有表锁，可以对<strong>整张表上锁</strong>。</p>\n<blockquote>\n<p>！！！InnoDB 中并没有真正意义上的表锁，就是直接对表上锁的那种，而是通过行锁+间隙锁的形式锁表。</p>\n<p>多粒度的锁也是 InnoDB 的特性之一，MyISAM 就只有表锁。</p>\n</blockquote>\n<p><strong>对于常规的 CURD 语句，判断行锁还是表锁，简单来看就是是否走索引，不走索引的 CRUD 语句都会经过一个全表扫描的过程，扫描过程中慢慢的就会锁表。</strong></p>\n<p>InnoDb 支持多粒度上锁，即表锁和行锁，如果表锁和行锁都为读锁，那也不会冲突，而如何在上表锁的时候判断是否在表中存在行锁就会出现问题，总不能扫表来判断是否有锁吧，此时就出现了意向锁。</p>\n<p><strong>意向锁是为了兼容多粒度的锁而设计的</strong>，在上读锁的同时会给对应的表上读的意向锁，此时上写的表锁会被意向锁卡住。</p>\n<h3 id=\"GAP-锁\"><a href=\"#GAP-锁\" class=\"headerlink\" title=\"GAP 锁\"></a>GAP 锁</h3><p><strong>GAP 锁的锁定目标就是两个索引记录之间的区域（左开右闭）</strong>，GAP 锁的目的就是为了防止其他的事务在间隙（GAP）范围内插入数据。</p>\n<p><strong>GAP 锁是共享锁</strong>，也就是说两个事务可以同时对相同的 GAP 上锁（咩有写的 GAP 锁。</p>\n<p>GAP 锁仅仅在 RR 级别下生效。</p>\n<h3 id=\"Next-Key-Lock\"><a href=\"#Next-Key-Lock\" class=\"headerlink\" title=\"Next-Key Lock\"></a>Next-Key Lock</h3><p>Next-Key Lock 就是<strong>行锁和 GAP 锁的结合</strong>，GAP 锁锁定的是命中的索引记录之前的间隙。</p>\n<p>Next-Key Lock 的存在使 InnoDB 在 RR 级别下面就可以解决幻读问题。</p>\n<h3 id=\"死锁\"><a href=\"#死锁\" class=\"headerlink\" title=\"死锁\"></a>死锁</h3><p>死锁出现的情况就是互相持有对象需要的锁。</p>\n<blockquote>\n<p>例如，持有A资源，等待B资源的线程和持有B资源，等待A资源的线程会造成死锁。</p>\n</blockquote>\n<p>死锁的必要条件：</p>\n<ol>\n<li>资源互斥 - 只有一个对象可以使用资源</li>\n<li>占有等待 - 在等待另外的资源期间，已有资源并不会释放</li>\n<li>不可强占 - 资源不可强行剥夺，即无法强行获取别的所持有的资源</li>\n<li>循环等待 - 若干对象循环持有对方所需要的资源</li>\n</ol>\n<p>如何避免死锁（减少死锁的发生：</p>\n<ol>\n<li>缩小事务范围</li>\n</ol>\n<blockquote>\n<p>MySQL 的上锁是逐步的，扫描索引树的时候逐步上锁，并且在事务提交的时候才会释放，所以缩小事务范围可以有效减少死锁的发生。</p>\n<p>因为事务的解锁统一在事务的提交的时候，所以即使不同表的更新也会造成死锁。</p>\n</blockquote>\n<ol>\n<li>尽量使用主键索引更新语句</li>\n</ol>\n<blockquote>\n<p>避免对索引树的扫描导致一次更新覆盖太多的行。</p>\n</blockquote>\n<ol>\n<li>以相同的顺序更新</li>\n</ol>\n<blockquote>\n<p>死锁的原因是在更新多条记录的时候，互相持有部分记录的锁（单条记录的更新不会有死锁的问题。</p>\n<p>所以将更新的顺序改为一致就可以解决死锁的问题，改死锁为等待（同个事务下更新的执行可以认为是无关先后顺序的，都是在提交的一刻生效。</p>\n<p>对应的场景有 IM 中群聊会话的更新。</p>\n</blockquote>\n<h3 id=\"rference\"><a href=\"#rference\" class=\"headerlink\" title=\"rference\"></a>rference</h3><ul>\n<li><a href=\"https://draveness.me/database-concurrency-control/\">浅谈数据库并发控制 - 锁和 MVCC</a></li>\n<li><a href=\"https://www.cnblogs.com/rjzheng/p/9950951.html\">史上最全的select加锁分析(Mysql)</a></li>\n</ul>\n<h2 id=\"排序算法\"><a href=\"#排序算法\" class=\"headerlink\" title=\"排序算法\"></a>排序算法</h2><p>MySQL 中的排序算法包括三种：</p>\n<ol>\n<li>全字段排序</li>\n</ol>\n<p>全字段排序就是将全部需要的字段放入 sort_buffer 统一排序后返回。</p>\n<ol>\n<li>rowId 排序</li>\n</ol>\n<p>在排序内容较多的时候，可能仅使用 rowId + 排序字段进行排序，然后回表查询另外的内容。</p>\n<p>此时的效率可能非常低，因为先根据筛选字段查询 rowId 以及 排序字段（此时可能已经经过一次回表，而排序结束之后可能再次使用 rowId 进行二次回表。</p>\n<ol>\n<li>索引树排序</li>\n</ol>\n<p>MySQL 索引本身就是有序的，因此如果排序条件满足索引（最左匹配原则，则可以直接使用索引中的顺序。</p>\n<p>explain 的 Extra 字段中可能出现 filesort 标记，表示出现额外排序（并不一定是磁盘排序。</p>\n<p>相关的还有分页问题，大数据量分页的时候可能会非常的慢，因为例如 limit 1000000,1000002; 此时会将 1000002 的数据全部先排序然后在选去后两条。</p>\n<p>此时的优化应该减少待排序内容，使用索引或者子查询。</p>\n<h2 id=\"联表查询算法\"><a href=\"#联表查询算法\" class=\"headerlink\" title=\"联表查询算法\"></a>联表查询算法</h2><p>联表查询包含如下几种形式：</p>\n<ol>\n<li>全连接&#x2F;内连接查询</li>\n</ol>\n<p>全链接查询最后的数据集只会保存驱动和被驱动表都匹配的数据。</p>\n<p>例如 select * from a,b where a.id &#x3D; b.id。</p>\n<p>此时 a 和 b 的 id 在对方表中无匹配项的就不会被返回。</p>\n<ol>\n<li>左连接查询</li>\n<li>右连接查询</li>\n</ol>\n<blockquote>\n<p>普通的 A join B，会是 MySQL 自行选择驱动表，而使用 A straight_join B，会固定 A 为驱动表。</p>\n<p>驱动表可以简单理解为先查询的数据表，会根据驱动表的数据去匹配被驱动表。</p>\n</blockquote>\n<p><strong>联表查询的时候应该是小表作为驱动，小表的判断依据是单个表执行完 WHERE 语句之后剩余的数据集。</strong></p>\n<h3 id=\"Index-Nested-Loop-Join\"><a href=\"#Index-Nested-Loop-Join\" class=\"headerlink\" title=\"Index Nested-Loop Join\"></a>Index Nested-Loop Join</h3><p>TODO</p>\n<h3 id=\"Simple-Nested-Loop-Join\"><a href=\"#Simple-Nested-Loop-Join\" class=\"headerlink\" title=\"Simple  Nested-Loop Join\"></a>Simple  Nested-Loop Join</h3><p>TODO</p>\n<h3 id=\"Block-Nested-Loop-Join\"><a href=\"#Block-Nested-Loop-Join\" class=\"headerlink\" title=\"Block Nested-Loop Join\"></a>Block Nested-Loop Join</h3><p>TODO</p>\n<h3 id=\"相关参数\"><a href=\"#相关参数\" class=\"headerlink\" title=\"相关参数\"></a>相关参数</h3><table>\n<thead>\n<tr>\n<th align=\"center\">参数名</th>\n<th align=\"center\">参数作用</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">join_buffer_size</td>\n<td align=\"center\">join buffer 的大小（在合适的范围之内，Join Buffer 肯定是越大越好</td>\n</tr>\n<tr>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n</tr>\n</tbody></table>\n<h2 id=\"分页算法\"><a href=\"#分页算法\" class=\"headerlink\" title=\"分页算法\"></a>分页算法</h2><p>TODO</p>\n<h2 id=\"Master-Slave-Replication（主从复制\"><a href=\"#Master-Slave-Replication（主从复制\" class=\"headerlink\" title=\"Master-Slave Replication（主从复制\"></a>Master-Slave Replication（主从复制</h2><p><img src=\"https://chenqwwq.oss-cn-hangzhou.aliyuncs.com/note/a66c154c1bc51e071dd2cc8c1d6ca6a3-7940422.png\" alt=\"img\"></p>\n<p>（还是 MySQL 45讲里面的图片。</p>\n<h3 id=\"复制的作用\"><a href=\"#复制的作用\" class=\"headerlink\" title=\"复制的作用\"></a>复制的作用</h3><ol>\n<li>多机备份，数据安全性保证（在单机突然爆炸的情况下也能保证数据安全</li>\n<li>读性能的水平扩展（主从分离之后，可以将读写进一步分离</li>\n<li>数据的异步化处理（例如阿里 canal，可以监听 binlog 用来进一步处理</li>\n</ol>\n<h3 id=\"基本复制流程\"><a href=\"#基本复制流程\" class=\"headerlink\" title=\"基本复制流程\"></a>基本复制流程</h3><p>MySQL 的主从复制是基于 Server 层的 binlog 实现的复制功能（可以类比于 Redis 的复制，binlog 转成 Redis 的复制缓冲区。</p>\n<p>在 master 接收到 slave 传递的 start slave 指令后就开始复制过程，此时 slave 需要指定 binlog 的日志偏移量。</p>\n<p>复制过程主要涉及的有以下几个线程（线程池）：</p>\n<ol>\n<li>Dump Thread</li>\n</ol>\n<p>master 侧的线程，负责从 binlog 中读取日志记录并推送到 Slave，注意读取的是 binlog 的磁盘文件（binlog 的缓存区是线程私有的也读取不到。</p>\n<p>master 会为每个从节点创建一个 Dump Thread，从不同的起始点开始读取日志文件（因此一主多从多架构对主的要求很高。</p>\n<ol>\n<li>I&#x2F;O Thread</li>\n</ol>\n<p>slave 侧的线程，负责接收从 master 请求来的日志数据，并写入 relay log（relay log 就是中转日志，负责缓存从 master 接收的日志数据。</p>\n<ol>\n<li>SQL Thread Group</li>\n</ol>\n<p>旧版本的 MySQL 可能就是单个线程，在5.?之后变成了线程组，但是因为 SQL 语句可能存在上下文语境，因此并发执行需要额外判断。</p>\n<p>该线程组用来执行从 relay log 解析出来的 SQL 语句。</p>\n<p>和 Redis 不同的是，MySQL 支持 Master-Master（主主）架构，此时需要双方各自指定自身的 server_id 防止日志的无限复制。</p>\n<p>另外的 MySQL 还支持级联复制，Slave 可以复制 Slave 节点的数据，主节点只需要创建一个 Dump Thread 去扩散日志，其他的从节点都从一级从节点复制。</p>\n<h3 id=\"Replication-Model（复制模式\"><a href=\"#Replication-Model（复制模式\" class=\"headerlink\" title=\"Replication Model（复制模式\"></a>Replication Model（复制模式</h3><p>复制模式可以对比 Kafka 的 asks 参数策略，不同的模式反映了不同的一致性和安全性保证。</p>\n<h4 id=\"Async-Model（异步模式\"><a href=\"#Async-Model（异步模式\" class=\"headerlink\" title=\"Async-Model（异步模式\"></a>Async-Model（异步模式</h4><p>异步模式下，master 不会主动推送 binlog 到从节点，在接收到客户端的 SQL 以后，本地执行完毕就会返回结果，并不会关心从库是否已经接收。</p>\n<p>该情况下，master 和 slave 可能存在明显的时间延迟，导致读写不一致，并且在 master 宕机之后如果以 slave 为新 master，可能出现数据丢失的情况。</p>\n<h4 id=\"Semi-Sync（半同步模式\"><a href=\"#Semi-Sync（半同步模式\" class=\"headerlink\" title=\"Semi-Sync（半同步模式\"></a>Semi-Sync（半同步模式</h4><p>半同步模式下，master 节点在执行完 SQL 之后会等待至少一个从库确定接收到对应 binlog 信息后才会返回结果。</p>\n<p>此时写的性能至少延迟两个 TTL，并且写得性能完全看最快的节点。</p>\n<h4 id=\"Sync（全同步模式\"><a href=\"#Sync（全同步模式\" class=\"headerlink\" title=\"Sync（全同步模式\"></a>Sync（全同步模式</h4><p>全同步模式则是进一步强化复制过程，需要全部的 slave 都已经复制 binlog 才会返回。</p>\n<h3 id=\"GTID-模式\"><a href=\"#GTID-模式\" class=\"headerlink\" title=\"GTID 模式\"></a>GTID 模式</h3><p>GTID 模式是对复制进度的表示优化，之前的流程中 slave 需要指定 binlog 的复制偏移量来获取之后的日志，但是这个比较难以界定（鬼知道我最后一条日志在 binlog 的哪里），不仅难找而且容易遗漏，所以就出现了 GTID 模式。</p>\n<p>GTID 就是 Global Transaction Identifier 即全局事务 Id，此时每个在主库上执行的事务都会指定一个唯一的 ID（全局递增，GTID 的组成由 server_id 和 transaction_id）。</p>\n<p>GTID 模式下，通过 GTID 代替了之前的 binlog 偏移量，可以清楚的界定出复制的进度，在事务提交的过程中也会一起记录，在 SQL 线程回放的过程中也会对比本地的 binlog 判断是否已经执行保证 SQL 复制的幂等性。</p>\n<h3 id=\"reference-1\"><a href=\"#reference-1\" class=\"headerlink\" title=\"reference\"></a>reference</h3><ul>\n<li><a href=\"https://www.cnblogs.com/rickiyang/p/13856388.html\">MySQL 主从复制原理不再难</a></li>\n<li><a href=\"https://blog.nowcoder.net/n/b90c959437734a8583fddeaa6d102e43\">【MySQL】主从复制实现原理详解</a></li>\n</ul>\n<h2 id=\"Explain-分析\"><a href=\"#Explain-分析\" class=\"headerlink\" title=\"Explain 分析\"></a>Explain 分析</h2><blockquote>\n<p>Explain 是 MySQL 中常规的 SQL 解析工具，能展示出SQL的部分执行逻辑和过程。</p>\n<p>分析 Explain 的输出就能帮助我们优化和改进 SQL 语句。</p>\n</blockquote>\n<h3 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h3><figure class=\"highlight jboss-cli\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs jboss-cli\">mysql&gt; explain select * from servers;<br>+<span class=\"hljs-params\">----</span>+<span class=\"hljs-params\">-------------</span>+<span class=\"hljs-params\">---------</span>+<span class=\"hljs-params\">------</span>+<span class=\"hljs-params\">---------------</span>+<span class=\"hljs-params\">------</span>+<span class=\"hljs-params\">---------</span>+<span class=\"hljs-params\">------</span>+<span class=\"hljs-params\">------</span>+<span class=\"hljs-params\">-------</span>+<br>| id | select_type | table   | type | possible_keys | key  | key_len | ref  | rows | Extra |<br>+<span class=\"hljs-params\">----</span>+<span class=\"hljs-params\">-------------</span>+<span class=\"hljs-params\">---------</span>+<span class=\"hljs-params\">------</span>+<span class=\"hljs-params\">---------------</span>+<span class=\"hljs-params\">------</span>+<span class=\"hljs-params\">---------</span>+<span class=\"hljs-params\">------</span>+<span class=\"hljs-params\">------</span>+<span class=\"hljs-params\">-------</span>+<br>|  1 | SIMPLE      | servers | ALL  | NULL          | NULL | NULL    | NULL |    1 | NULL  |<br>+<span class=\"hljs-params\">----</span>+<span class=\"hljs-params\">-------------</span>+<span class=\"hljs-params\">---------</span>+<span class=\"hljs-params\">------</span>+<span class=\"hljs-params\">---------------</span>+<span class=\"hljs-params\">------</span>+<span class=\"hljs-params\">---------</span>+<span class=\"hljs-params\">------</span>+<span class=\"hljs-params\">------</span>+<span class=\"hljs-params\">-------</span>+<br>1 row in <span class=\"hljs-keyword\">set</span> <span class=\"hljs-params\">(0.03 sec)</span><br></code></pre></div></td></tr></table></figure>\n\n<p>explain 用于展示 SQL 语句的执行计划，可以将其作为 SQL 优化的辅助工具。</p>\n<p>主要关注的几个字段如下：</p>\n<h3 id=\"possible-keys\"><a href=\"#possible-keys\" class=\"headerlink\" title=\"possible_keys\"></a>possible_keys</h3><p>可能选择索引名称。</p>\n<p>这里会将表结构中可以用到的所有索引列出，然后从中选择效率最高的执行（可能选择错误）。</p>\n<p>如果 possible_keys 为空，表示没有任何索引可以使用，所以都会作全表扫描处理。</p>\n<h3 id=\"key-x2F-key-len\"><a href=\"#key-x2F-key-len\" class=\"headerlink\" title=\"key &#x2F; key_len\"></a>key &#x2F; key_len</h3><p>最终选择的索引，以及索引的长度。</p>\n<p>key_len 肯定是越小越好，类型上 int 的匹配优于字符串匹配。</p>\n<h3 id=\"rows\"><a href=\"#rows\" class=\"headerlink\" title=\"rows\"></a>rows</h3><p>扫描行数。</p>\n<p>每个查询语句可能扫描的记录行数，InnoDB 中该行数只是一个粗略值（经抽样统计得出）。</p>\n<h3 id=\"extra\"><a href=\"#extra\" class=\"headerlink\" title=\"extra\"></a>extra</h3><p>额外信息，表示为了完成查询 MySQL 需要做的额外的事情（这里是不是指的 Server 层需要做的事情。</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">额外信息</th>\n<th align=\"center\">出现含义</th>\n<th align=\"center\">如何解决</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">using where</td>\n<td align=\"center\">表示在 Server 层需要额外的判断</td>\n<td align=\"center\">一般来说不需要关心，不会太影响查询效率</td>\n</tr>\n<tr>\n<td align=\"center\">using index</td>\n<td align=\"center\">只需要读取索引文件就可以获取全部的数据，而不需要读取数据文件，表示不需要进行回表，或者直接使用索引覆盖。</td>\n<td align=\"center\">可</td>\n</tr>\n<tr>\n<td align=\"center\">using filesort</td>\n<td align=\"center\">需要进行额外排序（不一定包含文件排序</td>\n<td align=\"center\">可以利用联合索引的相对顺序避免排序</td>\n</tr>\n<tr>\n<td align=\"center\">using_index_condition</td>\n<td align=\"center\">使用了索引下推</td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n</tr>\n</tbody></table>\n<p><a href=\"https://dev.mysql.com/doc/refman/5.6/en/explain-output.html\">MySQL - explain output format</a></p>\n<h2 id=\"Q-amp-A\"><a href=\"#Q-amp-A\" class=\"headerlink\" title=\"Q &amp; A\"></a>Q &amp; A</h2><h3 id=\"InnoDB-和-MyISAM-的区别\"><a href=\"#InnoDB-和-MyISAM-的区别\" class=\"headerlink\" title=\"InnoDB 和 MyISAM 的区别:\"></a>InnoDB 和 MyISAM 的区别:</h3><table>\n<thead>\n<tr>\n<th align=\"center\">InnoDB</th>\n<th align=\"center\">MYSQL</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">支持事务</td>\n<td align=\"center\">不支持事务</td>\n</tr>\n<tr>\n<td align=\"center\">聚簇索引（主键索引就是聚簇索引，所以必须包含主键，没有就帮你隐式创建一个</td>\n<td align=\"center\">非聚簇索引（可以没有主键</td>\n</tr>\n<tr>\n<td align=\"center\">count 需要扫索引树（有 MVCC 也没法记准确的</td>\n<td align=\"center\">会在表中记录当前行数</td>\n</tr>\n<tr>\n<td align=\"center\">支持外键（虽然没啥卵用</td>\n<td align=\"center\">不支持外键</td>\n</tr>\n<tr>\n<td align=\"center\">多级锁机制（行锁，表锁，Gap 锁</td>\n<td align=\"center\">表锁（一个烂的摆</td>\n</tr>\n</tbody></table>\n<h3 id=\"如果解决深度分页问题？\"><a href=\"#如果解决深度分页问题？\" class=\"headerlink\" title=\"如果解决深度分页问题？\"></a>如果解决深度分页问题？</h3><h3 id=\"索引失效的常见情况\"><a href=\"#索引失效的常见情况\" class=\"headerlink\" title=\"索引失效的常见情况\"></a>索引失效的常见情况</h3><table>\n<thead>\n<tr>\n<th align=\"center\">索引失效的情况</th>\n<th align=\"center\">失效原因</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\"><strong>索引列</strong>存在函数调用</td>\n<td align=\"center\">注意是对索引列的函数，对索引的函数操作可能会影响索引的有序性</td>\n</tr>\n<tr>\n<td align=\"center\">隐式的类型转换</td>\n<td align=\"center\">和上条类似，MySQL 中通常也是使用函数来进行类型转换（在 MySQL 中，字符串和数字做比较的话，是将字符串转换成数字。</td>\n</tr>\n<tr>\n<td align=\"center\">不满足最左前缀</td>\n<td align=\"center\">如果存在索引下推勉强能用</td>\n</tr>\n<tr>\n<td align=\"center\">左模糊匹配</td>\n<td align=\"center\">类似 LIKE %XX，对于字符串类型，索引的顺序是按照字典序排列的，因此左模糊匹配也会</td>\n</tr>\n</tbody></table>\n<p>索引的原理就是按照有序性进行二分（一次性排除大量数据无用数据），所以在改变了有序性之后索引失效就是理所当然的。</p>\n<h2 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h2><ul>\n<li><a href=\"https://dev.mysql.com/doc/refman/5.6/en/preface.html\">官方文档</a></li>\n</ul>\n","site":{"data":{}},"more":"<h1 id=\"MySQL（残酷学习版\"><a href=\"#MySQL（残酷学习版\" class=\"headerlink\" title=\"MySQL（残酷学习版\"></a>MySQL（残酷学习版</h1><p>[TOC]</p>\n<h2 id=\"MySQL-的整体架构\"><a href=\"#MySQL-的整体架构\" class=\"headerlink\" title=\"MySQL 的整体架构\"></a>MySQL 的整体架构</h2><p><img src=\"https://chenqwwq.oss-cn-hangzhou.aliyuncs.com/note/MySQL%E7%9A%84%E6%95%B4%E4%BD%93%E6%9E%B6%E6%9E%84-7940422.png\" alt=\"MySQL整体架构\"></p>\n<h3 id=\"连接器\"><a href=\"#连接器\" class=\"headerlink\" title=\"连接器\"></a>连接器</h3><p>连接器就是负责管理连接的，包括权限验证等等流程，因为连接是 TCP 的可能还包括连接状态的维护。</p>\n<h3 id=\"分析器\"><a href=\"#分析器\" class=\"headerlink\" title=\"分析器\"></a>分析器</h3><p>分析器的作用是对 SQL 进行词法分析，语法分析，抽出 BST，并交给后续的组件。</p>\n<h3 id=\"优化器\"><a href=\"#优化器\" class=\"headerlink\" title=\"优化器\"></a>优化器</h3><p><strong>优化器是 MySQL 中对 SQL 语法的分析器以及索引的选择器，会根据解析出进来的 SQL 语句结合索引以及取样数据选择索引。</strong></p>\n<p>因为其中还包含数据的影响，所以即使符合最左前缀匹配也无法 100% 确定是否真的会走索引。</p>\n<p>例如，如果优化器根据数据推测全表扫描的速度大于走索引再回表的速度，那么就会直接放弃索引。</p>\n<h3 id=\"执行器\"><a href=\"#执行器\" class=\"headerlink\" title=\"执行器\"></a>执行器</h3><p>执行器就相当于是一个调度器，会根据表选择的存储引擎调用不同的存储引擎的接口。</p>\n<p>执行器对于上层的优化器屏蔽了底层不同存储引擎带来的查询语法上的差异性。</p>\n<p>MySQL 的存储引擎是可插拔式的，在创建表的时候就可以使用不同的存储引擎。</p>\n<p>早期的 MySQL 还会有查询缓存层，但是在4.x版本中就已经被删除了。</p>\n<blockquote>\n<p>Q: 为什么要删除查询缓存？</p>\n</blockquote>\n<p>查询缓存是以查询语句为 Key，作为命中的要求，所以命中率并不会高，而且大量的缓存在业务逻辑层实现灵活性更高，更加可控，也就实在没必要在数据库中增加缓存机制。</p>\n<h2 id=\"MySQL-Transaction（事务\"><a href=\"#MySQL-Transaction（事务\" class=\"headerlink\" title=\"MySQL Transaction（事务\"></a>MySQL Transaction（事务</h2><p>事务的特性有如下四种，<strong>原子性（Atomicity），一致性（Consistency），隔离性（Isolation），持久性（Durability）</strong>。</p>\n<p>原子性指的是事务的操作作为一个不可再分的整体，<strong>要不同时完成要不同时失败</strong>。</p>\n<p>隔离性指的是<strong>多个事务并发执行的时候，互相之间的可见性</strong>，多个事务之间互相干扰的情况。</p>\n<blockquote>\n<p>隔离性并不是说强制的完全不能看到，类似 InnoDB 提供了多种的隔离级别，低级别隔离也有使用场景。</p>\n</blockquote>\n<p>持久性好理解，<strong>就是保证数据不丢失，在事务提交之后，事务造成的变更就是永久性的。</strong></p>\n<p>一致性指的是事务执行的前后，数据库中的数据都处于一种稳定状态，可能不太好理解，简单举例可以参考转账的操作，转账前后总额是不会增加的。</p>\n<h3 id=\"InnoDB-下事务的隔离级别\"><a href=\"#InnoDB-下事务的隔离级别\" class=\"headerlink\" title=\"InnoDB 下事务的隔离级别\"></a>InnoDB 下事务的隔离级别</h3><p>MySQL InnoDB 中提供了四种隔离级别：</p>\n<ul>\n<li>READ UNCOMMITTED 读未提交</li>\n<li>READ COMMITED 读已提交</li>\n<li>REPEATABLE READ 可重复读（Default）</li>\n<li>SERIALIZABLE  序列化</li>\n</ul>\n<p>四种隔离级别分别解决了不同的并发问题：</p>\n<table>\n<thead>\n<tr>\n<th>隔离解别</th>\n<th>脏读</th>\n<th>不可重复读</th>\n<th>幻读</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Read Uncommitted</td>\n<td>Y</td>\n<td>Y</td>\n<td>Y</td>\n</tr>\n<tr>\n<td>Read Committed</td>\n<td>N</td>\n<td>Y</td>\n<td>Y</td>\n</tr>\n<tr>\n<td>Repeatable(default)</td>\n<td>N</td>\n<td>N</td>\n<td>Y（InnoDB - N）</td>\n</tr>\n<tr>\n<td>Serializable</td>\n<td>N</td>\n<td>N</td>\n<td>N</td>\n</tr>\n</tbody></table>\n<blockquote>\n<p>简单理解一下这三种并发问题：</p>\n<p><strong>脏读（读未提交），事务读取到了其它事务中未提交的数据。</strong></p>\n<p><strong>不可重复读，事务前后多次读取内容不一致。</strong></p>\n<p><strong>幻读，事务前后多次读取总量不一致。</strong></p>\n</blockquote>\n<p><strong>RC  解决脏读依靠的就是锁和MVCC。</strong></p>\n<blockquote>\n<p>MVCC 在 InnoDB 的 RR 和 RC 级别下表现是不一样的，RR 级别下，MVCC 以第一次 SELECT 查到的数据为主不会再创建新的快照，但是 RC 级别下，MVCC 机制每次都会创建新的快照，所以也会存在前后数据不一致的情况。</p>\n</blockquote>\n<h3 id=\"InnoDB-中-ACID-的实现\"><a href=\"#InnoDB-中-ACID-的实现\" class=\"headerlink\" title=\"InnoDB 中 ACID 的实现\"></a>InnoDB 中 ACID 的实现</h3><p>首先是原子性，<strong>InnoDB 使用 Undo Log 实现了原子性</strong>，基本原则就是在失败之后回滚之前的操作。</p>\n<blockquote>\n<p>InnoDB 的 Undo Log 会根据数据行的版本指针组成一个链表，回滚时可以根据链表向上追溯。</p>\n</blockquote>\n<p><strong>隔离性，InnoDB 的隔离性是依靠 MVCC 和 锁来实现的。</strong></p>\n<p>InnoDB 中提供了多种不同的隔离级别，每个隔离级别使用不同类型的锁和 MVCC 表现形式来支持隔离性。</p>\n<blockquote>\n<p>锁定义了事务并发时访问权限，MVCC 减少了部分上锁的情况（主要还是增加性能。</p>\n</blockquote>\n<p><strong>持久性，InnoDB 中的持久性是依靠的 redo log 以及 undo log 实现的。</strong></p>\n<blockquote>\n<p>并说不清为什么还需要 undo log，但是因为 WAL 机制，redo log 是在数据修改前就已经持久化的，在事务提交的时候可以保证 redo log 已经落盘了，大部分情况下 redo log 就已经能保障数据的持久性了。</p>\n</blockquote>\n<p>一致性… emmm 不太清楚，应该是其他的东西一起保证的。</p>\n<h3 id=\"InnoDB-中的MVCC（多版本并发控制）\"><a href=\"#InnoDB-中的MVCC（多版本并发控制）\" class=\"headerlink\" title=\"InnoDB 中的MVCC（多版本并发控制）\"></a>InnoDB 中的MVCC（多版本并发控制）</h3><p>MVCC（<strong>Multi-Version  Concurrency Control</strong>） 在我看来是 InnoDB 中一个非常重要的特性，很大程度上提高了 MySQL 的并发性能。</p>\n<p>MVCC 机制在数据行中保留了多版本的数据，使用数据行隐藏字段 roll_pointer（回滚指针）串联起一个版本链，可以顺着版本链回滚数据行。</p>\n<blockquote>\n<p>因为是链是逐个遍历直到找到当前事务可以看到的数据行，所以当链很长的时候可能会拖慢查询。</p>\n</blockquote>\n<p>基于 MVCC，InnoDB 引入了一个快照读的概念，相对应的还有当前读，快照读指的是当前查询语句读取的是快照的内容，当前读读取的就是当前的真实数据。</p>\n<blockquote>\n<p>这里的快照不同于 Redis 的 RDB，是基于隐藏字段 trx_id 实现的可读范围标识。 </p>\n</blockquote>\n<p>InnoDB 的行记录包含了两个隐藏字段：</p>\n<table>\n<thead>\n<tr>\n<th>字段名</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>trx_id</td>\n<td>事务Id，由存储引擎统一下发，确保递增</td>\n</tr>\n<tr>\n<td>roll_pointer</td>\n<td>回滚指针</td>\n</tr>\n</tbody></table>\n<p>回滚指针指向的是当前行上次的数据，以此形成一个版本链，如果需要回滚到最先版本的数据，需要顺着 roll_pointer 一直往上。</p>\n<p><strong>MVCC 根据 trx_id 的大小界定出可见范围。</strong></p>\n<p>事务开始时，会额外保存当前最大和最小的 trx_id，并且保存当前未提交的事务 trx_id 数组。</p>\n<blockquote>\n<p>这里的事务开始是指第一次查询，而非 start tran。</p>\n</blockquote>\n<p>小于最小的 trx_id 标识已经提交，所以可见，大于最大的 trx_id 表示开始时还未开启，所以不可见。</p>\n<p>如果在中间，则判断 trx_id 数组是否包含来标识是否可读。</p>\n<p><strong>MVCC 特性仅仅在 RC 和 RR 级别下生效，</strong>并且在两个级别下的表现形式不同。</p>\n<p><strong>在 RC 级别下，每次查询都会创建一个快照，而在 RR 级别下，只有第一次查询会创建一个快照。</strong>（Important</p>\n<blockquote>\n<p>这就导致了事务的表现不同。</p>\n<p>在 RC 级别下，事务可以查看到别的事务已经提交的数据，这样就造成了不可重复读，也无法避免脏读。</p>\n<p>而在 RR 级别下，事务只会以第一次查询语句为准创建快照，所以 RR 级别下不会出现所谓的不可重复读问题。</p>\n</blockquote>\n<h3 id=\"参考文档\"><a href=\"#参考文档\" class=\"headerlink\" title=\"参考文档\"></a>参考文档</h3><ul>\n<li><a href=\"https://mp.weixin.qq.com/s/dMErouLlrte84Nmb97MkTQ\">相见恨晚，MVCC 这么理解，早就通关了</a></li>\n<li><a href=\"https://draveness.me/mysql-transaction/\">『浅入深出』MySQL 中事务的实现</a></li>\n</ul>\n<h2 id=\"MySQL-Index（索引\"><a href=\"#MySQL-Index（索引\" class=\"headerlink\" title=\"MySQL Index（索引\"></a>MySQL Index（索引</h2><p>索引就是用来加速查询速度的特殊结构。</p>\n<h3 id=\"InnoDB-中的索引结构\"><a href=\"#InnoDB-中的索引结构\" class=\"headerlink\" title=\"InnoDB 中的索引结构\"></a>InnoDB 中的索引结构</h3><p><strong>常见的索引结构有B+树，B树或者 Hash 索引，倒排索引</strong>。</p>\n<blockquote>\n<p>InnoDB 中以B+树为主，存在自适应 Hash索引，提供特殊形式的查询优化。</p>\n</blockquote>\n<bf>\n\n<p>B+ 树就是平衡的搜索树，可以简单理解为是二叉搜索树（BST）或者二叉平衡树（AVL）的变种。</p>\n<p>AVL <strong>就是任意节点左右子树的高度差不超过1的树，</strong>为了维持这种特性需要大量的旋转操作（添加最多旋转两次，但是删除最多需要 Lg(N)，并且随着深度的增加搜索的效率也会慢慢降低，在动辄千万亿万的数据的数据库中，二叉搜索树明显是不合适的。</p>\n<p>M 阶的B+树，根节点的节点数为[2,M]，索引节点的节点数为[M&#x2F;2,M]，<strong>而且保证了数据的有序性质</strong>，所以层次更低，查询速度更快也更平稳。</p>\n<blockquote>\n<p>因为B+树数据有序性的特点，所以如果不使用单调递增的索引键，在插入和删除操作时候就会存在页分裂和页合并的问题，十分影响效率。</p>\n</blockquote>\n<p>B 树和 B+树 的区别如下：</p>\n<ol>\n<li>B+ 树的所有数据都在子节点中，这样的<strong>查询更加稳定</strong>，所有的查询都需要树高度次的查询。</li>\n<li>B+ 树所有的子节点<strong>组成一个链表</strong>，这样非常便于<strong>实现范围查询</strong>。</li>\n</ol>\n<p>相对于 B 树和 Hash 来说，B+树更加符合磁盘的特性。</p>\n<blockquote>\n<p>为什么说 B+ 树更加符合磁盘特性呢？</p>\n</blockquote>\n<p>相比于 Hash 来说，B+ 树的层级更低（往往只有三四层，对于 B+ 树的存储来说，往往一个节点就是一个数据页，因此正常情况下 3～4 次磁盘 IO 就可以获取到想要的内容，并且 B+ 树将所有的叶子节点连成链，更加适合范围查询。</p>\n<p>相比于 B 树，除去叶子节点成链不说，B+ 树的非叶子节点不保存数据，具有更稳定的查询效率，B 树虽然在某些查询中可以更快速，但是整体查询并不稳定，读取同样大小的索引页 B+ 树有更多的索引项。</p>\n<blockquote>\n<p>MySQL 为什么不使用 Hash 表或者跳表作为索引实现？</p>\n</blockquote>\n<p>Hash 表只适合等值查询，几乎无法做范围查询。</p>\n<blockquote>\n<p>为什么不使用跳表的原因如下：</p>\n</blockquote>\n<p>MySQL 的主要数据还是保存在磁盘中，相对于跳表，B+ 树更加适配磁盘的特性，每个索引块可以保存在一个盘页。</p>\n<p>（以 Redis 为例，如果纯内存的数据库跳表应该和 B+ 树访问速度差不多。</p>\n<h3 id=\"索引分类\"><a href=\"#索引分类\" class=\"headerlink\" title=\"索引分类\"></a>索引分类</h3><h4 id=\"聚集索引和非聚集索引\"><a href=\"#聚集索引和非聚集索引\" class=\"headerlink\" title=\"聚集索引和非聚集索引\"></a>聚集索引和非聚集索引</h4><p>聚集索引并<strong>不是一种单独的索引类型，而是一种数据的存储方式</strong>，在 InnoDB 中，主键索引就是聚集索引，<strong>所有的数据都保存在主键索引的叶子节点中，数据按照主键的顺序排列存储。</strong></p>\n<p>InnoDB 中，主键索引决定了数据的物理存储顺序，应该更能理解主键的乱序插入带来的页分裂等等问题了。</p>\n<blockquote>\n<p>如果没有明确定义表的主键，MySQL 也会挑选一个唯一键作为主键，如果没有唯一键则会生成一个 rowId 作为主键。</p>\n</blockquote>\n<p>非聚集索引就是非聚集索引，<strong>和聚集索引相反的它的逻辑顺序和物理的存储顺序就是完全无关的。</strong></p>\n<p>InnoDB 的实现中，次级索引都是非聚集索引，保存的是主键。</p>\n<blockquote>\n<p>所以 InnoDB 中存在回表操作，就是在一个索引树中无法完全确定数据是否可用时，先返回主键，查询完整的数据再来判断。</p>\n<p>增加单索引中字段，索引下推，索引联合都可以起到减少回表的作用。</p>\n</blockquote>\n<p>MyISAM 中的非聚集索引实现不同，MyISAM 中所有的索引树都是非聚集索引，包括主键在内，保存的都是数据的真实地址。</p>\n<blockquote>\n<p>MyISAM 和 InnoDB 的不同在这里就有体现：</p>\n<p>MyISAM 支持没有主键，理论上来说 MyISAM 的主键索引和次级索引没有任何区别。</p>\n<p>MyISAM 的索引中保存的都是数据地址，而 InnoDB 的次级索引保存的主键。</p>\n</blockquote>\n<h4 id=\"稠密索引和稀疏索引\"><a href=\"#稠密索引和稀疏索引\" class=\"headerlink\" title=\"稠密索引和稀疏索引\"></a>稠密索引和稀疏索引</h4><p>稠密索引会为每一个键值建立一个索引记录，可以i加快查询速度，但是需要更多的空战占用以及维护成本。（类似 MySQL 中的主键索引</p>\n<p>稀疏索引不会为每一个键值建立索引，这种索引往往出现在有序的排序中，例如跳表结构就是稀疏索引的典型实现（Mongo 以及 Kafka 都算是稀疏索引，Mongo 的文档可能会缺失某些字段？Kafka 是以时间戳为序间隔一定长度建立索引项</p>\n<h4 id=\"唯一索引和非唯一索引\"><a href=\"#唯一索引和非唯一索引\" class=\"headerlink\" title=\"唯一索引和非唯一索引\"></a>唯一索引和非唯一索引</h4><p>唯一索引就是在表内需要保证字段值全局唯一的索引。</p>\n<blockquote>\n<p>唯一索引是保证不重复调用或者记录唯一的有效手段。</p>\n<p>比如希望点赞数不重复被记录，那么就可以将帖子Id和用户Id组成一个唯一索引，确保一个用户只能对一个帖子点赞一次。</p>\n</blockquote>\n<p>在 InnoDB 中唯一索引还会导致一些另外的问题，有好也有坏，但影响其实都不大，仅做了解：</p>\n<ol>\n<li>首先等值查询时，如果查找字段有唯一索引，那么查询到一条记录就会返回，而非唯一索引会顺着链表继续查询到一条不相等的记录。</li>\n<li>在插入或者修改数据的时候，InnoDB 的 Change Buffer 可能有效的减少随机读操作，而唯一索引无法使用该特性，因为在修改或者插入前都需要判断是否唯一</li>\n</ol>\n<blockquote>\n<p>Q：什么是 Change Buffer？</p>\n</blockquote>\n<p>Change Buffer 早期又称为 Insert Buffer，在数据插入时生效，后面扩展到数据的修改。</p>\n<p>Change Buffer 主要优化非唯一辅助索引的维护成本。</p>\n<p>在涉及到数据修改时，如果记录所在数据页在内存中则直接修改，如果不在可能需要先加载再修改，此时这个加载过程就是随机读的过程，相对于顺序读而言随机读的效率低了不止一点点。</p>\n<p>所以在修改的时候，InnoDB 会把这些更新操作缓存到 Changge Buffer 中，日志正常保存，即使宕机也能根据日志恢复。</p>\n<p>保存在 Change Buffer 的数据在下一次读取到数据页时合并，也就是 Merge 过程。</p>\n<h4 id=\"前缀索引\"><a href=\"#前缀索引\" class=\"headerlink\" title=\"前缀索引\"></a>前缀索引</h4><p>前缀索引是指在一个长字符串字段中，可以选取其中N字节长度的前缀作为索引。</p>\n<blockquote>\n<p>长字符串的索引除了使用前缀索引，还可以直接独立一个字段做hash，搜索会更加全面。</p>\n</blockquote>\n<h3 id=\"索引使用的相关算法\"><a href=\"#索引使用的相关算法\" class=\"headerlink\" title=\"索引使用的相关算法\"></a>索引使用的相关算法</h3><h4 id=\"最左前缀匹配\"><a href=\"#最左前缀匹配\" class=\"headerlink\" title=\"最左前缀匹配\"></a>最左前缀匹配</h4><p>最左前缀匹配在联合索引中是一个非常重要的概念，<strong>就是依据左前缀判断是否可以使用该索引。</strong></p>\n<blockquote>\n<p>简单的例子，联合索引[a,b,c]，可是使用该索引的查询条件是[a]，[a,b]，[a,b,c]，但是绝对不包括[b,c]等不以a开头的查询条件</p>\n</blockquote>\n<p>本质上来说，联合索引在 InnoDB 中的数据结构仍然是一棵 B+ 树，并且索引节点保存以声明顺序所表示的索引数据。</p>\n<blockquote>\n<p>例如[a,b,c]，在索引树中的排序就是先按照a排序，a相同按照b排序，b相同按照c排序。</p>\n<p>！！！利用索引有序的结构，可以完美的优化查询语句中的排序，但是在联合索引中，如果搜索条件是[a,b]并且按照b排序就不会出现文件排序，因为在a相同时，b本身就是有序的。</p>\n<p>但是在搜索条件为[a,c]时，当a相同时，c并非有序，所以查询会出现 file sort。</p>\n</blockquote>\n<h4 id=\"覆盖索引\"><a href=\"#覆盖索引\" class=\"headerlink\" title=\"覆盖索引\"></a>覆盖索引</h4><p>覆盖索引是指在索引树中的内容已经包含了需要查找所需要所有字段，所以可以直接返回而跳过回表。</p>\n<blockquote>\n<p>回表可以简单理解为使用二级索引查询获得主键之后，为了获得更多的数据而需要再一次扫描主键索引树。</p>\n<p>！！一般来说扫描二级索引树获得的主键，会返回给 Server 层，由 Server 再次发起查询。</p>\n</blockquote>\n<p>有些时候大量的回表会导致查询的效率十分低下，此时适当冗余索引字段也不失为一个好办法。</p>\n<h4 id=\"索引下推\"><a href=\"#索引下推\" class=\"headerlink\" title=\"索引下推\"></a>索引下推</h4><p>索引下推是在 MySQL 5.6 引入的对索引使用方式的优化，在次级索引树的遍历过程中，尽量多的使用索引树中的字段。</p>\n<blockquote>\n<p>在5.6之前，[a,b,c]索引查询[a,c]，只能使用到a字段，c字段就需要回表之后判断，如果a的筛率不高就会有大量的回表，</p>\n<p>而在5.6以后，c字段也能下推判断，进一步的判断也减少了回表的记录数，加快了查询速度。</p>\n</blockquote>\n<h4 id=\"索引联合\"><a href=\"#索引联合\" class=\"headerlink\" title=\"索引联合\"></a>索引联合</h4><p>索引联合了解的不多，在使用or的等值查询过程中可能会用到索引联合，搜索两棵索引树在做值的整合，相当于 union all 吧。</p>\n<blockquote>\n<p>虽然索引有这好那好，但是走哪个索引还是依据优化器的，优化器也是根据抽样统计信息的，偶尔也可能出错。</p>\n</blockquote>\n<h3 id=\"建立索引的思考\"><a href=\"#建立索引的思考\" class=\"headerlink\" title=\"建立索引的思考\"></a>建立索引的思考</h3><ol>\n<li>联合索引的字段排序（a，b，c 的联合索引，b 相对于 a 有序，c 相对于 b 有序，如果需要以a排序就可以建立（b，c，a 或者 c，b，a）索引，消除排序</li>\n<li>字段的区分度（比如 sex，存它干嘛呢，撑死了三个值</li>\n<li>实用程度（？，有些使用频率低的 SQL，可能并不需要特定的索引，索引也需要消耗一定的空间，并且降低更新和插入的效率。</li>\n</ol>\n<h2 id=\"MySQL-Log（日志\"><a href=\"#MySQL-Log（日志\" class=\"headerlink\" title=\"MySQL Log（日志\"></a>MySQL Log（日志</h2><p>MySQL 中存在多种日志，比如 <strong>binlog ，redo log 以及 undo log。</strong></p>\n<p>redo log 和  undo log 属于 InnoDB 层的日志，而 binlog 属于 MySQL Server 层的日志。</p>\n<p>binlog 主要用于主从复制，数据归档（可以单独根据 binlog 实现数据恢复，但不能保证 crash-safe</p>\n<p>redo log 和 undo log 共同实现原子性，在正常的回滚下可能仅仅需要 undo log 来进行行记录的回滚，但是如果是经过 crash 则需要 redo log 来判断事务是否已经提交。</p>\n<p>undo log 在 InnoDB 中另外实现了 MVCC。</p>\n<h3 id=\"binlog（归档日志\"><a href=\"#binlog（归档日志\" class=\"headerlink\" title=\"binlog（归档日志\"></a>binlog（归档日志</h3><p> binlog 属于归档日志，在 MySQL 中属于 Server 层日志， <strong>MySQL 中所有的存储引擎都会记录该日志。</strong></p>\n<p>binlog  记录了所有的<strong>数据库变更操作</strong>，包括 UPDATE，INSERT，DELETE，也包括表结构的修改 ALTER TABLE 等。</p>\n<p><strong>binlog 的主要作用是 1. 主从复制  2. 数据归档（奔溃后的适度恢复）。</strong></p>\n<p>但是 binlog 并不能提供 crash-safe 的保证。</p>\n<h4 id=\"日志格式\"><a href=\"#日志格式\" class=\"headerlink\" title=\"日志格式\"></a>日志格式</h4><p><strong>binlog 有如下三种格式：</strong></p>\n<ol>\n<li>statement</li>\n</ol>\n<p>statement 完整的保存执行的语句，但是因为 now() 等即时函数的存在复制的异常，所以用于复制的情况下会出现异常。</p>\n<ol>\n<li>row</li>\n</ol>\n<p><strong>row 记录的是表中数据 完整的变更，比如 now() 就会直接记录当前时间，数据较为准确，不会受语句上下文环境的影响</strong></p>\n<p>但是相对的日志文件会比较大，因为 statement 一个删除语句，row 会保存所有的行记录。</p>\n<ol>\n<li>mixed</li>\n</ol>\n<p>mixed 基本上就是混合两种的情况。</p>\n<h4 id=\"相关配置\"><a href=\"#相关配置\" class=\"headerlink\" title=\"相关配置\"></a>相关配置</h4><p>再说两个 binlog 相关的主要配置：</p>\n<ol>\n<li>binlog_cache_size</li>\n</ol>\n<p>该值表示在 MySQL 中 binlog 缓冲区的大小，用于缓存事务产生的 binlog。</p>\n<p><strong>binlog cache 是线程私有的，不同线程之间不共享缓冲区。</strong></p>\n<p>因为一个事务中可能涉及多个更新语句，并且多个更新语句不能拆分写入，因此需要单独一个缓冲区。</p>\n<ol>\n<li>sync_binlog</li>\n</ol>\n<p>binlog 的 fsync 刷盘策略，有如下几种配置形式：</p>\n<ul>\n<li>0 - 系统自由决定何时刷盘，所有 binlog 只做 write</li>\n<li>1 - 每次都需要刷盘</li>\n<li>n - 每次提交事务都会 write，但是n次的操作之后才会进行刷盘</li>\n</ul>\n<p>为0时性能最好，但是如果系统宕机，会丢失未落盘的内容。</p>\n<h3 id=\"redo-log（重做日志\"><a href=\"#redo-log（重做日志\" class=\"headerlink\" title=\"redo log（重做日志\"></a>redo log（重做日志</h3><p>redo log 是 InnoDB 的日志，根据 Write Ahead Log（WAL）机制和 force log at commit 机制保证数据的持久性。</p>\n<p>WAL（Write Ahead Log ）就是预写日志技术，在 InnoDB 中所有的修改都需要写日志，再做修改内存数据，同时在提交事务的时候也需要先将日志落盘。</p>\n<p>所以理论上 redo log 可以单独提供 crash-safe 的保证。</p>\n<p>redo log 中记录的是每次修改的物理日志，即每个数据页的修改（包含主键索引和次级索引。</p>\n<h4 id=\"redo-log-buffer\"><a href=\"#redo-log-buffer\" class=\"headerlink\" title=\"redo log buffer\"></a>redo log buffer</h4><p>InnoDB 中的 redo log 有一个固定的大小的缓冲区，并且首尾相连组成一个环，环上有两个主要的指针: check_point 和 write_pos。</p>\n<p><img src=\"https://chenqwwq.oss-cn-hangzhou.aliyuncs.com/note/16a7950217b3f0f4ed02db5db59562a7-7940422.png\" alt=\"img\"></p>\n<p>在 write_pos 和 check_point 之间的就是日志的可写范围，如果刷盘不及时导致 write_pos 追上了 check_point，就会开启强制的刷盘（所以在 MySQL 大量写的时候会有瞬间抖动的现象。</p>\n<p>另外在 MySQL 的后台线程也会定时刷盘，在正常关闭 MySQL 的时候也会将 redo log 落盘。</p>\n<h4 id=\"redo-log-的配置\"><a href=\"#redo-log-的配置\" class=\"headerlink\" title=\"redo log 的配置\"></a>redo log 的配置</h4><p>redo log 的刷盘策略也有参数控制 - <strong>innodb_fluish_log_at_trx_commit</strong>（这个非常非常重要！。</p>\n<ol>\n<li>innodb_fluish_log_at_trx_commit</li>\n</ol>\n<p>该参数为1时，每次的 redo log 都会调用 fsync，真正落盘持久化保存。</p>\n<h3 id=\"undo-log（回滚日志\"><a href=\"#undo-log（回滚日志\" class=\"headerlink\" title=\"undo log（回滚日志\"></a>undo log（回滚日志</h3><p>undo log 在 InnoDB 中用于实现 MVCC 和原子性。</p>\n<p>InnoDB 在修改行记录都会带有几个隐藏字段：</p>\n<ol>\n<li>TRX_ID -  修改的事务Id（事务 Id 由 MySQL 统一下发保证全局唯一并且递增。</li>\n<li>ROLL_PTR - 回滚指针，指向旧版本数据，数据行根据指针组成一个单向链表（新 -&gt; 旧</li>\n</ol>\n<p><strong>MVCC 的实现就是在查询的时候沿着 ROLL_PTR 遍历到一个当前事务可见的行记录并返回（因此也存在 undo log 记录太多，导致查询缓慢的问题。</strong></p>\n<p><strong>原子性的实现就是直接替换当前行记录，修改都是会上锁的所以不存在多个修改并行的情况。</strong></p>\n<p>undo log 在 5.6 之后记录在单独的表空间，并且使用回滚段作为组织的形式。</p>\n<blockquote>\n<p>所以 undo log 并算不上 InnoDB WAL 机制的实现，因为 undo log 自身的持久化都要基于 redo log。</p>\n</blockquote>\n<p>undo log 不会一直存在，当事务提交的时候 undo log 就没有作用了（已经提交了，当前事务不需要回滚了），但是是否要删除还得看对于目前还存活的事务 undo log 是否可用。</p>\n<p>最终的删除还是根据后台的 purge 线程决定。</p>\n<h3 id=\"binlog-和-redo-log-的-2PC（二阶段提交\"><a href=\"#binlog-和-redo-log-的-2PC（二阶段提交\" class=\"headerlink\" title=\"binlog 和 redo log 的 2PC（二阶段提交\"></a>binlog 和 redo log 的 2PC（二阶段提交</h3><p><strong>binlog 和 redo log 需要做二阶段提交，保证双方日志的一致性，保证经过 binlog 复制的操作不会丢失或者被回滚。</strong></p>\n<p>之所以要保证一致性的原因是因为 binlog 作为归档日志以及复制功能基础，如果 binlog 已经写入的数据，redo log 回滚，就会导致主从或者恢复前后的数据不一致。</p>\n<p>二阶段提交的流程如下：</p>\n<ol>\n<li>准备阶段（Storage Engine（InnoDB） Transaction Prepare Phase）</li>\n</ol>\n<p>该阶段生成 XID（事务Id），进入 PREPARED 阶段，此时 binlog 不需要落盘，但 redo log 需要先落盘。</p>\n<p>该阶段可能执行多次，每次修改都需要将 redo log 落盘。</p>\n<ol>\n<li>提交阶段（Storage Engine（InnoDB）Commit Phase）</li>\n</ol>\n<p>如果将事务提交，则将 binlog 落盘，如果回滚则使用 undo log 进行回滚。</p>\n<ol>\n<li>完成阶段</li>\n</ol>\n<p>事务提交或者回滚都需要看情况清除对应的 undo log。</p>\n<p>binlog 在 2PC 中充当了事务的协调者（Transaction Coordinator），并且以 binlog 是否写入来判断事务是否成功，使用 XID 建立当前日志之间的对应关系。</p>\n<p>在恢复的时候，redo log 检查到最近的 checkpoint，然后查看之后的日志，需要确定事务是否已经提交则通过 XID 找到对应的 binlog 俩判断 commit 状态。</p>\n<h3 id=\"group-commit（组提交策略\"><a href=\"#group-commit（组提交策略\" class=\"headerlink\" title=\"group commit（组提交策略\"></a>group commit（组提交策略</h3><p><a href=\"https://www.modb.pro/db/62473\">沙尘暴也阻挡不了学习的脚步– 面试官：你竟然不知道MySQL的组提交</a></p>\n<h3 id=\"checkpoint（检查点\"><a href=\"#checkpoint（检查点\" class=\"headerlink\" title=\"checkpoint（检查点\"></a>checkpoint（检查点</h3><p><strong>checkpoint 就是将脏页刷回磁盘的机制。</strong></p>\n<p>当 MySQL 重启后会第一时间定位到最后的 checkpoint，在 checkpoint 之前的数据就不需要做恢复，只需要对其后的数据做恢复（按照 redo log。</p>\n<p>checkpoint 可以分为以下两种：</p>\n<ul>\n<li>Sharp Checkpoint</li>\n</ul>\n<p>在当 MySQL 关闭的时候，需要将所有的脏页刷回磁盘，此时 checkpoint 会直接拉到日志最末尾。</p>\n<ul>\n<li>Fuzzy Checkpoint</li>\n</ul>\n<p>基本就是刷脏页的触发时机，包含后台定时线程触发，redo log buffer 里 write_point 追上 checkpoint 触发，LRU 空闲页面不够的刷盘。</p>\n<h3 id=\"LSN（Log-Sequence-Number，日志序列号\"><a href=\"#LSN（Log-Sequence-Number，日志序列号\" class=\"headerlink\" title=\"LSN（Log Sequence Number，日志序列号\"></a>LSN（Log Sequence Number，日志序列号</h3><p>LSN 表示的就是日志的序号，在 InnoDB 中占8个字节。</p>\n<p>表空间中的数据页、缓存页、内存中的 rodo log、磁盘中的 redo log 以及 checkponit 都有LSN标记。</p>\n<h3 id=\"崩溃恢复的流程\"><a href=\"#崩溃恢复的流程\" class=\"headerlink\" title=\"崩溃恢复的流程\"></a>崩溃恢复的流程</h3><h3 id=\"reference\"><a href=\"#reference\" class=\"headerlink\" title=\"reference\"></a>reference</h3><ul>\n<li><a href=\"https://huzb.me/2019/04/24/redo-undo%E5%92%8Cbinlog/\">Redo log,Undo log 和 Binlog</a></li>\n<li><a href=\"https://www.cnblogs.com/f-ck-need-u/p/9010872.html\">详细分析MySQL事务日志(redo log和undo log)</a></li>\n</ul>\n<h2 id=\"InnoDB-特性\"><a href=\"#InnoDB-特性\" class=\"headerlink\" title=\"InnoDB 特性\"></a>InnoDB 特性</h2><h3 id=\"一、-Change-Buffer（修改缓存\"><a href=\"#一、-Change-Buffer（修改缓存\" class=\"headerlink\" title=\"一、 Change Buffer（修改缓存\"></a>一、 Change Buffer（修改缓存</h3><p>Change Buffer 的主要作用就是<strong>缓存对二级（辅助）非唯一索引的修改</strong>（早期只在 Insert 操作中生效，称为 Insert Buffer。</p>\n<p>Changer Buffer 属于日志的一种，在 InnoDB 底层的 Buffer Pool 中会占据一定的空间。</p>\n<p>如果没有 Change Buffer，在一次数据更新中会需要将数据所有的索引树加载到 Buffer Pool 之后再做更新（因为 Redo Log 的存在，所以此时 Buffer Pool 不需要立即刷到磁盘中。</p>\n<p><strong>Change Buffer 会在适当的时候进行 Merge</strong>，例如当索引页被加载到 Buffer Pool 的时候，或者服务空闲的时候，服务关闭之前等等。</p>\n<p>Change Buffer 的机制可以和 redo log 做类比，redo log 减少了随机写的操作，而 Change Buffer 减少了随机读的操作（对于磁盘操作顺序操作比随机操作快了好几倍。</p>\n<h3 id=\"二、Double-Write（两次写\"><a href=\"#二、Double-Write（两次写\" class=\"headerlink\" title=\"二、Double Write（两次写\"></a>二、Double Write（两次写</h3><p>InnoDB 的两次写是为了防止部分页刷新的问题。</p>\n<p>默认的 InnoDB 内部的 Buffer Pool 的页大小为 16kb，但是系统写文件却大部分以 4kb 为单位，此时可能就出现页数据没有被完全写入就奔溃的情况。</p>\n<p>MySQL 在磁盘共享空间中会创建一个 Double Write 的区域用于存放临时数据。</p>\n<p>所有的脏数据写入会分为两次，一次写入 Double Write 的磁盘区，而后在将脏页具体刷盘。</p>\n<h3 id=\"三、Flush-Neighbor-Page（刷新邻接页\"><a href=\"#三、Flush-Neighbor-Page（刷新邻接页\" class=\"headerlink\" title=\"三、Flush Neighbor Page（刷新邻接页\"></a>三、Flush Neighbor Page（刷新邻接页</h3><p>刷脏页的时候连带着将附近的一起刷了（处处透露着优化。</p>\n<h3 id=\"四、自适应-Hash-索引\"><a href=\"#四、自适应-Hash-索引\" class=\"headerlink\" title=\"四、自适应 Hash 索引\"></a>四、自适应 Hash 索引</h3><p>TODO</p>\n<h3 id=\"InnoDB-的内存管理（LRU\"><a href=\"#InnoDB-的内存管理（LRU\" class=\"headerlink\" title=\"InnoDB 的内存管理（LRU\"></a>InnoDB 的内存管理（LRU</h3><p><strong>InnoDB 底层会申请一片的 Buffer Pool 用于保存数据页以及其他数据，默认情况下一页为 16kb（通过 innodb_page_size 控制。</strong></p>\n<p>数据页会根据 LRU 算法进行保存，InnoDB 的 LRU 经过一定的优化，链表将其前 3&#x2F;8 的部分作为热数据区，后面的属于冷数据区，中间点可以称之为 midpoint。</p>\n<p><img src=\"https://chenqwwq.oss-cn-hangzhou.aliyuncs.com/note/v2-b1542fa213b5322ed17364411af8cf99_1440w-7940422.jpg\" alt=\"img\"></p>\n<p>读取的新数据并不是直接添加到链表的头部，而是添加到冷区头部，在一定的时间内被访问才会进入到热区。</p>\n<p>再次基础上，LRU 还优化了热区的移动逻辑，热区前1&#x2F;4的数据被访问时不会再被移动（用来减少指针移动带来的锁。</p>\n<p>此类优化适合数据库查询相结合的，因为部分查询可能会大量查询到无用的数据页（类似全表扫描），如果一股脑全部填充到首部会将真实的热数据冲散。</p>\n<h4 id=\"页分裂问题\"><a href=\"#页分裂问题\" class=\"headerlink\" title=\"页分裂问题\"></a>页分裂问题</h4><p>InnoDB 中每张表都要求必须有一个主键Id（没有就隐式生成一个 row_id，并且主键索引就是聚簇索引，因此都是按照主键 Id 的顺序存放的数据。</p>\n<p>当前主键 Id 递增时，每次都是在最后一页新增一行数据，如果超出则新申请一页，但当在两个主键中插入一个中间值时，此时如果页面数据也是满的就可能产生页分裂的情况。</p>\n<p>页分裂的情况会导致部分数据需要被拷贝到新的数据页，因此也会显著降低插入的效率。</p>\n<h2 id=\"MySQL-锁相关\"><a href=\"#MySQL-锁相关\" class=\"headerlink\" title=\"MySQL 锁相关\"></a>MySQL 锁相关</h2><p>MySQL 中的锁需要根据存储引擎的不同来说。</p>\n<p>在 MyISAM 中仅仅只有表锁，所有的插入操作都需要事先锁表，而 InnoDB 支持表锁，行锁，甚至多级上锁。</p>\n<h3 id=\"InnoDB-的基础锁类型\"><a href=\"#InnoDB-的基础锁类型\" class=\"headerlink\" title=\"InnoDB 的基础锁类型\"></a>InnoDB 的基础锁类型</h3><p>InnoDB 中根据划分依据的不同存在多种不同的锁。</p>\n<p>根据锁的粒度，或者说锁的目标来划分，存在以下几种锁：<strong>行锁，表锁，间隙锁。</strong></p>\n<p>根据锁的排他性或者锁的目标行为来划分，存在<strong>写锁和读锁。</strong></p>\n<h3 id=\"二阶段锁协议\"><a href=\"#二阶段锁协议\" class=\"headerlink\" title=\"二阶段锁协议\"></a>二阶段锁协议</h3><p><strong>二阶段锁协议的简单理解就是随机上锁，最终（事务提交）解锁。</strong></p>\n<p><strong>在 InnoDB 中加锁的过程是根据语句的执行过程慢慢加的。</strong></p>\n<blockquote>\n<p>例如 <code>INSERT INTO ... SELECT ... FROM</code> 语句，该语句如果用于迁表，那么就会感觉到上锁的过程是跟随语句的执行过程慢慢发展到锁表。</p>\n</blockquote>\n<p><strong>而锁的释放是在事务提交之后一次性释放的。</strong></p>\n<blockquote>\n<p>中间可能会有一些优化，类似于 AUTO_INCREMENT 带来的插入锁，会提前释放，并且一些行锁也可能提前释放，但总得来说大部分的锁都还是在事务提交时被释放的。</p>\n</blockquote>\n<h3 id=\"读锁和写锁\"><a href=\"#读锁和写锁\" class=\"headerlink\" title=\"读锁和写锁\"></a>读锁和写锁</h3><p>读锁和写锁是锁的两个程度，读锁就是所谓的排他锁，而写锁就是所谓的共享锁。</p>\n<blockquote>\n<p>Javaer 可以直接联想 ReadWriteLock。</p>\n</blockquote>\n<p><strong>读锁和读锁之间相互兼容，写锁排斥一切。</strong></p>\n<p>因为 MVCC 的存在，所以 MySQL 的查询一般来说是不会上锁的（因此，就算在写也是可以读到内容，并不是读写相融。</p>\n<p>强行上锁可以使用以下语句加锁：</p>\n<figure class=\"highlight lasso\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs lasso\"><span class=\"hljs-comment\">// 读锁</span><br><span class=\"hljs-keyword\">SELECT</span> * FROM tableName <span class=\"hljs-keyword\">WHERE</span> <span class=\"hljs-params\">...</span> LOCK <span class=\"hljs-keyword\">IN</span> SHARE MODE<br><span class=\"hljs-comment\">// 写锁</span><br><span class=\"hljs-keyword\">SELECT</span> * FROM tableName <span class=\"hljs-keyword\">WHERE</span> <span class=\"hljs-params\">...</span>  FOR UPDATE<br></code></pre></td></tr></table></figure>\n\n<p>划分读锁和写锁的意义就在于，让两个读锁可以通知执行，增加并发度（基于 MVCC 的无锁化实现才是性能提升的最大原因。</p>\n<h3 id=\"行锁和表锁以及意向锁\"><a href=\"#行锁和表锁以及意向锁\" class=\"headerlink\" title=\"行锁和表锁以及意向锁\"></a>行锁和表锁以及意向锁</h3><p>根据粒度划分，InnoDB 中存在行锁，也就是对<strong>表中的单行记录上锁</strong>，也有表锁，可以对<strong>整张表上锁</strong>。</p>\n<blockquote>\n<p>！！！InnoDB 中并没有真正意义上的表锁，就是直接对表上锁的那种，而是通过行锁+间隙锁的形式锁表。</p>\n<p>多粒度的锁也是 InnoDB 的特性之一，MyISAM 就只有表锁。</p>\n</blockquote>\n<p><strong>对于常规的 CURD 语句，判断行锁还是表锁，简单来看就是是否走索引，不走索引的 CRUD 语句都会经过一个全表扫描的过程，扫描过程中慢慢的就会锁表。</strong></p>\n<p>InnoDb 支持多粒度上锁，即表锁和行锁，如果表锁和行锁都为读锁，那也不会冲突，而如何在上表锁的时候判断是否在表中存在行锁就会出现问题，总不能扫表来判断是否有锁吧，此时就出现了意向锁。</p>\n<p><strong>意向锁是为了兼容多粒度的锁而设计的</strong>，在上读锁的同时会给对应的表上读的意向锁，此时上写的表锁会被意向锁卡住。</p>\n<h3 id=\"GAP-锁\"><a href=\"#GAP-锁\" class=\"headerlink\" title=\"GAP 锁\"></a>GAP 锁</h3><p><strong>GAP 锁的锁定目标就是两个索引记录之间的区域（左开右闭）</strong>，GAP 锁的目的就是为了防止其他的事务在间隙（GAP）范围内插入数据。</p>\n<p><strong>GAP 锁是共享锁</strong>，也就是说两个事务可以同时对相同的 GAP 上锁（咩有写的 GAP 锁。</p>\n<p>GAP 锁仅仅在 RR 级别下生效。</p>\n<h3 id=\"Next-Key-Lock\"><a href=\"#Next-Key-Lock\" class=\"headerlink\" title=\"Next-Key Lock\"></a>Next-Key Lock</h3><p>Next-Key Lock 就是<strong>行锁和 GAP 锁的结合</strong>，GAP 锁锁定的是命中的索引记录之前的间隙。</p>\n<p>Next-Key Lock 的存在使 InnoDB 在 RR 级别下面就可以解决幻读问题。</p>\n<h3 id=\"死锁\"><a href=\"#死锁\" class=\"headerlink\" title=\"死锁\"></a>死锁</h3><p>死锁出现的情况就是互相持有对象需要的锁。</p>\n<blockquote>\n<p>例如，持有A资源，等待B资源的线程和持有B资源，等待A资源的线程会造成死锁。</p>\n</blockquote>\n<p>死锁的必要条件：</p>\n<ol>\n<li>资源互斥 - 只有一个对象可以使用资源</li>\n<li>占有等待 - 在等待另外的资源期间，已有资源并不会释放</li>\n<li>不可强占 - 资源不可强行剥夺，即无法强行获取别的所持有的资源</li>\n<li>循环等待 - 若干对象循环持有对方所需要的资源</li>\n</ol>\n<p>如何避免死锁（减少死锁的发生：</p>\n<ol>\n<li>缩小事务范围</li>\n</ol>\n<blockquote>\n<p>MySQL 的上锁是逐步的，扫描索引树的时候逐步上锁，并且在事务提交的时候才会释放，所以缩小事务范围可以有效减少死锁的发生。</p>\n<p>因为事务的解锁统一在事务的提交的时候，所以即使不同表的更新也会造成死锁。</p>\n</blockquote>\n<ol>\n<li>尽量使用主键索引更新语句</li>\n</ol>\n<blockquote>\n<p>避免对索引树的扫描导致一次更新覆盖太多的行。</p>\n</blockquote>\n<ol>\n<li>以相同的顺序更新</li>\n</ol>\n<blockquote>\n<p>死锁的原因是在更新多条记录的时候，互相持有部分记录的锁（单条记录的更新不会有死锁的问题。</p>\n<p>所以将更新的顺序改为一致就可以解决死锁的问题，改死锁为等待（同个事务下更新的执行可以认为是无关先后顺序的，都是在提交的一刻生效。</p>\n<p>对应的场景有 IM 中群聊会话的更新。</p>\n</blockquote>\n<h3 id=\"rference\"><a href=\"#rference\" class=\"headerlink\" title=\"rference\"></a>rference</h3><ul>\n<li><a href=\"https://draveness.me/database-concurrency-control/\">浅谈数据库并发控制 - 锁和 MVCC</a></li>\n<li><a href=\"https://www.cnblogs.com/rjzheng/p/9950951.html\">史上最全的select加锁分析(Mysql)</a></li>\n</ul>\n<h2 id=\"排序算法\"><a href=\"#排序算法\" class=\"headerlink\" title=\"排序算法\"></a>排序算法</h2><p>MySQL 中的排序算法包括三种：</p>\n<ol>\n<li>全字段排序</li>\n</ol>\n<p>全字段排序就是将全部需要的字段放入 sort_buffer 统一排序后返回。</p>\n<ol>\n<li>rowId 排序</li>\n</ol>\n<p>在排序内容较多的时候，可能仅使用 rowId + 排序字段进行排序，然后回表查询另外的内容。</p>\n<p>此时的效率可能非常低，因为先根据筛选字段查询 rowId 以及 排序字段（此时可能已经经过一次回表，而排序结束之后可能再次使用 rowId 进行二次回表。</p>\n<ol>\n<li>索引树排序</li>\n</ol>\n<p>MySQL 索引本身就是有序的，因此如果排序条件满足索引（最左匹配原则，则可以直接使用索引中的顺序。</p>\n<p>explain 的 Extra 字段中可能出现 filesort 标记，表示出现额外排序（并不一定是磁盘排序。</p>\n<p>相关的还有分页问题，大数据量分页的时候可能会非常的慢，因为例如 limit 1000000,1000002; 此时会将 1000002 的数据全部先排序然后在选去后两条。</p>\n<p>此时的优化应该减少待排序内容，使用索引或者子查询。</p>\n<h2 id=\"联表查询算法\"><a href=\"#联表查询算法\" class=\"headerlink\" title=\"联表查询算法\"></a>联表查询算法</h2><p>联表查询包含如下几种形式：</p>\n<ol>\n<li>全连接&#x2F;内连接查询</li>\n</ol>\n<p>全链接查询最后的数据集只会保存驱动和被驱动表都匹配的数据。</p>\n<p>例如 select * from a,b where a.id &#x3D; b.id。</p>\n<p>此时 a 和 b 的 id 在对方表中无匹配项的就不会被返回。</p>\n<ol>\n<li>左连接查询</li>\n<li>右连接查询</li>\n</ol>\n<blockquote>\n<p>普通的 A join B，会是 MySQL 自行选择驱动表，而使用 A straight_join B，会固定 A 为驱动表。</p>\n<p>驱动表可以简单理解为先查询的数据表，会根据驱动表的数据去匹配被驱动表。</p>\n</blockquote>\n<p><strong>联表查询的时候应该是小表作为驱动，小表的判断依据是单个表执行完 WHERE 语句之后剩余的数据集。</strong></p>\n<h3 id=\"Index-Nested-Loop-Join\"><a href=\"#Index-Nested-Loop-Join\" class=\"headerlink\" title=\"Index Nested-Loop Join\"></a>Index Nested-Loop Join</h3><p>TODO</p>\n<h3 id=\"Simple-Nested-Loop-Join\"><a href=\"#Simple-Nested-Loop-Join\" class=\"headerlink\" title=\"Simple  Nested-Loop Join\"></a>Simple  Nested-Loop Join</h3><p>TODO</p>\n<h3 id=\"Block-Nested-Loop-Join\"><a href=\"#Block-Nested-Loop-Join\" class=\"headerlink\" title=\"Block Nested-Loop Join\"></a>Block Nested-Loop Join</h3><p>TODO</p>\n<h3 id=\"相关参数\"><a href=\"#相关参数\" class=\"headerlink\" title=\"相关参数\"></a>相关参数</h3><table>\n<thead>\n<tr>\n<th align=\"center\">参数名</th>\n<th align=\"center\">参数作用</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">join_buffer_size</td>\n<td align=\"center\">join buffer 的大小（在合适的范围之内，Join Buffer 肯定是越大越好</td>\n</tr>\n<tr>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n</tr>\n</tbody></table>\n<h2 id=\"分页算法\"><a href=\"#分页算法\" class=\"headerlink\" title=\"分页算法\"></a>分页算法</h2><p>TODO</p>\n<h2 id=\"Master-Slave-Replication（主从复制\"><a href=\"#Master-Slave-Replication（主从复制\" class=\"headerlink\" title=\"Master-Slave Replication（主从复制\"></a>Master-Slave Replication（主从复制</h2><p><img src=\"https://chenqwwq.oss-cn-hangzhou.aliyuncs.com/note/a66c154c1bc51e071dd2cc8c1d6ca6a3-7940422.png\" alt=\"img\"></p>\n<p>（还是 MySQL 45讲里面的图片。</p>\n<h3 id=\"复制的作用\"><a href=\"#复制的作用\" class=\"headerlink\" title=\"复制的作用\"></a>复制的作用</h3><ol>\n<li>多机备份，数据安全性保证（在单机突然爆炸的情况下也能保证数据安全</li>\n<li>读性能的水平扩展（主从分离之后，可以将读写进一步分离</li>\n<li>数据的异步化处理（例如阿里 canal，可以监听 binlog 用来进一步处理</li>\n</ol>\n<h3 id=\"基本复制流程\"><a href=\"#基本复制流程\" class=\"headerlink\" title=\"基本复制流程\"></a>基本复制流程</h3><p>MySQL 的主从复制是基于 Server 层的 binlog 实现的复制功能（可以类比于 Redis 的复制，binlog 转成 Redis 的复制缓冲区。</p>\n<p>在 master 接收到 slave 传递的 start slave 指令后就开始复制过程，此时 slave 需要指定 binlog 的日志偏移量。</p>\n<p>复制过程主要涉及的有以下几个线程（线程池）：</p>\n<ol>\n<li>Dump Thread</li>\n</ol>\n<p>master 侧的线程，负责从 binlog 中读取日志记录并推送到 Slave，注意读取的是 binlog 的磁盘文件（binlog 的缓存区是线程私有的也读取不到。</p>\n<p>master 会为每个从节点创建一个 Dump Thread，从不同的起始点开始读取日志文件（因此一主多从多架构对主的要求很高。</p>\n<ol>\n<li>I&#x2F;O Thread</li>\n</ol>\n<p>slave 侧的线程，负责接收从 master 请求来的日志数据，并写入 relay log（relay log 就是中转日志，负责缓存从 master 接收的日志数据。</p>\n<ol>\n<li>SQL Thread Group</li>\n</ol>\n<p>旧版本的 MySQL 可能就是单个线程，在5.?之后变成了线程组，但是因为 SQL 语句可能存在上下文语境，因此并发执行需要额外判断。</p>\n<p>该线程组用来执行从 relay log 解析出来的 SQL 语句。</p>\n<p>和 Redis 不同的是，MySQL 支持 Master-Master（主主）架构，此时需要双方各自指定自身的 server_id 防止日志的无限复制。</p>\n<p>另外的 MySQL 还支持级联复制，Slave 可以复制 Slave 节点的数据，主节点只需要创建一个 Dump Thread 去扩散日志，其他的从节点都从一级从节点复制。</p>\n<h3 id=\"Replication-Model（复制模式\"><a href=\"#Replication-Model（复制模式\" class=\"headerlink\" title=\"Replication Model（复制模式\"></a>Replication Model（复制模式</h3><p>复制模式可以对比 Kafka 的 asks 参数策略，不同的模式反映了不同的一致性和安全性保证。</p>\n<h4 id=\"Async-Model（异步模式\"><a href=\"#Async-Model（异步模式\" class=\"headerlink\" title=\"Async-Model（异步模式\"></a>Async-Model（异步模式</h4><p>异步模式下，master 不会主动推送 binlog 到从节点，在接收到客户端的 SQL 以后，本地执行完毕就会返回结果，并不会关心从库是否已经接收。</p>\n<p>该情况下，master 和 slave 可能存在明显的时间延迟，导致读写不一致，并且在 master 宕机之后如果以 slave 为新 master，可能出现数据丢失的情况。</p>\n<h4 id=\"Semi-Sync（半同步模式\"><a href=\"#Semi-Sync（半同步模式\" class=\"headerlink\" title=\"Semi-Sync（半同步模式\"></a>Semi-Sync（半同步模式</h4><p>半同步模式下，master 节点在执行完 SQL 之后会等待至少一个从库确定接收到对应 binlog 信息后才会返回结果。</p>\n<p>此时写的性能至少延迟两个 TTL，并且写得性能完全看最快的节点。</p>\n<h4 id=\"Sync（全同步模式\"><a href=\"#Sync（全同步模式\" class=\"headerlink\" title=\"Sync（全同步模式\"></a>Sync（全同步模式</h4><p>全同步模式则是进一步强化复制过程，需要全部的 slave 都已经复制 binlog 才会返回。</p>\n<h3 id=\"GTID-模式\"><a href=\"#GTID-模式\" class=\"headerlink\" title=\"GTID 模式\"></a>GTID 模式</h3><p>GTID 模式是对复制进度的表示优化，之前的流程中 slave 需要指定 binlog 的复制偏移量来获取之后的日志，但是这个比较难以界定（鬼知道我最后一条日志在 binlog 的哪里），不仅难找而且容易遗漏，所以就出现了 GTID 模式。</p>\n<p>GTID 就是 Global Transaction Identifier 即全局事务 Id，此时每个在主库上执行的事务都会指定一个唯一的 ID（全局递增，GTID 的组成由 server_id 和 transaction_id）。</p>\n<p>GTID 模式下，通过 GTID 代替了之前的 binlog 偏移量，可以清楚的界定出复制的进度，在事务提交的过程中也会一起记录，在 SQL 线程回放的过程中也会对比本地的 binlog 判断是否已经执行保证 SQL 复制的幂等性。</p>\n<h3 id=\"reference-1\"><a href=\"#reference-1\" class=\"headerlink\" title=\"reference\"></a>reference</h3><ul>\n<li><a href=\"https://www.cnblogs.com/rickiyang/p/13856388.html\">MySQL 主从复制原理不再难</a></li>\n<li><a href=\"https://blog.nowcoder.net/n/b90c959437734a8583fddeaa6d102e43\">【MySQL】主从复制实现原理详解</a></li>\n</ul>\n<h2 id=\"Explain-分析\"><a href=\"#Explain-分析\" class=\"headerlink\" title=\"Explain 分析\"></a>Explain 分析</h2><blockquote>\n<p>Explain 是 MySQL 中常规的 SQL 解析工具，能展示出SQL的部分执行逻辑和过程。</p>\n<p>分析 Explain 的输出就能帮助我们优化和改进 SQL 语句。</p>\n</blockquote>\n<h3 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h3><figure class=\"highlight jboss-cli\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs jboss-cli\">mysql&gt; explain select * from servers;<br>+<span class=\"hljs-params\">----</span>+<span class=\"hljs-params\">-------------</span>+<span class=\"hljs-params\">---------</span>+<span class=\"hljs-params\">------</span>+<span class=\"hljs-params\">---------------</span>+<span class=\"hljs-params\">------</span>+<span class=\"hljs-params\">---------</span>+<span class=\"hljs-params\">------</span>+<span class=\"hljs-params\">------</span>+<span class=\"hljs-params\">-------</span>+<br>| id | select_type | table   | type | possible_keys | key  | key_len | ref  | rows | Extra |<br>+<span class=\"hljs-params\">----</span>+<span class=\"hljs-params\">-------------</span>+<span class=\"hljs-params\">---------</span>+<span class=\"hljs-params\">------</span>+<span class=\"hljs-params\">---------------</span>+<span class=\"hljs-params\">------</span>+<span class=\"hljs-params\">---------</span>+<span class=\"hljs-params\">------</span>+<span class=\"hljs-params\">------</span>+<span class=\"hljs-params\">-------</span>+<br>|  1 | SIMPLE      | servers | ALL  | NULL          | NULL | NULL    | NULL |    1 | NULL  |<br>+<span class=\"hljs-params\">----</span>+<span class=\"hljs-params\">-------------</span>+<span class=\"hljs-params\">---------</span>+<span class=\"hljs-params\">------</span>+<span class=\"hljs-params\">---------------</span>+<span class=\"hljs-params\">------</span>+<span class=\"hljs-params\">---------</span>+<span class=\"hljs-params\">------</span>+<span class=\"hljs-params\">------</span>+<span class=\"hljs-params\">-------</span>+<br>1 row in <span class=\"hljs-keyword\">set</span> <span class=\"hljs-params\">(0.03 sec)</span><br></code></pre></td></tr></table></figure>\n\n<p>explain 用于展示 SQL 语句的执行计划，可以将其作为 SQL 优化的辅助工具。</p>\n<p>主要关注的几个字段如下：</p>\n<h3 id=\"possible-keys\"><a href=\"#possible-keys\" class=\"headerlink\" title=\"possible_keys\"></a>possible_keys</h3><p>可能选择索引名称。</p>\n<p>这里会将表结构中可以用到的所有索引列出，然后从中选择效率最高的执行（可能选择错误）。</p>\n<p>如果 possible_keys 为空，表示没有任何索引可以使用，所以都会作全表扫描处理。</p>\n<h3 id=\"key-x2F-key-len\"><a href=\"#key-x2F-key-len\" class=\"headerlink\" title=\"key &#x2F; key_len\"></a>key &#x2F; key_len</h3><p>最终选择的索引，以及索引的长度。</p>\n<p>key_len 肯定是越小越好，类型上 int 的匹配优于字符串匹配。</p>\n<h3 id=\"rows\"><a href=\"#rows\" class=\"headerlink\" title=\"rows\"></a>rows</h3><p>扫描行数。</p>\n<p>每个查询语句可能扫描的记录行数，InnoDB 中该行数只是一个粗略值（经抽样统计得出）。</p>\n<h3 id=\"extra\"><a href=\"#extra\" class=\"headerlink\" title=\"extra\"></a>extra</h3><p>额外信息，表示为了完成查询 MySQL 需要做的额外的事情（这里是不是指的 Server 层需要做的事情。</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">额外信息</th>\n<th align=\"center\">出现含义</th>\n<th align=\"center\">如何解决</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">using where</td>\n<td align=\"center\">表示在 Server 层需要额外的判断</td>\n<td align=\"center\">一般来说不需要关心，不会太影响查询效率</td>\n</tr>\n<tr>\n<td align=\"center\">using index</td>\n<td align=\"center\">只需要读取索引文件就可以获取全部的数据，而不需要读取数据文件，表示不需要进行回表，或者直接使用索引覆盖。</td>\n<td align=\"center\">可</td>\n</tr>\n<tr>\n<td align=\"center\">using filesort</td>\n<td align=\"center\">需要进行额外排序（不一定包含文件排序</td>\n<td align=\"center\">可以利用联合索引的相对顺序避免排序</td>\n</tr>\n<tr>\n<td align=\"center\">using_index_condition</td>\n<td align=\"center\">使用了索引下推</td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n</tr>\n</tbody></table>\n<p><a href=\"https://dev.mysql.com/doc/refman/5.6/en/explain-output.html\">MySQL - explain output format</a></p>\n<h2 id=\"Q-amp-A\"><a href=\"#Q-amp-A\" class=\"headerlink\" title=\"Q &amp; A\"></a>Q &amp; A</h2><h3 id=\"InnoDB-和-MyISAM-的区别\"><a href=\"#InnoDB-和-MyISAM-的区别\" class=\"headerlink\" title=\"InnoDB 和 MyISAM 的区别:\"></a>InnoDB 和 MyISAM 的区别:</h3><table>\n<thead>\n<tr>\n<th align=\"center\">InnoDB</th>\n<th align=\"center\">MYSQL</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">支持事务</td>\n<td align=\"center\">不支持事务</td>\n</tr>\n<tr>\n<td align=\"center\">聚簇索引（主键索引就是聚簇索引，所以必须包含主键，没有就帮你隐式创建一个</td>\n<td align=\"center\">非聚簇索引（可以没有主键</td>\n</tr>\n<tr>\n<td align=\"center\">count 需要扫索引树（有 MVCC 也没法记准确的</td>\n<td align=\"center\">会在表中记录当前行数</td>\n</tr>\n<tr>\n<td align=\"center\">支持外键（虽然没啥卵用</td>\n<td align=\"center\">不支持外键</td>\n</tr>\n<tr>\n<td align=\"center\">多级锁机制（行锁，表锁，Gap 锁</td>\n<td align=\"center\">表锁（一个烂的摆</td>\n</tr>\n</tbody></table>\n<h3 id=\"如果解决深度分页问题？\"><a href=\"#如果解决深度分页问题？\" class=\"headerlink\" title=\"如果解决深度分页问题？\"></a>如果解决深度分页问题？</h3><h3 id=\"索引失效的常见情况\"><a href=\"#索引失效的常见情况\" class=\"headerlink\" title=\"索引失效的常见情况\"></a>索引失效的常见情况</h3><table>\n<thead>\n<tr>\n<th align=\"center\">索引失效的情况</th>\n<th align=\"center\">失效原因</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\"><strong>索引列</strong>存在函数调用</td>\n<td align=\"center\">注意是对索引列的函数，对索引的函数操作可能会影响索引的有序性</td>\n</tr>\n<tr>\n<td align=\"center\">隐式的类型转换</td>\n<td align=\"center\">和上条类似，MySQL 中通常也是使用函数来进行类型转换（在 MySQL 中，字符串和数字做比较的话，是将字符串转换成数字。</td>\n</tr>\n<tr>\n<td align=\"center\">不满足最左前缀</td>\n<td align=\"center\">如果存在索引下推勉强能用</td>\n</tr>\n<tr>\n<td align=\"center\">左模糊匹配</td>\n<td align=\"center\">类似 LIKE %XX，对于字符串类型，索引的顺序是按照字典序排列的，因此左模糊匹配也会</td>\n</tr>\n</tbody></table>\n<p>索引的原理就是按照有序性进行二分（一次性排除大量数据无用数据），所以在改变了有序性之后索引失效就是理所当然的。</p>\n<h2 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h2><ul>\n<li><a href=\"https://dev.mysql.com/doc/refman/5.6/en/preface.html\">官方文档</a></li>\n</ul>\n"},{"title":"RabbitMQ 如何保证消息不丢失","date":"2021-06-16T08:22:11.000Z","excerpt":"RabbitMQ 可以分为 Producer（生产者），Consumer（消费者），Exchange（交换机），Queue（队列）四个角色。 消息的流经过程就是 Producer -> Exchange -> Queue -> Consumer。","index_img":"https://chenqwwq.oss-cn-hangzhou.aliyuncs.com/note/RabbitMQ%E8%84%91%E5%9B%BE1-7942529.png","banner_img":"https://chenqwwq.oss-cn-hangzhou.aliyuncs.com/note/RabbitMQ%E8%84%91%E5%9B%BE1-7942529.png","mermaid":true,"_content":"\n# RabbitMQ 如何保证消息不丢失?\n\n---\n\n<br>\n\n## 脑图\n\n![相关脑图](https://chenqwwq.oss-cn-hangzhou.aliyuncs.com/note/RabbitMQ%E8%84%91%E5%9B%BE1-7942529.png)\n\n<br>\n\n<br>\n\n## 概述\n\nRabbitMQ 可以分为 Producer（生产者），Consumer（消费者），Exchange（交换机），Queue（队列）四个角色。\n\n消息的流经过程就是 Producer -> Exchange -> Queue -> Consumer。\n\n> 和 Kafka 不同，RabbitMQ 不会直接和 Queue（Topic） 打交道，而是通过 Exchange，生产者甚至不知道消息最终去了哪里。\n\n<br>\n\n所以要保证消息不丢就必须保证以下流程：\n\n1. Producer 到 Exchange 的过程，确保 Exchange 接收到消息\n2. Exchange 到 Queue 的过程，确保消息被正确的投递\n3. Queue 到 Consumer 的过程，确保消息被正常的消费和 ack\n\n还有就是，消息在 Exchange 和 Queue 的持久性，不能因为 Broker 的宕机导致消息的丢失，所以 Exchange ，Queue 和消息都需要持久化。\n\n> 持久化对性能有损，使用时谨慎判断是否必要。\n\n<br>\n\n<br>\n\n## Producer 到 Exchange 的过程\n\n该过程可以通过[生产者确认（Publisher Confirm）](https://www.rabbitmq.com/tutorials/tutorial-seven-java.html) 来保证。\n\n**Confirm 机制开启之后，会为生产者的每条消息添加从1开始的id，如果 Broker 确定接收到消息，则返回一个 confirm。**\n\nConfirm 机制只负责到消息是否到达 Exchange 不负责后续的消息投递等流程，另外 RabbitMQ 也提供了事务的情况，事务的作用就是确保消息一定能够全部到达 Broker。\n\n<br>\n\nSpringboot 的 RabbitMQ 实现中，可以对 RabbitTemplate 添加 RabbitTemplate.ConfirmCallback 回调函数，该回调需要额外配置以下内容\n\n<img src=\"https://chenqwwq.oss-cn-hangzhou.aliyuncs.com/note/rabbitmq-publish-confirm%E9%85%8D%E7%BD%AE-20220323%E4%B8%8A%E5%8D%88110140863.png\" alt=\"rabbitmq-publish-confirm配置\" style=\"zoom:67%;\" />\n\n**confirm 的回调方法在消息投递出去之后触发，不论成功还是失败都会。**\n\n以回执的方式明确消息是否真正到达 Broker，如果未到达则可以做下一步的处理，重发或者入库等等，方法相关入参如下：\n\n<img src=\"https://chenqwwq.oss-cn-hangzhou.aliyuncs.com/note/rabbitmq-publish-confirm%E7%A4%BA%E4%BE%8B-20220323%E4%B8%8A%E5%8D%88110144410.png\" alt=\"rabbitmq-publish-confirm示例\" style=\"zoom:67%;\" />\n\n<br>\n\n<br>\n\n## Exchange 到 Queue 的过程\n\n**该过程可以通过 RabbitMQ 提供的 mandatory 参数设置。**\n\nmandatory 参数的作用就是确保消息被正确的投递到具体的队列，如果在 Broker 中无法匹配到具体队列，那么也会触发回调。\n\n<br>\n\nSpringboot 的客户端封装也提供了 RabbitTemplate.ReturnCallback 回调方法，用来监听消息的状态。\n\n想要该参数生效，以下两个配置必须同时配置。\n\n<img src=\"https://chenqwwq.oss-cn-hangzhou.aliyuncs.com/note/rabbitmq-springboot-mandatory%E9%85%8D%E7%BD%AE-20220323%E4%B8%8A%E5%8D%88110148745.png\" alt=\"rabbitmq-springboot-mandatory配置\" style=\"zoom:67%;\" />\n\n方法相关入参如下：\n\n<img src=\"https://chenqwwq.oss-cn-hangzhou.aliyuncs.com/note/rabbitmq-mandatory%E5%9B%9E%E8%B0%83%E7%A4%BA%E4%BE%8B-20220323%E4%B8%8A%E5%8D%88110153031.png\" alt=\"rabbitmq-mandatory回调示例\" style=\"zoom:67%;\" />\n\n<br>\n\n回调并没有办法直接解决消息的投递失败问题，对失败投递进行报警，然后人工排查情况才是关键。\n\n> mandatory 的回调只有消息投递失败的时候才会触发，正常投递不会触发。\n>\n> 这和 publish confirm 不同，publish confirm 是不管失败还是成功都会触发回调的。\n\n<br>\n\n### 备份交换机\n\n**RabbitMQ 中还存在一个备份交换机（alternate-exchange）的概念，如果消息在正常的交换机无法匹配到队列的时候，消息会被转发到该交换机，由该交换机进一步投递。**\n\n**所以就可以使用备份交换机收集无法匹配到 Queue 的消息。**\n\n一般该交换机被设置为 FANOUT 模式，确保消息可以被直接投递。\n\n<br>\n\n<br>\n\n\n\n## Queue 到 Consumer 的过程\n\nRabbitMQ 中保存的消息，只有在被 ack 之后才会主动删除，所以在 ack 消息之前必须要确保消息的正常消费。\n\n> 这个也是 RabbitMQ 和 Kafka 不同的点。\n>\n> Kafka 在消费者 ack 之后并不会删除消息，只有消息累积到一定阈值（时间或者大小）之后才会删除，甚至可以不删除，因此 Kafka 即使作为存储服务也没啥问题。\n\n\n\n<br>\n\n### RabbitMQ 原生 ack 模式\n\nRabbitMQ 的消费者端提供了**自动和手动两种 ack 方式**。\n\n[Consumer Acknowledgement Modes and Data Safety Considerations](https://www.rabbitmq.com/confirms.html#acknowledgement-modes)\n\n**在自动确认的模式下，消息被认为在发送之后就算成功处理，因此很容易造成消息丢失，但是自动确认在很大程度上提高了吞吐量。**\n\n> Consumer 是直接和 Queue 接触的，一个 Queue 可以由多个 Consumer 共同消费，如果一个 Consumer 断线，那么该 Consumer 上未 ack 的消息会被转发到其他的 Consumer 上，此时又会存在重复消费的问题。\n\n**对于手动确认**，RabbitMQ 定义了以下三种形式：![rabbitmq手动ack类型](https://chenqwwq.oss-cn-hangzhou.aliyuncs.com/note/rabbitmq%E6%89%8B%E5%8A%A8ack%E7%B1%BB%E5%9E%8B-8004518.png)\n\n<br>\n\nbasic.ack 就是确认消费成功，Broker 在接收到该条 ack 之后会尝试删除对应的消息。\n\nbasic.reject 和 basic.nack 的作用是一样的，区别就在于语义上，作用都是拒绝消息，并且可以通过参数确定消息是否需要重新入队列。\n\n<br>\n\n> **消费者连接的时候就需要指定 ack 的模式。**\n>\n> RabbitMQ 提供了两大类 ack 模式：手动和自动\n>\n> 1. 自动 ack 会在消息到达消费者之后直接删除队列中的消息\n> 2. 手动 ack 分为 ack / nack / reject 三种。\n\n<br>\n\n<br>\n\n### Java 原生客户端 ack 实现\n\n在创建 Consumer 的时候就需要指定 ack 的形式:\n\n![rabbitmq-创建consumer](https://chenqwwq.oss-cn-hangzhou.aliyuncs.com/note/rabbitmq-%E5%88%9B%E5%BB%BAconsumer-20220323%E4%B8%8A%E5%8D%88110206017.png)\n\n上图中的方法参数 autoAck 就表示是否开启**自动 ack**。\n\n对于三种手动确认的方法也分别提供了方法。\n\n```java\nvoid basicAck(long deliveryTag, boolean multiple) throws IOException;\n    \nvoid basicNack(long deliveryTag, boolean multiple, boolean requeue)\n            throws IOException;\n\nvoid basicReject(long deliveryTag, boolean requeue) throws IOException;\n```\n\ndeliveryTag 可以简单理解为消息的 id。\n\nmultiple 参数的含义是是否为批量操作，例如 basicAck 方法，如果为批量操作，会将 deliveryTag 之前的消息都 ack。\n\nrequeue 参数表示是否需要重回队列，如果为 false，那么在方法调用后消息就会被丢弃或者转发到死信队列，如果为 true，消息就会重新进入队列，重新下发到消费者。\n\n\n\n> Java 原生的 RabbitMQ 客户端基本就简单实现了。\n\n<br>\n\n### SpringBoot 中的 ack 实现\n\nSpringBoot 根据以上的 ack 方法抽象提供了三种 AcknowledgeMode，具体如下：\n\n<img src=\"https://chenqwwq.oss-cn-hangzhou.aliyuncs.com/note/springboot-rabbitmq-ackmode-20220323%E4%B8%8A%E5%8D%88110220858.png\" alt=\"springboot-rabbitmq-ackmode\" style=\"zoom:67%;\" />\n\nNone 对应的就是 RabbitMQ 的 自动 ack，在消息被下发后就认为是消费成功，Broker 可以删除该消息。\n\n> 实际开发中慎用该配置！\n>\n> 但是如果处理失败就无法对该条消息进行重试，因为已经从队列中删除。\n>\n> 自动 ack 能稍微提高消息速度，ack 之后 Broken 会立马补消息到 prefetch 个。\n\nMANUAL 需要用户在 listener 中手动调用 ack / nack / reject 方法。\n\n**AUTO 是由 SpringBoot 控制的 ack 模式，如果 listener 返回正常，则调用 ack，如果抛异常则调用 nack。**\n\n> 是在 RabbitMQ 官方提供了客户端实现的基础上封装的记住。\n\n另外的还有 default-requeue-rejected 配置，表示在消息处理失败之后是否需要重回队列。\n\n> **SpringBoot 的客户端默认是会重回队列的，所以如果 Listener 抛异常而不进一步处理，消息会进入死循环。**\n\n<br>\n\n## 阅读\n\n[Consumer Acknowledgements and Publisher Confirms](https://www.rabbitmq.com/confirms.html#publisher-confirms)","source":"_posts/RabbitMQ 如何保证消息不丢失.md","raw":"---\ntitle: RabbitMQ 如何保证消息不丢失\ndate: 2021-06-16 16:22:11\nexcerpt: RabbitMQ 可以分为 Producer（生产者），Consumer（消费者），Exchange（交换机），Queue（队列）四个角色。\n\t消息的流经过程就是 Producer -> Exchange -> Queue -> Consumer。\nindex_img: https://chenqwwq.oss-cn-hangzhou.aliyuncs.com/note/RabbitMQ%E8%84%91%E5%9B%BE1-7942529.png\nbanner_img: https://chenqwwq.oss-cn-hangzhou.aliyuncs.com/note/RabbitMQ%E8%84%91%E5%9B%BE1-7942529.png\nmermaid: true\ncategories:\n- rabbitmq\ntags:\n- mq\n---\n\n# RabbitMQ 如何保证消息不丢失?\n\n---\n\n<br>\n\n## 脑图\n\n![相关脑图](https://chenqwwq.oss-cn-hangzhou.aliyuncs.com/note/RabbitMQ%E8%84%91%E5%9B%BE1-7942529.png)\n\n<br>\n\n<br>\n\n## 概述\n\nRabbitMQ 可以分为 Producer（生产者），Consumer（消费者），Exchange（交换机），Queue（队列）四个角色。\n\n消息的流经过程就是 Producer -> Exchange -> Queue -> Consumer。\n\n> 和 Kafka 不同，RabbitMQ 不会直接和 Queue（Topic） 打交道，而是通过 Exchange，生产者甚至不知道消息最终去了哪里。\n\n<br>\n\n所以要保证消息不丢就必须保证以下流程：\n\n1. Producer 到 Exchange 的过程，确保 Exchange 接收到消息\n2. Exchange 到 Queue 的过程，确保消息被正确的投递\n3. Queue 到 Consumer 的过程，确保消息被正常的消费和 ack\n\n还有就是，消息在 Exchange 和 Queue 的持久性，不能因为 Broker 的宕机导致消息的丢失，所以 Exchange ，Queue 和消息都需要持久化。\n\n> 持久化对性能有损，使用时谨慎判断是否必要。\n\n<br>\n\n<br>\n\n## Producer 到 Exchange 的过程\n\n该过程可以通过[生产者确认（Publisher Confirm）](https://www.rabbitmq.com/tutorials/tutorial-seven-java.html) 来保证。\n\n**Confirm 机制开启之后，会为生产者的每条消息添加从1开始的id，如果 Broker 确定接收到消息，则返回一个 confirm。**\n\nConfirm 机制只负责到消息是否到达 Exchange 不负责后续的消息投递等流程，另外 RabbitMQ 也提供了事务的情况，事务的作用就是确保消息一定能够全部到达 Broker。\n\n<br>\n\nSpringboot 的 RabbitMQ 实现中，可以对 RabbitTemplate 添加 RabbitTemplate.ConfirmCallback 回调函数，该回调需要额外配置以下内容\n\n<img src=\"https://chenqwwq.oss-cn-hangzhou.aliyuncs.com/note/rabbitmq-publish-confirm%E9%85%8D%E7%BD%AE-20220323%E4%B8%8A%E5%8D%88110140863.png\" alt=\"rabbitmq-publish-confirm配置\" style=\"zoom:67%;\" />\n\n**confirm 的回调方法在消息投递出去之后触发，不论成功还是失败都会。**\n\n以回执的方式明确消息是否真正到达 Broker，如果未到达则可以做下一步的处理，重发或者入库等等，方法相关入参如下：\n\n<img src=\"https://chenqwwq.oss-cn-hangzhou.aliyuncs.com/note/rabbitmq-publish-confirm%E7%A4%BA%E4%BE%8B-20220323%E4%B8%8A%E5%8D%88110144410.png\" alt=\"rabbitmq-publish-confirm示例\" style=\"zoom:67%;\" />\n\n<br>\n\n<br>\n\n## Exchange 到 Queue 的过程\n\n**该过程可以通过 RabbitMQ 提供的 mandatory 参数设置。**\n\nmandatory 参数的作用就是确保消息被正确的投递到具体的队列，如果在 Broker 中无法匹配到具体队列，那么也会触发回调。\n\n<br>\n\nSpringboot 的客户端封装也提供了 RabbitTemplate.ReturnCallback 回调方法，用来监听消息的状态。\n\n想要该参数生效，以下两个配置必须同时配置。\n\n<img src=\"https://chenqwwq.oss-cn-hangzhou.aliyuncs.com/note/rabbitmq-springboot-mandatory%E9%85%8D%E7%BD%AE-20220323%E4%B8%8A%E5%8D%88110148745.png\" alt=\"rabbitmq-springboot-mandatory配置\" style=\"zoom:67%;\" />\n\n方法相关入参如下：\n\n<img src=\"https://chenqwwq.oss-cn-hangzhou.aliyuncs.com/note/rabbitmq-mandatory%E5%9B%9E%E8%B0%83%E7%A4%BA%E4%BE%8B-20220323%E4%B8%8A%E5%8D%88110153031.png\" alt=\"rabbitmq-mandatory回调示例\" style=\"zoom:67%;\" />\n\n<br>\n\n回调并没有办法直接解决消息的投递失败问题，对失败投递进行报警，然后人工排查情况才是关键。\n\n> mandatory 的回调只有消息投递失败的时候才会触发，正常投递不会触发。\n>\n> 这和 publish confirm 不同，publish confirm 是不管失败还是成功都会触发回调的。\n\n<br>\n\n### 备份交换机\n\n**RabbitMQ 中还存在一个备份交换机（alternate-exchange）的概念，如果消息在正常的交换机无法匹配到队列的时候，消息会被转发到该交换机，由该交换机进一步投递。**\n\n**所以就可以使用备份交换机收集无法匹配到 Queue 的消息。**\n\n一般该交换机被设置为 FANOUT 模式，确保消息可以被直接投递。\n\n<br>\n\n<br>\n\n\n\n## Queue 到 Consumer 的过程\n\nRabbitMQ 中保存的消息，只有在被 ack 之后才会主动删除，所以在 ack 消息之前必须要确保消息的正常消费。\n\n> 这个也是 RabbitMQ 和 Kafka 不同的点。\n>\n> Kafka 在消费者 ack 之后并不会删除消息，只有消息累积到一定阈值（时间或者大小）之后才会删除，甚至可以不删除，因此 Kafka 即使作为存储服务也没啥问题。\n\n\n\n<br>\n\n### RabbitMQ 原生 ack 模式\n\nRabbitMQ 的消费者端提供了**自动和手动两种 ack 方式**。\n\n[Consumer Acknowledgement Modes and Data Safety Considerations](https://www.rabbitmq.com/confirms.html#acknowledgement-modes)\n\n**在自动确认的模式下，消息被认为在发送之后就算成功处理，因此很容易造成消息丢失，但是自动确认在很大程度上提高了吞吐量。**\n\n> Consumer 是直接和 Queue 接触的，一个 Queue 可以由多个 Consumer 共同消费，如果一个 Consumer 断线，那么该 Consumer 上未 ack 的消息会被转发到其他的 Consumer 上，此时又会存在重复消费的问题。\n\n**对于手动确认**，RabbitMQ 定义了以下三种形式：![rabbitmq手动ack类型](https://chenqwwq.oss-cn-hangzhou.aliyuncs.com/note/rabbitmq%E6%89%8B%E5%8A%A8ack%E7%B1%BB%E5%9E%8B-8004518.png)\n\n<br>\n\nbasic.ack 就是确认消费成功，Broker 在接收到该条 ack 之后会尝试删除对应的消息。\n\nbasic.reject 和 basic.nack 的作用是一样的，区别就在于语义上，作用都是拒绝消息，并且可以通过参数确定消息是否需要重新入队列。\n\n<br>\n\n> **消费者连接的时候就需要指定 ack 的模式。**\n>\n> RabbitMQ 提供了两大类 ack 模式：手动和自动\n>\n> 1. 自动 ack 会在消息到达消费者之后直接删除队列中的消息\n> 2. 手动 ack 分为 ack / nack / reject 三种。\n\n<br>\n\n<br>\n\n### Java 原生客户端 ack 实现\n\n在创建 Consumer 的时候就需要指定 ack 的形式:\n\n![rabbitmq-创建consumer](https://chenqwwq.oss-cn-hangzhou.aliyuncs.com/note/rabbitmq-%E5%88%9B%E5%BB%BAconsumer-20220323%E4%B8%8A%E5%8D%88110206017.png)\n\n上图中的方法参数 autoAck 就表示是否开启**自动 ack**。\n\n对于三种手动确认的方法也分别提供了方法。\n\n```java\nvoid basicAck(long deliveryTag, boolean multiple) throws IOException;\n    \nvoid basicNack(long deliveryTag, boolean multiple, boolean requeue)\n            throws IOException;\n\nvoid basicReject(long deliveryTag, boolean requeue) throws IOException;\n```\n\ndeliveryTag 可以简单理解为消息的 id。\n\nmultiple 参数的含义是是否为批量操作，例如 basicAck 方法，如果为批量操作，会将 deliveryTag 之前的消息都 ack。\n\nrequeue 参数表示是否需要重回队列，如果为 false，那么在方法调用后消息就会被丢弃或者转发到死信队列，如果为 true，消息就会重新进入队列，重新下发到消费者。\n\n\n\n> Java 原生的 RabbitMQ 客户端基本就简单实现了。\n\n<br>\n\n### SpringBoot 中的 ack 实现\n\nSpringBoot 根据以上的 ack 方法抽象提供了三种 AcknowledgeMode，具体如下：\n\n<img src=\"https://chenqwwq.oss-cn-hangzhou.aliyuncs.com/note/springboot-rabbitmq-ackmode-20220323%E4%B8%8A%E5%8D%88110220858.png\" alt=\"springboot-rabbitmq-ackmode\" style=\"zoom:67%;\" />\n\nNone 对应的就是 RabbitMQ 的 自动 ack，在消息被下发后就认为是消费成功，Broker 可以删除该消息。\n\n> 实际开发中慎用该配置！\n>\n> 但是如果处理失败就无法对该条消息进行重试，因为已经从队列中删除。\n>\n> 自动 ack 能稍微提高消息速度，ack 之后 Broken 会立马补消息到 prefetch 个。\n\nMANUAL 需要用户在 listener 中手动调用 ack / nack / reject 方法。\n\n**AUTO 是由 SpringBoot 控制的 ack 模式，如果 listener 返回正常，则调用 ack，如果抛异常则调用 nack。**\n\n> 是在 RabbitMQ 官方提供了客户端实现的基础上封装的记住。\n\n另外的还有 default-requeue-rejected 配置，表示在消息处理失败之后是否需要重回队列。\n\n> **SpringBoot 的客户端默认是会重回队列的，所以如果 Listener 抛异常而不进一步处理，消息会进入死循环。**\n\n<br>\n\n## 阅读\n\n[Consumer Acknowledgements and Publisher Confirms](https://www.rabbitmq.com/confirms.html#publisher-confirms)","slug":"RabbitMQ 如何保证消息不丢失","published":1,"updated":"2022-03-23T03:02:25.649Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clk87sjyh0004wnbv596ubaus","content":"<h1 id=\"RabbitMQ-如何保证消息不丢失\"><a href=\"#RabbitMQ-如何保证消息不丢失\" class=\"headerlink\" title=\"RabbitMQ 如何保证消息不丢失?\"></a>RabbitMQ 如何保证消息不丢失?</h1><hr>\n<br>\n\n<h2 id=\"脑图\"><a href=\"#脑图\" class=\"headerlink\" title=\"脑图\"></a>脑图</h2><p><img src=\"https://chenqwwq.oss-cn-hangzhou.aliyuncs.com/note/RabbitMQ%E8%84%91%E5%9B%BE1-7942529.png\" alt=\"相关脑图\"></p>\n<br>\n\n<br>\n\n<h2 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h2><p>RabbitMQ 可以分为 Producer（生产者），Consumer（消费者），Exchange（交换机），Queue（队列）四个角色。</p>\n<p>消息的流经过程就是 Producer -&gt; Exchange -&gt; Queue -&gt; Consumer。</p>\n<blockquote>\n<p>和 Kafka 不同，RabbitMQ 不会直接和 Queue（Topic） 打交道，而是通过 Exchange，生产者甚至不知道消息最终去了哪里。</p>\n</blockquote>\n<br>\n\n<p>所以要保证消息不丢就必须保证以下流程：</p>\n<ol>\n<li>Producer 到 Exchange 的过程，确保 Exchange 接收到消息</li>\n<li>Exchange 到 Queue 的过程，确保消息被正确的投递</li>\n<li>Queue 到 Consumer 的过程，确保消息被正常的消费和 ack</li>\n</ol>\n<p>还有就是，消息在 Exchange 和 Queue 的持久性，不能因为 Broker 的宕机导致消息的丢失，所以 Exchange ，Queue 和消息都需要持久化。</p>\n<blockquote>\n<p>持久化对性能有损，使用时谨慎判断是否必要。</p>\n</blockquote>\n<br>\n\n<br>\n\n<h2 id=\"Producer-到-Exchange-的过程\"><a href=\"#Producer-到-Exchange-的过程\" class=\"headerlink\" title=\"Producer 到 Exchange 的过程\"></a>Producer 到 Exchange 的过程</h2><p>该过程可以通过<a href=\"https://www.rabbitmq.com/tutorials/tutorial-seven-java.html\">生产者确认（Publisher Confirm）</a> 来保证。</p>\n<p><strong>Confirm 机制开启之后，会为生产者的每条消息添加从1开始的id，如果 Broker 确定接收到消息，则返回一个 confirm。</strong></p>\n<p>Confirm 机制只负责到消息是否到达 Exchange 不负责后续的消息投递等流程，另外 RabbitMQ 也提供了事务的情况，事务的作用就是确保消息一定能够全部到达 Broker。</p>\n<br>\n\n<p>Springboot 的 RabbitMQ 实现中，可以对 RabbitTemplate 添加 RabbitTemplate.ConfirmCallback 回调函数，该回调需要额外配置以下内容</p>\n<img src=\"https://chenqwwq.oss-cn-hangzhou.aliyuncs.com/note/rabbitmq-publish-confirm%E9%85%8D%E7%BD%AE-20220323%E4%B8%8A%E5%8D%88110140863.png\" alt=\"rabbitmq-publish-confirm配置\" style=\"zoom:67%;\" />\n\n<p><strong>confirm 的回调方法在消息投递出去之后触发，不论成功还是失败都会。</strong></p>\n<p>以回执的方式明确消息是否真正到达 Broker，如果未到达则可以做下一步的处理，重发或者入库等等，方法相关入参如下：</p>\n<img src=\"https://chenqwwq.oss-cn-hangzhou.aliyuncs.com/note/rabbitmq-publish-confirm%E7%A4%BA%E4%BE%8B-20220323%E4%B8%8A%E5%8D%88110144410.png\" alt=\"rabbitmq-publish-confirm示例\" style=\"zoom:67%;\" />\n\n<br>\n\n<br>\n\n<h2 id=\"Exchange-到-Queue-的过程\"><a href=\"#Exchange-到-Queue-的过程\" class=\"headerlink\" title=\"Exchange 到 Queue 的过程\"></a>Exchange 到 Queue 的过程</h2><p><strong>该过程可以通过 RabbitMQ 提供的 mandatory 参数设置。</strong></p>\n<p>mandatory 参数的作用就是确保消息被正确的投递到具体的队列，如果在 Broker 中无法匹配到具体队列，那么也会触发回调。</p>\n<br>\n\n<p>Springboot 的客户端封装也提供了 RabbitTemplate.ReturnCallback 回调方法，用来监听消息的状态。</p>\n<p>想要该参数生效，以下两个配置必须同时配置。</p>\n<img src=\"https://chenqwwq.oss-cn-hangzhou.aliyuncs.com/note/rabbitmq-springboot-mandatory%E9%85%8D%E7%BD%AE-20220323%E4%B8%8A%E5%8D%88110148745.png\" alt=\"rabbitmq-springboot-mandatory配置\" style=\"zoom:67%;\" />\n\n<p>方法相关入参如下：</p>\n<img src=\"https://chenqwwq.oss-cn-hangzhou.aliyuncs.com/note/rabbitmq-mandatory%E5%9B%9E%E8%B0%83%E7%A4%BA%E4%BE%8B-20220323%E4%B8%8A%E5%8D%88110153031.png\" alt=\"rabbitmq-mandatory回调示例\" style=\"zoom:67%;\" />\n\n<br>\n\n<p>回调并没有办法直接解决消息的投递失败问题，对失败投递进行报警，然后人工排查情况才是关键。</p>\n<blockquote>\n<p>mandatory 的回调只有消息投递失败的时候才会触发，正常投递不会触发。</p>\n<p>这和 publish confirm 不同，publish confirm 是不管失败还是成功都会触发回调的。</p>\n</blockquote>\n<br>\n\n<h3 id=\"备份交换机\"><a href=\"#备份交换机\" class=\"headerlink\" title=\"备份交换机\"></a>备份交换机</h3><p><strong>RabbitMQ 中还存在一个备份交换机（alternate-exchange）的概念，如果消息在正常的交换机无法匹配到队列的时候，消息会被转发到该交换机，由该交换机进一步投递。</strong></p>\n<p><strong>所以就可以使用备份交换机收集无法匹配到 Queue 的消息。</strong></p>\n<p>一般该交换机被设置为 FANOUT 模式，确保消息可以被直接投递。</p>\n<br>\n\n<br>\n\n\n\n<h2 id=\"Queue-到-Consumer-的过程\"><a href=\"#Queue-到-Consumer-的过程\" class=\"headerlink\" title=\"Queue 到 Consumer 的过程\"></a>Queue 到 Consumer 的过程</h2><p>RabbitMQ 中保存的消息，只有在被 ack 之后才会主动删除，所以在 ack 消息之前必须要确保消息的正常消费。</p>\n<blockquote>\n<p>这个也是 RabbitMQ 和 Kafka 不同的点。</p>\n<p>Kafka 在消费者 ack 之后并不会删除消息，只有消息累积到一定阈值（时间或者大小）之后才会删除，甚至可以不删除，因此 Kafka 即使作为存储服务也没啥问题。</p>\n</blockquote>\n<br>\n\n<h3 id=\"RabbitMQ-原生-ack-模式\"><a href=\"#RabbitMQ-原生-ack-模式\" class=\"headerlink\" title=\"RabbitMQ 原生 ack 模式\"></a>RabbitMQ 原生 ack 模式</h3><p>RabbitMQ 的消费者端提供了<strong>自动和手动两种 ack 方式</strong>。</p>\n<p><a href=\"https://www.rabbitmq.com/confirms.html#acknowledgement-modes\">Consumer Acknowledgement Modes and Data Safety Considerations</a></p>\n<p><strong>在自动确认的模式下，消息被认为在发送之后就算成功处理，因此很容易造成消息丢失，但是自动确认在很大程度上提高了吞吐量。</strong></p>\n<blockquote>\n<p>Consumer 是直接和 Queue 接触的，一个 Queue 可以由多个 Consumer 共同消费，如果一个 Consumer 断线，那么该 Consumer 上未 ack 的消息会被转发到其他的 Consumer 上，此时又会存在重复消费的问题。</p>\n</blockquote>\n<p><strong>对于手动确认</strong>，RabbitMQ 定义了以下三种形式：<img src=\"https://chenqwwq.oss-cn-hangzhou.aliyuncs.com/note/rabbitmq%E6%89%8B%E5%8A%A8ack%E7%B1%BB%E5%9E%8B-8004518.png\" alt=\"rabbitmq手动ack类型\"></p>\n<br>\n\n<p>basic.ack 就是确认消费成功，Broker 在接收到该条 ack 之后会尝试删除对应的消息。</p>\n<p>basic.reject 和 basic.nack 的作用是一样的，区别就在于语义上，作用都是拒绝消息，并且可以通过参数确定消息是否需要重新入队列。</p>\n<br>\n\n<blockquote>\n<p><strong>消费者连接的时候就需要指定 ack 的模式。</strong></p>\n<p>RabbitMQ 提供了两大类 ack 模式：手动和自动</p>\n<ol>\n<li>自动 ack 会在消息到达消费者之后直接删除队列中的消息</li>\n<li>手动 ack 分为 ack &#x2F; nack &#x2F; reject 三种。</li>\n</ol>\n</blockquote>\n<br>\n\n<br>\n\n<h3 id=\"Java-原生客户端-ack-实现\"><a href=\"#Java-原生客户端-ack-实现\" class=\"headerlink\" title=\"Java 原生客户端 ack 实现\"></a>Java 原生客户端 ack 实现</h3><p>在创建 Consumer 的时候就需要指定 ack 的形式:</p>\n<p><img src=\"https://chenqwwq.oss-cn-hangzhou.aliyuncs.com/note/rabbitmq-%E5%88%9B%E5%BB%BAconsumer-20220323%E4%B8%8A%E5%8D%88110206017.png\" alt=\"rabbitmq-创建consumer\"></p>\n<p>上图中的方法参数 autoAck 就表示是否开启<strong>自动 ack</strong>。</p>\n<p>对于三种手动确认的方法也分别提供了方法。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">basicAck</span><span class=\"hljs-params\">(<span class=\"hljs-type\">long</span> deliveryTag, <span class=\"hljs-type\">boolean</span> multiple)</span> <span class=\"hljs-keyword\">throws</span> IOException;<br>    <br><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">basicNack</span><span class=\"hljs-params\">(<span class=\"hljs-type\">long</span> deliveryTag, <span class=\"hljs-type\">boolean</span> multiple, <span class=\"hljs-type\">boolean</span> requeue)</span><br>            <span class=\"hljs-keyword\">throws</span> IOException;<br><br><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">basicReject</span><span class=\"hljs-params\">(<span class=\"hljs-type\">long</span> deliveryTag, <span class=\"hljs-type\">boolean</span> requeue)</span> <span class=\"hljs-keyword\">throws</span> IOException;<br></code></pre></div></td></tr></table></figure>\n\n<p>deliveryTag 可以简单理解为消息的 id。</p>\n<p>multiple 参数的含义是是否为批量操作，例如 basicAck 方法，如果为批量操作，会将 deliveryTag 之前的消息都 ack。</p>\n<p>requeue 参数表示是否需要重回队列，如果为 false，那么在方法调用后消息就会被丢弃或者转发到死信队列，如果为 true，消息就会重新进入队列，重新下发到消费者。</p>\n<blockquote>\n<p>Java 原生的 RabbitMQ 客户端基本就简单实现了。</p>\n</blockquote>\n<br>\n\n<h3 id=\"SpringBoot-中的-ack-实现\"><a href=\"#SpringBoot-中的-ack-实现\" class=\"headerlink\" title=\"SpringBoot 中的 ack 实现\"></a>SpringBoot 中的 ack 实现</h3><p>SpringBoot 根据以上的 ack 方法抽象提供了三种 AcknowledgeMode，具体如下：</p>\n<img src=\"https://chenqwwq.oss-cn-hangzhou.aliyuncs.com/note/springboot-rabbitmq-ackmode-20220323%E4%B8%8A%E5%8D%88110220858.png\" alt=\"springboot-rabbitmq-ackmode\" style=\"zoom:67%;\" />\n\n<p>None 对应的就是 RabbitMQ 的 自动 ack，在消息被下发后就认为是消费成功，Broker 可以删除该消息。</p>\n<blockquote>\n<p>实际开发中慎用该配置！</p>\n<p>但是如果处理失败就无法对该条消息进行重试，因为已经从队列中删除。</p>\n<p>自动 ack 能稍微提高消息速度，ack 之后 Broken 会立马补消息到 prefetch 个。</p>\n</blockquote>\n<p>MANUAL 需要用户在 listener 中手动调用 ack &#x2F; nack &#x2F; reject 方法。</p>\n<p><strong>AUTO 是由 SpringBoot 控制的 ack 模式，如果 listener 返回正常，则调用 ack，如果抛异常则调用 nack。</strong></p>\n<blockquote>\n<p>是在 RabbitMQ 官方提供了客户端实现的基础上封装的记住。</p>\n</blockquote>\n<p>另外的还有 default-requeue-rejected 配置，表示在消息处理失败之后是否需要重回队列。</p>\n<blockquote>\n<p><strong>SpringBoot 的客户端默认是会重回队列的，所以如果 Listener 抛异常而不进一步处理，消息会进入死循环。</strong></p>\n</blockquote>\n<br>\n\n<h2 id=\"阅读\"><a href=\"#阅读\" class=\"headerlink\" title=\"阅读\"></a>阅读</h2><p><a href=\"https://www.rabbitmq.com/confirms.html#publisher-confirms\">Consumer Acknowledgements and Publisher Confirms</a></p>\n","site":{"data":{}},"more":"<h1 id=\"RabbitMQ-如何保证消息不丢失\"><a href=\"#RabbitMQ-如何保证消息不丢失\" class=\"headerlink\" title=\"RabbitMQ 如何保证消息不丢失?\"></a>RabbitMQ 如何保证消息不丢失?</h1><hr>\n<br>\n\n<h2 id=\"脑图\"><a href=\"#脑图\" class=\"headerlink\" title=\"脑图\"></a>脑图</h2><p><img src=\"https://chenqwwq.oss-cn-hangzhou.aliyuncs.com/note/RabbitMQ%E8%84%91%E5%9B%BE1-7942529.png\" alt=\"相关脑图\"></p>\n<br>\n\n<br>\n\n<h2 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h2><p>RabbitMQ 可以分为 Producer（生产者），Consumer（消费者），Exchange（交换机），Queue（队列）四个角色。</p>\n<p>消息的流经过程就是 Producer -&gt; Exchange -&gt; Queue -&gt; Consumer。</p>\n<blockquote>\n<p>和 Kafka 不同，RabbitMQ 不会直接和 Queue（Topic） 打交道，而是通过 Exchange，生产者甚至不知道消息最终去了哪里。</p>\n</blockquote>\n<br>\n\n<p>所以要保证消息不丢就必须保证以下流程：</p>\n<ol>\n<li>Producer 到 Exchange 的过程，确保 Exchange 接收到消息</li>\n<li>Exchange 到 Queue 的过程，确保消息被正确的投递</li>\n<li>Queue 到 Consumer 的过程，确保消息被正常的消费和 ack</li>\n</ol>\n<p>还有就是，消息在 Exchange 和 Queue 的持久性，不能因为 Broker 的宕机导致消息的丢失，所以 Exchange ，Queue 和消息都需要持久化。</p>\n<blockquote>\n<p>持久化对性能有损，使用时谨慎判断是否必要。</p>\n</blockquote>\n<br>\n\n<br>\n\n<h2 id=\"Producer-到-Exchange-的过程\"><a href=\"#Producer-到-Exchange-的过程\" class=\"headerlink\" title=\"Producer 到 Exchange 的过程\"></a>Producer 到 Exchange 的过程</h2><p>该过程可以通过<a href=\"https://www.rabbitmq.com/tutorials/tutorial-seven-java.html\">生产者确认（Publisher Confirm）</a> 来保证。</p>\n<p><strong>Confirm 机制开启之后，会为生产者的每条消息添加从1开始的id，如果 Broker 确定接收到消息，则返回一个 confirm。</strong></p>\n<p>Confirm 机制只负责到消息是否到达 Exchange 不负责后续的消息投递等流程，另外 RabbitMQ 也提供了事务的情况，事务的作用就是确保消息一定能够全部到达 Broker。</p>\n<br>\n\n<p>Springboot 的 RabbitMQ 实现中，可以对 RabbitTemplate 添加 RabbitTemplate.ConfirmCallback 回调函数，该回调需要额外配置以下内容</p>\n<img src=\"https://chenqwwq.oss-cn-hangzhou.aliyuncs.com/note/rabbitmq-publish-confirm%E9%85%8D%E7%BD%AE-20220323%E4%B8%8A%E5%8D%88110140863.png\" alt=\"rabbitmq-publish-confirm配置\" style=\"zoom:67%;\" />\n\n<p><strong>confirm 的回调方法在消息投递出去之后触发，不论成功还是失败都会。</strong></p>\n<p>以回执的方式明确消息是否真正到达 Broker，如果未到达则可以做下一步的处理，重发或者入库等等，方法相关入参如下：</p>\n<img src=\"https://chenqwwq.oss-cn-hangzhou.aliyuncs.com/note/rabbitmq-publish-confirm%E7%A4%BA%E4%BE%8B-20220323%E4%B8%8A%E5%8D%88110144410.png\" alt=\"rabbitmq-publish-confirm示例\" style=\"zoom:67%;\" />\n\n<br>\n\n<br>\n\n<h2 id=\"Exchange-到-Queue-的过程\"><a href=\"#Exchange-到-Queue-的过程\" class=\"headerlink\" title=\"Exchange 到 Queue 的过程\"></a>Exchange 到 Queue 的过程</h2><p><strong>该过程可以通过 RabbitMQ 提供的 mandatory 参数设置。</strong></p>\n<p>mandatory 参数的作用就是确保消息被正确的投递到具体的队列，如果在 Broker 中无法匹配到具体队列，那么也会触发回调。</p>\n<br>\n\n<p>Springboot 的客户端封装也提供了 RabbitTemplate.ReturnCallback 回调方法，用来监听消息的状态。</p>\n<p>想要该参数生效，以下两个配置必须同时配置。</p>\n<img src=\"https://chenqwwq.oss-cn-hangzhou.aliyuncs.com/note/rabbitmq-springboot-mandatory%E9%85%8D%E7%BD%AE-20220323%E4%B8%8A%E5%8D%88110148745.png\" alt=\"rabbitmq-springboot-mandatory配置\" style=\"zoom:67%;\" />\n\n<p>方法相关入参如下：</p>\n<img src=\"https://chenqwwq.oss-cn-hangzhou.aliyuncs.com/note/rabbitmq-mandatory%E5%9B%9E%E8%B0%83%E7%A4%BA%E4%BE%8B-20220323%E4%B8%8A%E5%8D%88110153031.png\" alt=\"rabbitmq-mandatory回调示例\" style=\"zoom:67%;\" />\n\n<br>\n\n<p>回调并没有办法直接解决消息的投递失败问题，对失败投递进行报警，然后人工排查情况才是关键。</p>\n<blockquote>\n<p>mandatory 的回调只有消息投递失败的时候才会触发，正常投递不会触发。</p>\n<p>这和 publish confirm 不同，publish confirm 是不管失败还是成功都会触发回调的。</p>\n</blockquote>\n<br>\n\n<h3 id=\"备份交换机\"><a href=\"#备份交换机\" class=\"headerlink\" title=\"备份交换机\"></a>备份交换机</h3><p><strong>RabbitMQ 中还存在一个备份交换机（alternate-exchange）的概念，如果消息在正常的交换机无法匹配到队列的时候，消息会被转发到该交换机，由该交换机进一步投递。</strong></p>\n<p><strong>所以就可以使用备份交换机收集无法匹配到 Queue 的消息。</strong></p>\n<p>一般该交换机被设置为 FANOUT 模式，确保消息可以被直接投递。</p>\n<br>\n\n<br>\n\n\n\n<h2 id=\"Queue-到-Consumer-的过程\"><a href=\"#Queue-到-Consumer-的过程\" class=\"headerlink\" title=\"Queue 到 Consumer 的过程\"></a>Queue 到 Consumer 的过程</h2><p>RabbitMQ 中保存的消息，只有在被 ack 之后才会主动删除，所以在 ack 消息之前必须要确保消息的正常消费。</p>\n<blockquote>\n<p>这个也是 RabbitMQ 和 Kafka 不同的点。</p>\n<p>Kafka 在消费者 ack 之后并不会删除消息，只有消息累积到一定阈值（时间或者大小）之后才会删除，甚至可以不删除，因此 Kafka 即使作为存储服务也没啥问题。</p>\n</blockquote>\n<br>\n\n<h3 id=\"RabbitMQ-原生-ack-模式\"><a href=\"#RabbitMQ-原生-ack-模式\" class=\"headerlink\" title=\"RabbitMQ 原生 ack 模式\"></a>RabbitMQ 原生 ack 模式</h3><p>RabbitMQ 的消费者端提供了<strong>自动和手动两种 ack 方式</strong>。</p>\n<p><a href=\"https://www.rabbitmq.com/confirms.html#acknowledgement-modes\">Consumer Acknowledgement Modes and Data Safety Considerations</a></p>\n<p><strong>在自动确认的模式下，消息被认为在发送之后就算成功处理，因此很容易造成消息丢失，但是自动确认在很大程度上提高了吞吐量。</strong></p>\n<blockquote>\n<p>Consumer 是直接和 Queue 接触的，一个 Queue 可以由多个 Consumer 共同消费，如果一个 Consumer 断线，那么该 Consumer 上未 ack 的消息会被转发到其他的 Consumer 上，此时又会存在重复消费的问题。</p>\n</blockquote>\n<p><strong>对于手动确认</strong>，RabbitMQ 定义了以下三种形式：<img src=\"https://chenqwwq.oss-cn-hangzhou.aliyuncs.com/note/rabbitmq%E6%89%8B%E5%8A%A8ack%E7%B1%BB%E5%9E%8B-8004518.png\" alt=\"rabbitmq手动ack类型\"></p>\n<br>\n\n<p>basic.ack 就是确认消费成功，Broker 在接收到该条 ack 之后会尝试删除对应的消息。</p>\n<p>basic.reject 和 basic.nack 的作用是一样的，区别就在于语义上，作用都是拒绝消息，并且可以通过参数确定消息是否需要重新入队列。</p>\n<br>\n\n<blockquote>\n<p><strong>消费者连接的时候就需要指定 ack 的模式。</strong></p>\n<p>RabbitMQ 提供了两大类 ack 模式：手动和自动</p>\n<ol>\n<li>自动 ack 会在消息到达消费者之后直接删除队列中的消息</li>\n<li>手动 ack 分为 ack &#x2F; nack &#x2F; reject 三种。</li>\n</ol>\n</blockquote>\n<br>\n\n<br>\n\n<h3 id=\"Java-原生客户端-ack-实现\"><a href=\"#Java-原生客户端-ack-实现\" class=\"headerlink\" title=\"Java 原生客户端 ack 实现\"></a>Java 原生客户端 ack 实现</h3><p>在创建 Consumer 的时候就需要指定 ack 的形式:</p>\n<p><img src=\"https://chenqwwq.oss-cn-hangzhou.aliyuncs.com/note/rabbitmq-%E5%88%9B%E5%BB%BAconsumer-20220323%E4%B8%8A%E5%8D%88110206017.png\" alt=\"rabbitmq-创建consumer\"></p>\n<p>上图中的方法参数 autoAck 就表示是否开启<strong>自动 ack</strong>。</p>\n<p>对于三种手动确认的方法也分别提供了方法。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">basicAck</span><span class=\"hljs-params\">(<span class=\"hljs-type\">long</span> deliveryTag, <span class=\"hljs-type\">boolean</span> multiple)</span> <span class=\"hljs-keyword\">throws</span> IOException;<br>    <br><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">basicNack</span><span class=\"hljs-params\">(<span class=\"hljs-type\">long</span> deliveryTag, <span class=\"hljs-type\">boolean</span> multiple, <span class=\"hljs-type\">boolean</span> requeue)</span><br>            <span class=\"hljs-keyword\">throws</span> IOException;<br><br><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">basicReject</span><span class=\"hljs-params\">(<span class=\"hljs-type\">long</span> deliveryTag, <span class=\"hljs-type\">boolean</span> requeue)</span> <span class=\"hljs-keyword\">throws</span> IOException;<br></code></pre></td></tr></table></figure>\n\n<p>deliveryTag 可以简单理解为消息的 id。</p>\n<p>multiple 参数的含义是是否为批量操作，例如 basicAck 方法，如果为批量操作，会将 deliveryTag 之前的消息都 ack。</p>\n<p>requeue 参数表示是否需要重回队列，如果为 false，那么在方法调用后消息就会被丢弃或者转发到死信队列，如果为 true，消息就会重新进入队列，重新下发到消费者。</p>\n<blockquote>\n<p>Java 原生的 RabbitMQ 客户端基本就简单实现了。</p>\n</blockquote>\n<br>\n\n<h3 id=\"SpringBoot-中的-ack-实现\"><a href=\"#SpringBoot-中的-ack-实现\" class=\"headerlink\" title=\"SpringBoot 中的 ack 实现\"></a>SpringBoot 中的 ack 实现</h3><p>SpringBoot 根据以上的 ack 方法抽象提供了三种 AcknowledgeMode，具体如下：</p>\n<img src=\"https://chenqwwq.oss-cn-hangzhou.aliyuncs.com/note/springboot-rabbitmq-ackmode-20220323%E4%B8%8A%E5%8D%88110220858.png\" alt=\"springboot-rabbitmq-ackmode\" style=\"zoom:67%;\" />\n\n<p>None 对应的就是 RabbitMQ 的 自动 ack，在消息被下发后就认为是消费成功，Broker 可以删除该消息。</p>\n<blockquote>\n<p>实际开发中慎用该配置！</p>\n<p>但是如果处理失败就无法对该条消息进行重试，因为已经从队列中删除。</p>\n<p>自动 ack 能稍微提高消息速度，ack 之后 Broken 会立马补消息到 prefetch 个。</p>\n</blockquote>\n<p>MANUAL 需要用户在 listener 中手动调用 ack &#x2F; nack &#x2F; reject 方法。</p>\n<p><strong>AUTO 是由 SpringBoot 控制的 ack 模式，如果 listener 返回正常，则调用 ack，如果抛异常则调用 nack。</strong></p>\n<blockquote>\n<p>是在 RabbitMQ 官方提供了客户端实现的基础上封装的记住。</p>\n</blockquote>\n<p>另外的还有 default-requeue-rejected 配置，表示在消息处理失败之后是否需要重回队列。</p>\n<blockquote>\n<p><strong>SpringBoot 的客户端默认是会重回队列的，所以如果 Listener 抛异常而不进一步处理，消息会进入死循环。</strong></p>\n</blockquote>\n<br>\n\n<h2 id=\"阅读\"><a href=\"#阅读\" class=\"headerlink\" title=\"阅读\"></a>阅读</h2><p><a href=\"https://www.rabbitmq.com/confirms.html#publisher-confirms\">Consumer Acknowledgements and Publisher Confirms</a></p>\n"},{"title":"synchronized 相关内容整理","excerpt":"synchronized 是 Java 提供的同步原语，背后是 Java虚拟机(JVM) 提供的 Monitor 机制。","index_img":"https://chenqwwq.oss-cn-hangzhou.aliyuncs.com/note/image-20210715211623026.png","banner_img":"https://chenqwwq.oss-cn-hangzhou.aliyuncs.com/note/image-20210715211623026.png","date":"2021-07-15T10:10:28.000Z","_content":"\n\n## 知识脑图\n\n![Synchronized 脑图](https://chenqwwq.oss-cn-hangzhou.aliyuncs.com/note/image-20210715211623026.png)\n\n## 概述\n\nsynchronized 是 Java 提供的同步原语，背后是 Java虚拟机(JVM) 提供的 Monitor 机制。\n\n> Java 中任何一个对象都可以作为监视器 (Monitor) 对象，因为 Monitor 是通过 C++ 实现的对于 Object 类的扩展机制，该对象保存了锁相关的数据结构，例如保存阻塞线程列表等。\n\nsynchronized 修饰的代码块只能由单个线程执行，以互斥锁的形式保证了其线程安全。\n\n**synchronized 具有可重入性，单线程可以重复对一个对象上锁，而不会自我阻塞，但解锁还是一次性的。**\n\n**synchronized 保证了程序的可见性和原子性以及有序性。<font size=\"2\">(volatile只能保证可见性以及有序性，而无原子性)</font>**\n\n**synchronized 不具备公平性，会导致饥饿，而使线程阻塞时间过长。**\n\n> 饥饿就是指线程因为获取不到想要的资源而长时间不能执行。\n\n另外和 synchronized 搭配使用的还有 wait()/notify()/notifyAll() 三个方法。\n\n<br>\n\n<br>\n\n## synchronized的锁形式\n\n`synchronized `有三种上锁形式，分别会对不同的对象上锁:\n\n1. 修饰实例方法\n\n   ```java\n   // 此时的上锁对象为当前的实例\n   public synchronized void syncMethod(){};\n   ```\n\n2. 修饰代码块\n\n   ```java\n   public void syncMethod(){\n       // 此时上锁为lock对象.也可为Class对象 eg: lock.class\n       synchronized(lock){}\n   }\n   ```\n\n3. 修饰静态方法\n\n   ```java\n   // 此时的上锁对象为Class对象\n   public static synchronized void syncMethod(){};\n   ```\n\n<br>\n\n<br>\n\n## synchronized的虚拟机层实现\n\nsynchronized 根据不同的上锁形式会有不同的实现方式。\n\n1. 在修饰代码块时使用的是明确的 **monitorenter 和 monitorexit** 两个指令\n\n    ![javap_moitorenter_exit](https://chenqwwq.oss-cn-hangzhou.aliyuncs.com/note/javap_moitorenter_exit-7942538.png)\n\n    > 退出实际上是两次的，在方法执行完毕之后还会执行一次 monitorexit\n\n    <br>\n\n2. 在修饰方法(包括静态方法)时由方法调用指令读取运行时常量池方法中的  **ACC_SYNCHRONIZED** 隐式实现\n\n      ![javap_acc_synchronized](https://chenqwwq.oss-cn-hangzhou.aliyuncs.com/note/javap_acc_synchronized-7942540.jpg)\n\n<br>\n\n<br>\n\n## Mark Word\n\nMark Word  是  Java对象头 结构中除类型指针外的另一部分，用于记录  HashCode ，对象的年龄分代，锁状态标志等运行时数据。\n\n> Java 的对象头包含了 **Mark Word，类型指针和对齐填充。**\n\n下图中就比较清晰的展示了，不同情况下 Mark Word 的不同结构：\n\n![markword](https://chenqwwq.oss-cn-hangzhou.aliyuncs.com/note/markword-7942543.jpg)\n\n> Mark Word 相当于是锁的记录，查看 Mark Word 就可以确定当前 Monitor 锁的状态。<br>\n>\n\n<br>\n\n## Monitor 监视器(管程)\n\nMonitor 是虚拟机内建的用来实现同步的机制，原则上Java的每一个对象都可以作为 Monitor。\n\n> `Monitor`的实现还是依赖于操作系统的`Mutex Lock`(互斥锁)来实现的，对于操作系统层面的实现不深究。\n>\n> 因为线程的阻塞，恢复以及 mutex 的调用等都涉及到用户态到内核态的切换，所以性能有限。\n\n![JVM_Monitor](https://chenqwwq.oss-cn-hangzhou.aliyuncs.com/note/JVM_Monitor-7942546.jpeg)\n\n上图可以简单说明整个 Monitor 机制的工作方法。\n\nEntry Set 存放所有竞争线程集合，Wait Set 存放所有的等待线程的集合。\n\n> 都是用 Set 表示了，所以 synchronized 并不是公平锁，存在饥饿的情况。\n\n进入同步代码块的时候，线程先加入到 Entry Set，如果获取到锁则变为 Owner，期间调用了 wait() 方法后，进入 Wait Set，调用了 notify() 之后回到 Entry Set 继续竞争锁资源，代码块执行完毕则会退出。\n\n只有 Owner 代表的线程才可以执行标识的代码块，也就保证了锁的互斥性。\n\n>Monitor 是以 C++ 实现的，虚拟机内建的互斥锁机制，Java中还可以使用 ReentrantLock 和 Condition 对象实现更加灵活的控制。\n>\n>Condition 中也有 await()/signal()/signalAll() 等配套方法。\n\n<br>\n\n<br>\n\n## wait()/notify()/notifyAll()\n\n>**以上三个方法都需要在获取到 Monitor 锁的状态下执行，也就是说在 synchronized 代码块中执行。**\n\n以上三个方法都在 Object 类中声明。\n\n> Class 对象也继承与 Object 对象，所以 Class 对象也能作为 Monitor 锁对象。\n\nwait() 会释放当前的 Monitor 锁，并使线程进入 WAITING 或者 TIMED_WAITING 状态，在上图中就是进入到 Wait Set 中，另外 wait(long) 可以指定超时时间。 \n\nnotify() 会从当前的 Monitor 的 Wait Set 中唤醒一个等待的线程，notifyAll() 则是唤醒全部的线程。\n\n>notify() 唤醒的线程会进入到 Entry Set，而不是直接获取到锁，当前线程也不会直接释放锁。\n>\n>所以如果通过 wait() 阻塞的线程重新执行时候需要重新判断执行条件。\n\n<br>\n\n<br>\n\n\n\n## synchronized的优化<font size=\"2\">(HotSpot)</font>\n\nJDK1.6  之前  synchronized  一直为重量级锁，直接使用互斥锁阻塞线程，也就导致了一定的性能问题。\n\n> 性能问题主要来源于线程状态的切换，以及用户态和内核态之间的来回切换。\n\nHopSpot  在  JDK1.6 之后加入了**偏向锁，自旋锁，自适应自旋锁，轻量级锁等优化**.\n\n锁级别从低到高依次是：无锁状态、偏向锁状态、轻量级锁状态和重量级锁状态，**绝大多数情况下，锁可以升级但不能降级。**\n\n<br>\n\n### 锁的转换关系\n\n![synchronizd 的锁转换](https://chenqwwq.oss-cn-hangzhou.aliyuncs.com/note/java_synchronized-7942549.jpg)\n\n- 我觉得上图已经很好的展示了几个状态之间的转化，就不在赘述了.<font size=\"1\">(估计也讲不好)</font>\n\n<br>\n\n#### 偏向锁相关问题\n\n和群友讨论的时候发现的问题:**如果使用了偏向锁，那么势必会占据 MarkWord 中 HashCode 的位置，那么此时的 HashCode 又保存在哪里？**\n\n在以下的文章中看的了答案，简单来说就是:\n\n- HashCode 和偏向线程Id并不会共存，且 HashCode 的优先级高于偏向线程ID\n- 如果处于偏向锁时，计算了 HashCode，那么锁会直接膨胀为重量级锁或者轻量级锁。\n- 如果存在 HashCode ， MarkWord 即为不可偏向状态。\n- 因为轻量级锁会将 Mark Word 复制到虚拟机的栈帧，所以轻量级锁和 HashCode 是可以共存的。\n\n> 并不是十分确定。\n\n<br>\n\n### 自旋锁 & 自适应自旋锁\n\n引入自旋锁是因为在很多时候线程并不会长时间持有锁，此时使用  Metux 阻塞线程没过一会儿又唤醒就得不偿失。\n\n> **自旋锁就是一个循环，在等待持有锁的线程释放锁的过程中，不阻塞线程而让线程处于一直循环尝试获取锁的状态，从而避免了线程切换，阻塞的开销。**\n\n自旋锁在自旋的过程中也会占用一部分的 CPU 时间，若一直无限制自旋也会白白浪费 CPU 资源，所以在此基础之上又引入了**自适应自旋锁**.\n\n自适应自旋锁是对自旋锁的优化，**为自旋的次数或者时间设定一个上限，若超过这个上限一般会选择挂起线程或别的操作.**\n\n<br>\n\n### 锁消除\n\n锁消除就是**在逃逸分析技术的支持下**，消除非公用资源的上锁步骤，从而提高性能。\n\n```java\npublic void test(){\n    StringBuffer s = new StringBuffer();\n    String a1 = \"CheN\";\n    String a2 = \"bXxx\";\n    s.append(a1);\n    s.append(a2);\n}\n```\n\n如上面这段代码展示，其中 StringBuffer 类是线程安全的，方法都会有 synchronized 修饰，所以最少也会有偏向锁的机制在发挥作用，但 a1 和 a2 的作用域就在 test 方法中，完全不会逃逸到方法体外，也不会引起线程安全问题，此时甚至偏向锁都显得很没必要。\n\n<br>\n\n### 锁粗化\n\n在一段代码中，若同步区域被限制的过小会导致线程频繁的进行锁的释放和获取操作.而此时锁粗化的作用就出来了，**虚拟机探测到该类情况会直接将锁的同步区域扩展到整个操作的外部**，从而消除无谓的锁操作。\n\n```java\nfor(int i = 0;i < 10;i++){\n    // 此时虚拟机会直接将锁的范围扩展到循环之外\n    synchronized(this){\n      \tdoSomething();\n    }\n}\n```\n\n<br>\n\n<br>\n\n## 相关文章\n\n- [深入理解Java并发之synchronized实现原理](https://blog.csdn.net/javazejian/article/details/72828483)\n- [Java并发——关键字synchronized解析](https://juejin.im/post/5b42c2546fb9a04f8751eabc)\n- [HashCode和偏向锁](https://blog.csdn.net/saintyyu/article/details/108295657)\n- [synchronized的源码级理解](https://mp.weixin.qq.com/s?__biz=MzkxNTE3NjQ3MA==&mid=2247488192&idx=1&sn=85fa12be29fef85d41c571b2c853de5d&chksm=c1627fb9f615f6af30d979b3e69bd7223e9e5e3e801a59f12cd492d00ea32623d55177f5e523&mpshare=1&scene=24&srcid=03027ZCVnPeq49L3bb4hjg9z&sharer_sharetime=1614644481827&sharer_shareid=22f066e400946fcffb59089626c6a1f2#rd)","source":"_posts/Synchronized.md","raw":"---\ntitle: synchronized 相关内容整理\nexcerpt:  synchronized 是 Java 提供的同步原语，背后是 Java虚拟机(JVM) 提供的 Monitor 机制。\nindex_img: https://chenqwwq.oss-cn-hangzhou.aliyuncs.com/note/image-20210715211623026.png\nbanner_img: https://chenqwwq.oss-cn-hangzhou.aliyuncs.com/note/image-20210715211623026.png\ndate: 2021-07-15 18:10:28\ncategories:\n- java\ntags:\n- jvm\n---\n\n\n## 知识脑图\n\n![Synchronized 脑图](https://chenqwwq.oss-cn-hangzhou.aliyuncs.com/note/image-20210715211623026.png)\n\n## 概述\n\nsynchronized 是 Java 提供的同步原语，背后是 Java虚拟机(JVM) 提供的 Monitor 机制。\n\n> Java 中任何一个对象都可以作为监视器 (Monitor) 对象，因为 Monitor 是通过 C++ 实现的对于 Object 类的扩展机制，该对象保存了锁相关的数据结构，例如保存阻塞线程列表等。\n\nsynchronized 修饰的代码块只能由单个线程执行，以互斥锁的形式保证了其线程安全。\n\n**synchronized 具有可重入性，单线程可以重复对一个对象上锁，而不会自我阻塞，但解锁还是一次性的。**\n\n**synchronized 保证了程序的可见性和原子性以及有序性。<font size=\"2\">(volatile只能保证可见性以及有序性，而无原子性)</font>**\n\n**synchronized 不具备公平性，会导致饥饿，而使线程阻塞时间过长。**\n\n> 饥饿就是指线程因为获取不到想要的资源而长时间不能执行。\n\n另外和 synchronized 搭配使用的还有 wait()/notify()/notifyAll() 三个方法。\n\n<br>\n\n<br>\n\n## synchronized的锁形式\n\n`synchronized `有三种上锁形式，分别会对不同的对象上锁:\n\n1. 修饰实例方法\n\n   ```java\n   // 此时的上锁对象为当前的实例\n   public synchronized void syncMethod(){};\n   ```\n\n2. 修饰代码块\n\n   ```java\n   public void syncMethod(){\n       // 此时上锁为lock对象.也可为Class对象 eg: lock.class\n       synchronized(lock){}\n   }\n   ```\n\n3. 修饰静态方法\n\n   ```java\n   // 此时的上锁对象为Class对象\n   public static synchronized void syncMethod(){};\n   ```\n\n<br>\n\n<br>\n\n## synchronized的虚拟机层实现\n\nsynchronized 根据不同的上锁形式会有不同的实现方式。\n\n1. 在修饰代码块时使用的是明确的 **monitorenter 和 monitorexit** 两个指令\n\n    ![javap_moitorenter_exit](https://chenqwwq.oss-cn-hangzhou.aliyuncs.com/note/javap_moitorenter_exit-7942538.png)\n\n    > 退出实际上是两次的，在方法执行完毕之后还会执行一次 monitorexit\n\n    <br>\n\n2. 在修饰方法(包括静态方法)时由方法调用指令读取运行时常量池方法中的  **ACC_SYNCHRONIZED** 隐式实现\n\n      ![javap_acc_synchronized](https://chenqwwq.oss-cn-hangzhou.aliyuncs.com/note/javap_acc_synchronized-7942540.jpg)\n\n<br>\n\n<br>\n\n## Mark Word\n\nMark Word  是  Java对象头 结构中除类型指针外的另一部分，用于记录  HashCode ，对象的年龄分代，锁状态标志等运行时数据。\n\n> Java 的对象头包含了 **Mark Word，类型指针和对齐填充。**\n\n下图中就比较清晰的展示了，不同情况下 Mark Word 的不同结构：\n\n![markword](https://chenqwwq.oss-cn-hangzhou.aliyuncs.com/note/markword-7942543.jpg)\n\n> Mark Word 相当于是锁的记录，查看 Mark Word 就可以确定当前 Monitor 锁的状态。<br>\n>\n\n<br>\n\n## Monitor 监视器(管程)\n\nMonitor 是虚拟机内建的用来实现同步的机制，原则上Java的每一个对象都可以作为 Monitor。\n\n> `Monitor`的实现还是依赖于操作系统的`Mutex Lock`(互斥锁)来实现的，对于操作系统层面的实现不深究。\n>\n> 因为线程的阻塞，恢复以及 mutex 的调用等都涉及到用户态到内核态的切换，所以性能有限。\n\n![JVM_Monitor](https://chenqwwq.oss-cn-hangzhou.aliyuncs.com/note/JVM_Monitor-7942546.jpeg)\n\n上图可以简单说明整个 Monitor 机制的工作方法。\n\nEntry Set 存放所有竞争线程集合，Wait Set 存放所有的等待线程的集合。\n\n> 都是用 Set 表示了，所以 synchronized 并不是公平锁，存在饥饿的情况。\n\n进入同步代码块的时候，线程先加入到 Entry Set，如果获取到锁则变为 Owner，期间调用了 wait() 方法后，进入 Wait Set，调用了 notify() 之后回到 Entry Set 继续竞争锁资源，代码块执行完毕则会退出。\n\n只有 Owner 代表的线程才可以执行标识的代码块，也就保证了锁的互斥性。\n\n>Monitor 是以 C++ 实现的，虚拟机内建的互斥锁机制，Java中还可以使用 ReentrantLock 和 Condition 对象实现更加灵活的控制。\n>\n>Condition 中也有 await()/signal()/signalAll() 等配套方法。\n\n<br>\n\n<br>\n\n## wait()/notify()/notifyAll()\n\n>**以上三个方法都需要在获取到 Monitor 锁的状态下执行，也就是说在 synchronized 代码块中执行。**\n\n以上三个方法都在 Object 类中声明。\n\n> Class 对象也继承与 Object 对象，所以 Class 对象也能作为 Monitor 锁对象。\n\nwait() 会释放当前的 Monitor 锁，并使线程进入 WAITING 或者 TIMED_WAITING 状态，在上图中就是进入到 Wait Set 中，另外 wait(long) 可以指定超时时间。 \n\nnotify() 会从当前的 Monitor 的 Wait Set 中唤醒一个等待的线程，notifyAll() 则是唤醒全部的线程。\n\n>notify() 唤醒的线程会进入到 Entry Set，而不是直接获取到锁，当前线程也不会直接释放锁。\n>\n>所以如果通过 wait() 阻塞的线程重新执行时候需要重新判断执行条件。\n\n<br>\n\n<br>\n\n\n\n## synchronized的优化<font size=\"2\">(HotSpot)</font>\n\nJDK1.6  之前  synchronized  一直为重量级锁，直接使用互斥锁阻塞线程，也就导致了一定的性能问题。\n\n> 性能问题主要来源于线程状态的切换，以及用户态和内核态之间的来回切换。\n\nHopSpot  在  JDK1.6 之后加入了**偏向锁，自旋锁，自适应自旋锁，轻量级锁等优化**.\n\n锁级别从低到高依次是：无锁状态、偏向锁状态、轻量级锁状态和重量级锁状态，**绝大多数情况下，锁可以升级但不能降级。**\n\n<br>\n\n### 锁的转换关系\n\n![synchronizd 的锁转换](https://chenqwwq.oss-cn-hangzhou.aliyuncs.com/note/java_synchronized-7942549.jpg)\n\n- 我觉得上图已经很好的展示了几个状态之间的转化，就不在赘述了.<font size=\"1\">(估计也讲不好)</font>\n\n<br>\n\n#### 偏向锁相关问题\n\n和群友讨论的时候发现的问题:**如果使用了偏向锁，那么势必会占据 MarkWord 中 HashCode 的位置，那么此时的 HashCode 又保存在哪里？**\n\n在以下的文章中看的了答案，简单来说就是:\n\n- HashCode 和偏向线程Id并不会共存，且 HashCode 的优先级高于偏向线程ID\n- 如果处于偏向锁时，计算了 HashCode，那么锁会直接膨胀为重量级锁或者轻量级锁。\n- 如果存在 HashCode ， MarkWord 即为不可偏向状态。\n- 因为轻量级锁会将 Mark Word 复制到虚拟机的栈帧，所以轻量级锁和 HashCode 是可以共存的。\n\n> 并不是十分确定。\n\n<br>\n\n### 自旋锁 & 自适应自旋锁\n\n引入自旋锁是因为在很多时候线程并不会长时间持有锁，此时使用  Metux 阻塞线程没过一会儿又唤醒就得不偿失。\n\n> **自旋锁就是一个循环，在等待持有锁的线程释放锁的过程中，不阻塞线程而让线程处于一直循环尝试获取锁的状态，从而避免了线程切换，阻塞的开销。**\n\n自旋锁在自旋的过程中也会占用一部分的 CPU 时间，若一直无限制自旋也会白白浪费 CPU 资源，所以在此基础之上又引入了**自适应自旋锁**.\n\n自适应自旋锁是对自旋锁的优化，**为自旋的次数或者时间设定一个上限，若超过这个上限一般会选择挂起线程或别的操作.**\n\n<br>\n\n### 锁消除\n\n锁消除就是**在逃逸分析技术的支持下**，消除非公用资源的上锁步骤，从而提高性能。\n\n```java\npublic void test(){\n    StringBuffer s = new StringBuffer();\n    String a1 = \"CheN\";\n    String a2 = \"bXxx\";\n    s.append(a1);\n    s.append(a2);\n}\n```\n\n如上面这段代码展示，其中 StringBuffer 类是线程安全的，方法都会有 synchronized 修饰，所以最少也会有偏向锁的机制在发挥作用，但 a1 和 a2 的作用域就在 test 方法中，完全不会逃逸到方法体外，也不会引起线程安全问题，此时甚至偏向锁都显得很没必要。\n\n<br>\n\n### 锁粗化\n\n在一段代码中，若同步区域被限制的过小会导致线程频繁的进行锁的释放和获取操作.而此时锁粗化的作用就出来了，**虚拟机探测到该类情况会直接将锁的同步区域扩展到整个操作的外部**，从而消除无谓的锁操作。\n\n```java\nfor(int i = 0;i < 10;i++){\n    // 此时虚拟机会直接将锁的范围扩展到循环之外\n    synchronized(this){\n      \tdoSomething();\n    }\n}\n```\n\n<br>\n\n<br>\n\n## 相关文章\n\n- [深入理解Java并发之synchronized实现原理](https://blog.csdn.net/javazejian/article/details/72828483)\n- [Java并发——关键字synchronized解析](https://juejin.im/post/5b42c2546fb9a04f8751eabc)\n- [HashCode和偏向锁](https://blog.csdn.net/saintyyu/article/details/108295657)\n- [synchronized的源码级理解](https://mp.weixin.qq.com/s?__biz=MzkxNTE3NjQ3MA==&mid=2247488192&idx=1&sn=85fa12be29fef85d41c571b2c853de5d&chksm=c1627fb9f615f6af30d979b3e69bd7223e9e5e3e801a59f12cd492d00ea32623d55177f5e523&mpshare=1&scene=24&srcid=03027ZCVnPeq49L3bb4hjg9z&sharer_sharetime=1614644481827&sharer_shareid=22f066e400946fcffb59089626c6a1f2#rd)","slug":"Synchronized","published":1,"updated":"2022-03-23T03:03:07.105Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clk87sjyh0005wnbvf13od14v","content":"<h2 id=\"知识脑图\"><a href=\"#知识脑图\" class=\"headerlink\" title=\"知识脑图\"></a>知识脑图</h2><p><img src=\"https://chenqwwq.oss-cn-hangzhou.aliyuncs.com/note/image-20210715211623026.png\" alt=\"Synchronized 脑图\"></p>\n<h2 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h2><p>synchronized 是 Java 提供的同步原语，背后是 Java虚拟机(JVM) 提供的 Monitor 机制。</p>\n<blockquote>\n<p>Java 中任何一个对象都可以作为监视器 (Monitor) 对象，因为 Monitor 是通过 C++ 实现的对于 Object 类的扩展机制，该对象保存了锁相关的数据结构，例如保存阻塞线程列表等。</p>\n</blockquote>\n<p>synchronized 修饰的代码块只能由单个线程执行，以互斥锁的形式保证了其线程安全。</p>\n<p><strong>synchronized 具有可重入性，单线程可以重复对一个对象上锁，而不会自我阻塞，但解锁还是一次性的。</strong></p>\n<p><strong>synchronized 保证了程序的可见性和原子性以及有序性。<font size=\"2\">(volatile只能保证可见性以及有序性，而无原子性)</font></strong></p>\n<p><strong>synchronized 不具备公平性，会导致饥饿，而使线程阻塞时间过长。</strong></p>\n<blockquote>\n<p>饥饿就是指线程因为获取不到想要的资源而长时间不能执行。</p>\n</blockquote>\n<p>另外和 synchronized 搭配使用的还有 wait()&#x2F;notify()&#x2F;notifyAll() 三个方法。</p>\n<br>\n\n<br>\n\n<h2 id=\"synchronized的锁形式\"><a href=\"#synchronized的锁形式\" class=\"headerlink\" title=\"synchronized的锁形式\"></a>synchronized的锁形式</h2><p><code>synchronized </code>有三种上锁形式，分别会对不同的对象上锁:</p>\n<ol>\n<li><p>修饰实例方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">// 此时的上锁对象为当前的实例</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">synchronized</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">syncMethod</span><span class=\"hljs-params\">()</span>&#123;&#125;;<br></code></pre></div></td></tr></table></figure>\n</li>\n<li><p>修饰代码块</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">syncMethod</span><span class=\"hljs-params\">()</span>&#123;<br>    <span class=\"hljs-comment\">// 此时上锁为lock对象.也可为Class对象 eg: lock.class</span><br>    <span class=\"hljs-keyword\">synchronized</span>(lock)&#123;&#125;<br>&#125;<br></code></pre></div></td></tr></table></figure>\n</li>\n<li><p>修饰静态方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">// 此时的上锁对象为Class对象</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">synchronized</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">syncMethod</span><span class=\"hljs-params\">()</span>&#123;&#125;;<br></code></pre></div></td></tr></table></figure></li>\n</ol>\n<br>\n\n<br>\n\n<h2 id=\"synchronized的虚拟机层实现\"><a href=\"#synchronized的虚拟机层实现\" class=\"headerlink\" title=\"synchronized的虚拟机层实现\"></a>synchronized的虚拟机层实现</h2><p>synchronized 根据不同的上锁形式会有不同的实现方式。</p>\n<ol>\n<li><p>在修饰代码块时使用的是明确的 <strong>monitorenter 和 monitorexit</strong> 两个指令</p>\n<p> <img src=\"https://chenqwwq.oss-cn-hangzhou.aliyuncs.com/note/javap_moitorenter_exit-7942538.png\" alt=\"javap_moitorenter_exit\"></p>\n<blockquote>\n<p>退出实际上是两次的，在方法执行完毕之后还会执行一次 monitorexit</p>\n</blockquote>\n <br>\n</li>\n<li><p>在修饰方法(包括静态方法)时由方法调用指令读取运行时常量池方法中的  <strong>ACC_SYNCHRONIZED</strong> 隐式实现</p>\n<p>   <img src=\"https://chenqwwq.oss-cn-hangzhou.aliyuncs.com/note/javap_acc_synchronized-7942540.jpg\" alt=\"javap_acc_synchronized\"></p>\n</li>\n</ol>\n<br>\n\n<br>\n\n<h2 id=\"Mark-Word\"><a href=\"#Mark-Word\" class=\"headerlink\" title=\"Mark Word\"></a>Mark Word</h2><p>Mark Word  是  Java对象头 结构中除类型指针外的另一部分，用于记录  HashCode ，对象的年龄分代，锁状态标志等运行时数据。</p>\n<blockquote>\n<p>Java 的对象头包含了 <strong>Mark Word，类型指针和对齐填充。</strong></p>\n</blockquote>\n<p>下图中就比较清晰的展示了，不同情况下 Mark Word 的不同结构：</p>\n<p><img src=\"https://chenqwwq.oss-cn-hangzhou.aliyuncs.com/note/markword-7942543.jpg\" alt=\"markword\"></p>\n<blockquote>\n<p>Mark Word 相当于是锁的记录，查看 Mark Word 就可以确定当前 Monitor 锁的状态。<br></p>\n</blockquote>\n<br>\n\n<h2 id=\"Monitor-监视器-管程\"><a href=\"#Monitor-监视器-管程\" class=\"headerlink\" title=\"Monitor 监视器(管程)\"></a>Monitor 监视器(管程)</h2><p>Monitor 是虚拟机内建的用来实现同步的机制，原则上Java的每一个对象都可以作为 Monitor。</p>\n<blockquote>\n<p><code>Monitor</code>的实现还是依赖于操作系统的<code>Mutex Lock</code>(互斥锁)来实现的，对于操作系统层面的实现不深究。</p>\n<p>因为线程的阻塞，恢复以及 mutex 的调用等都涉及到用户态到内核态的切换，所以性能有限。</p>\n</blockquote>\n<p><img src=\"https://chenqwwq.oss-cn-hangzhou.aliyuncs.com/note/JVM_Monitor-7942546.jpeg\" alt=\"JVM_Monitor\"></p>\n<p>上图可以简单说明整个 Monitor 机制的工作方法。</p>\n<p>Entry Set 存放所有竞争线程集合，Wait Set 存放所有的等待线程的集合。</p>\n<blockquote>\n<p>都是用 Set 表示了，所以 synchronized 并不是公平锁，存在饥饿的情况。</p>\n</blockquote>\n<p>进入同步代码块的时候，线程先加入到 Entry Set，如果获取到锁则变为 Owner，期间调用了 wait() 方法后，进入 Wait Set，调用了 notify() 之后回到 Entry Set 继续竞争锁资源，代码块执行完毕则会退出。</p>\n<p>只有 Owner 代表的线程才可以执行标识的代码块，也就保证了锁的互斥性。</p>\n<blockquote>\n<p>Monitor 是以 C++ 实现的，虚拟机内建的互斥锁机制，Java中还可以使用 ReentrantLock 和 Condition 对象实现更加灵活的控制。</p>\n<p>Condition 中也有 await()&#x2F;signal()&#x2F;signalAll() 等配套方法。</p>\n</blockquote>\n<br>\n\n<br>\n\n<h2 id=\"wait-x2F-notify-x2F-notifyAll\"><a href=\"#wait-x2F-notify-x2F-notifyAll\" class=\"headerlink\" title=\"wait()&#x2F;notify()&#x2F;notifyAll()\"></a>wait()&#x2F;notify()&#x2F;notifyAll()</h2><blockquote>\n<p><strong>以上三个方法都需要在获取到 Monitor 锁的状态下执行，也就是说在 synchronized 代码块中执行。</strong></p>\n</blockquote>\n<p>以上三个方法都在 Object 类中声明。</p>\n<blockquote>\n<p>Class 对象也继承与 Object 对象，所以 Class 对象也能作为 Monitor 锁对象。</p>\n</blockquote>\n<p>wait() 会释放当前的 Monitor 锁，并使线程进入 WAITING 或者 TIMED_WAITING 状态，在上图中就是进入到 Wait Set 中，另外 wait(long) 可以指定超时时间。 </p>\n<p>notify() 会从当前的 Monitor 的 Wait Set 中唤醒一个等待的线程，notifyAll() 则是唤醒全部的线程。</p>\n<blockquote>\n<p>notify() 唤醒的线程会进入到 Entry Set，而不是直接获取到锁，当前线程也不会直接释放锁。</p>\n<p>所以如果通过 wait() 阻塞的线程重新执行时候需要重新判断执行条件。</p>\n</blockquote>\n<br>\n\n<br>\n\n\n\n<h2 id=\"synchronized的优化-HotSpot\"><a href=\"#synchronized的优化-HotSpot\" class=\"headerlink\" title=\"synchronized的优化(HotSpot)\"></a>synchronized的优化<font size=\"2\">(HotSpot)</font></h2><p>JDK1.6  之前  synchronized  一直为重量级锁，直接使用互斥锁阻塞线程，也就导致了一定的性能问题。</p>\n<blockquote>\n<p>性能问题主要来源于线程状态的切换，以及用户态和内核态之间的来回切换。</p>\n</blockquote>\n<p>HopSpot  在  JDK1.6 之后加入了<strong>偏向锁，自旋锁，自适应自旋锁，轻量级锁等优化</strong>.</p>\n<p>锁级别从低到高依次是：无锁状态、偏向锁状态、轻量级锁状态和重量级锁状态，<strong>绝大多数情况下，锁可以升级但不能降级。</strong></p>\n<br>\n\n<h3 id=\"锁的转换关系\"><a href=\"#锁的转换关系\" class=\"headerlink\" title=\"锁的转换关系\"></a>锁的转换关系</h3><p><img src=\"https://chenqwwq.oss-cn-hangzhou.aliyuncs.com/note/java_synchronized-7942549.jpg\" alt=\"synchronizd 的锁转换\"></p>\n<ul>\n<li>我觉得上图已经很好的展示了几个状态之间的转化，就不在赘述了.<font size=\"1\">(估计也讲不好)</font></li>\n</ul>\n<br>\n\n<h4 id=\"偏向锁相关问题\"><a href=\"#偏向锁相关问题\" class=\"headerlink\" title=\"偏向锁相关问题\"></a>偏向锁相关问题</h4><p>和群友讨论的时候发现的问题:<strong>如果使用了偏向锁，那么势必会占据 MarkWord 中 HashCode 的位置，那么此时的 HashCode 又保存在哪里？</strong></p>\n<p>在以下的文章中看的了答案，简单来说就是:</p>\n<ul>\n<li>HashCode 和偏向线程Id并不会共存，且 HashCode 的优先级高于偏向线程ID</li>\n<li>如果处于偏向锁时，计算了 HashCode，那么锁会直接膨胀为重量级锁或者轻量级锁。</li>\n<li>如果存在 HashCode ， MarkWord 即为不可偏向状态。</li>\n<li>因为轻量级锁会将 Mark Word 复制到虚拟机的栈帧，所以轻量级锁和 HashCode 是可以共存的。</li>\n</ul>\n<blockquote>\n<p>并不是十分确定。</p>\n</blockquote>\n<br>\n\n<h3 id=\"自旋锁-amp-自适应自旋锁\"><a href=\"#自旋锁-amp-自适应自旋锁\" class=\"headerlink\" title=\"自旋锁 &amp; 自适应自旋锁\"></a>自旋锁 &amp; 自适应自旋锁</h3><p>引入自旋锁是因为在很多时候线程并不会长时间持有锁，此时使用  Metux 阻塞线程没过一会儿又唤醒就得不偿失。</p>\n<blockquote>\n<p><strong>自旋锁就是一个循环，在等待持有锁的线程释放锁的过程中，不阻塞线程而让线程处于一直循环尝试获取锁的状态，从而避免了线程切换，阻塞的开销。</strong></p>\n</blockquote>\n<p>自旋锁在自旋的过程中也会占用一部分的 CPU 时间，若一直无限制自旋也会白白浪费 CPU 资源，所以在此基础之上又引入了<strong>自适应自旋锁</strong>.</p>\n<p>自适应自旋锁是对自旋锁的优化，<strong>为自旋的次数或者时间设定一个上限，若超过这个上限一般会选择挂起线程或别的操作.</strong></p>\n<br>\n\n<h3 id=\"锁消除\"><a href=\"#锁消除\" class=\"headerlink\" title=\"锁消除\"></a>锁消除</h3><p>锁消除就是<strong>在逃逸分析技术的支持下</strong>，消除非公用资源的上锁步骤，从而提高性能。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">test</span><span class=\"hljs-params\">()</span>&#123;<br>    <span class=\"hljs-type\">StringBuffer</span> <span class=\"hljs-variable\">s</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">StringBuffer</span>();<br>    <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">a1</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&quot;CheN&quot;</span>;<br>    <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">a2</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&quot;bXxx&quot;</span>;<br>    s.append(a1);<br>    s.append(a2);<br>&#125;<br></code></pre></div></td></tr></table></figure>\n\n<p>如上面这段代码展示，其中 StringBuffer 类是线程安全的，方法都会有 synchronized 修饰，所以最少也会有偏向锁的机制在发挥作用，但 a1 和 a2 的作用域就在 test 方法中，完全不会逃逸到方法体外，也不会引起线程安全问题，此时甚至偏向锁都显得很没必要。</p>\n<br>\n\n<h3 id=\"锁粗化\"><a href=\"#锁粗化\" class=\"headerlink\" title=\"锁粗化\"></a>锁粗化</h3><p>在一段代码中，若同步区域被限制的过小会导致线程频繁的进行锁的释放和获取操作.而此时锁粗化的作用就出来了，<strong>虚拟机探测到该类情况会直接将锁的同步区域扩展到整个操作的外部</strong>，从而消除无谓的锁操作。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>;i &lt; <span class=\"hljs-number\">10</span>;i++)&#123;<br>    <span class=\"hljs-comment\">// 此时虚拟机会直接将锁的范围扩展到循环之外</span><br>    <span class=\"hljs-keyword\">synchronized</span>(<span class=\"hljs-built_in\">this</span>)&#123;<br>      \tdoSomething();<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure>\n\n<br>\n\n<br>\n\n<h2 id=\"相关文章\"><a href=\"#相关文章\" class=\"headerlink\" title=\"相关文章\"></a>相关文章</h2><ul>\n<li><a href=\"https://blog.csdn.net/javazejian/article/details/72828483\">深入理解Java并发之synchronized实现原理</a></li>\n<li><a href=\"https://juejin.im/post/5b42c2546fb9a04f8751eabc\">Java并发——关键字synchronized解析</a></li>\n<li><a href=\"https://blog.csdn.net/saintyyu/article/details/108295657\">HashCode和偏向锁</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s?__biz=MzkxNTE3NjQ3MA==&mid=2247488192&idx=1&sn=85fa12be29fef85d41c571b2c853de5d&chksm=c1627fb9f615f6af30d979b3e69bd7223e9e5e3e801a59f12cd492d00ea32623d55177f5e523&mpshare=1&scene=24&srcid=03027ZCVnPeq49L3bb4hjg9z&sharer_sharetime=1614644481827&sharer_shareid=22f066e400946fcffb59089626c6a1f2#rd\">synchronized的源码级理解</a></li>\n</ul>\n","site":{"data":{}},"more":"<h2 id=\"知识脑图\"><a href=\"#知识脑图\" class=\"headerlink\" title=\"知识脑图\"></a>知识脑图</h2><p><img src=\"https://chenqwwq.oss-cn-hangzhou.aliyuncs.com/note/image-20210715211623026.png\" alt=\"Synchronized 脑图\"></p>\n<h2 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h2><p>synchronized 是 Java 提供的同步原语，背后是 Java虚拟机(JVM) 提供的 Monitor 机制。</p>\n<blockquote>\n<p>Java 中任何一个对象都可以作为监视器 (Monitor) 对象，因为 Monitor 是通过 C++ 实现的对于 Object 类的扩展机制，该对象保存了锁相关的数据结构，例如保存阻塞线程列表等。</p>\n</blockquote>\n<p>synchronized 修饰的代码块只能由单个线程执行，以互斥锁的形式保证了其线程安全。</p>\n<p><strong>synchronized 具有可重入性，单线程可以重复对一个对象上锁，而不会自我阻塞，但解锁还是一次性的。</strong></p>\n<p><strong>synchronized 保证了程序的可见性和原子性以及有序性。<font size=\"2\">(volatile只能保证可见性以及有序性，而无原子性)</font></strong></p>\n<p><strong>synchronized 不具备公平性，会导致饥饿，而使线程阻塞时间过长。</strong></p>\n<blockquote>\n<p>饥饿就是指线程因为获取不到想要的资源而长时间不能执行。</p>\n</blockquote>\n<p>另外和 synchronized 搭配使用的还有 wait()&#x2F;notify()&#x2F;notifyAll() 三个方法。</p>\n<br>\n\n<br>\n\n<h2 id=\"synchronized的锁形式\"><a href=\"#synchronized的锁形式\" class=\"headerlink\" title=\"synchronized的锁形式\"></a>synchronized的锁形式</h2><p><code>synchronized </code>有三种上锁形式，分别会对不同的对象上锁:</p>\n<ol>\n<li><p>修饰实例方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">// 此时的上锁对象为当前的实例</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">synchronized</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">syncMethod</span><span class=\"hljs-params\">()</span>&#123;&#125;;<br></code></pre></td></tr></table></figure>\n</li>\n<li><p>修饰代码块</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">syncMethod</span><span class=\"hljs-params\">()</span>&#123;<br>    <span class=\"hljs-comment\">// 此时上锁为lock对象.也可为Class对象 eg: lock.class</span><br>    <span class=\"hljs-keyword\">synchronized</span>(lock)&#123;&#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n</li>\n<li><p>修饰静态方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">// 此时的上锁对象为Class对象</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">synchronized</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">syncMethod</span><span class=\"hljs-params\">()</span>&#123;&#125;;<br></code></pre></td></tr></table></figure></li>\n</ol>\n<br>\n\n<br>\n\n<h2 id=\"synchronized的虚拟机层实现\"><a href=\"#synchronized的虚拟机层实现\" class=\"headerlink\" title=\"synchronized的虚拟机层实现\"></a>synchronized的虚拟机层实现</h2><p>synchronized 根据不同的上锁形式会有不同的实现方式。</p>\n<ol>\n<li><p>在修饰代码块时使用的是明确的 <strong>monitorenter 和 monitorexit</strong> 两个指令</p>\n<p> <img src=\"https://chenqwwq.oss-cn-hangzhou.aliyuncs.com/note/javap_moitorenter_exit-7942538.png\" alt=\"javap_moitorenter_exit\"></p>\n<blockquote>\n<p>退出实际上是两次的，在方法执行完毕之后还会执行一次 monitorexit</p>\n</blockquote>\n <br>\n</li>\n<li><p>在修饰方法(包括静态方法)时由方法调用指令读取运行时常量池方法中的  <strong>ACC_SYNCHRONIZED</strong> 隐式实现</p>\n<p>   <img src=\"https://chenqwwq.oss-cn-hangzhou.aliyuncs.com/note/javap_acc_synchronized-7942540.jpg\" alt=\"javap_acc_synchronized\"></p>\n</li>\n</ol>\n<br>\n\n<br>\n\n<h2 id=\"Mark-Word\"><a href=\"#Mark-Word\" class=\"headerlink\" title=\"Mark Word\"></a>Mark Word</h2><p>Mark Word  是  Java对象头 结构中除类型指针外的另一部分，用于记录  HashCode ，对象的年龄分代，锁状态标志等运行时数据。</p>\n<blockquote>\n<p>Java 的对象头包含了 <strong>Mark Word，类型指针和对齐填充。</strong></p>\n</blockquote>\n<p>下图中就比较清晰的展示了，不同情况下 Mark Word 的不同结构：</p>\n<p><img src=\"https://chenqwwq.oss-cn-hangzhou.aliyuncs.com/note/markword-7942543.jpg\" alt=\"markword\"></p>\n<blockquote>\n<p>Mark Word 相当于是锁的记录，查看 Mark Word 就可以确定当前 Monitor 锁的状态。<br></p>\n</blockquote>\n<br>\n\n<h2 id=\"Monitor-监视器-管程\"><a href=\"#Monitor-监视器-管程\" class=\"headerlink\" title=\"Monitor 监视器(管程)\"></a>Monitor 监视器(管程)</h2><p>Monitor 是虚拟机内建的用来实现同步的机制，原则上Java的每一个对象都可以作为 Monitor。</p>\n<blockquote>\n<p><code>Monitor</code>的实现还是依赖于操作系统的<code>Mutex Lock</code>(互斥锁)来实现的，对于操作系统层面的实现不深究。</p>\n<p>因为线程的阻塞，恢复以及 mutex 的调用等都涉及到用户态到内核态的切换，所以性能有限。</p>\n</blockquote>\n<p><img src=\"https://chenqwwq.oss-cn-hangzhou.aliyuncs.com/note/JVM_Monitor-7942546.jpeg\" alt=\"JVM_Monitor\"></p>\n<p>上图可以简单说明整个 Monitor 机制的工作方法。</p>\n<p>Entry Set 存放所有竞争线程集合，Wait Set 存放所有的等待线程的集合。</p>\n<blockquote>\n<p>都是用 Set 表示了，所以 synchronized 并不是公平锁，存在饥饿的情况。</p>\n</blockquote>\n<p>进入同步代码块的时候，线程先加入到 Entry Set，如果获取到锁则变为 Owner，期间调用了 wait() 方法后，进入 Wait Set，调用了 notify() 之后回到 Entry Set 继续竞争锁资源，代码块执行完毕则会退出。</p>\n<p>只有 Owner 代表的线程才可以执行标识的代码块，也就保证了锁的互斥性。</p>\n<blockquote>\n<p>Monitor 是以 C++ 实现的，虚拟机内建的互斥锁机制，Java中还可以使用 ReentrantLock 和 Condition 对象实现更加灵活的控制。</p>\n<p>Condition 中也有 await()&#x2F;signal()&#x2F;signalAll() 等配套方法。</p>\n</blockquote>\n<br>\n\n<br>\n\n<h2 id=\"wait-x2F-notify-x2F-notifyAll\"><a href=\"#wait-x2F-notify-x2F-notifyAll\" class=\"headerlink\" title=\"wait()&#x2F;notify()&#x2F;notifyAll()\"></a>wait()&#x2F;notify()&#x2F;notifyAll()</h2><blockquote>\n<p><strong>以上三个方法都需要在获取到 Monitor 锁的状态下执行，也就是说在 synchronized 代码块中执行。</strong></p>\n</blockquote>\n<p>以上三个方法都在 Object 类中声明。</p>\n<blockquote>\n<p>Class 对象也继承与 Object 对象，所以 Class 对象也能作为 Monitor 锁对象。</p>\n</blockquote>\n<p>wait() 会释放当前的 Monitor 锁，并使线程进入 WAITING 或者 TIMED_WAITING 状态，在上图中就是进入到 Wait Set 中，另外 wait(long) 可以指定超时时间。 </p>\n<p>notify() 会从当前的 Monitor 的 Wait Set 中唤醒一个等待的线程，notifyAll() 则是唤醒全部的线程。</p>\n<blockquote>\n<p>notify() 唤醒的线程会进入到 Entry Set，而不是直接获取到锁，当前线程也不会直接释放锁。</p>\n<p>所以如果通过 wait() 阻塞的线程重新执行时候需要重新判断执行条件。</p>\n</blockquote>\n<br>\n\n<br>\n\n\n\n<h2 id=\"synchronized的优化-HotSpot\"><a href=\"#synchronized的优化-HotSpot\" class=\"headerlink\" title=\"synchronized的优化(HotSpot)\"></a>synchronized的优化<font size=\"2\">(HotSpot)</font></h2><p>JDK1.6  之前  synchronized  一直为重量级锁，直接使用互斥锁阻塞线程，也就导致了一定的性能问题。</p>\n<blockquote>\n<p>性能问题主要来源于线程状态的切换，以及用户态和内核态之间的来回切换。</p>\n</blockquote>\n<p>HopSpot  在  JDK1.6 之后加入了<strong>偏向锁，自旋锁，自适应自旋锁，轻量级锁等优化</strong>.</p>\n<p>锁级别从低到高依次是：无锁状态、偏向锁状态、轻量级锁状态和重量级锁状态，<strong>绝大多数情况下，锁可以升级但不能降级。</strong></p>\n<br>\n\n<h3 id=\"锁的转换关系\"><a href=\"#锁的转换关系\" class=\"headerlink\" title=\"锁的转换关系\"></a>锁的转换关系</h3><p><img src=\"https://chenqwwq.oss-cn-hangzhou.aliyuncs.com/note/java_synchronized-7942549.jpg\" alt=\"synchronizd 的锁转换\"></p>\n<ul>\n<li>我觉得上图已经很好的展示了几个状态之间的转化，就不在赘述了.<font size=\"1\">(估计也讲不好)</font></li>\n</ul>\n<br>\n\n<h4 id=\"偏向锁相关问题\"><a href=\"#偏向锁相关问题\" class=\"headerlink\" title=\"偏向锁相关问题\"></a>偏向锁相关问题</h4><p>和群友讨论的时候发现的问题:<strong>如果使用了偏向锁，那么势必会占据 MarkWord 中 HashCode 的位置，那么此时的 HashCode 又保存在哪里？</strong></p>\n<p>在以下的文章中看的了答案，简单来说就是:</p>\n<ul>\n<li>HashCode 和偏向线程Id并不会共存，且 HashCode 的优先级高于偏向线程ID</li>\n<li>如果处于偏向锁时，计算了 HashCode，那么锁会直接膨胀为重量级锁或者轻量级锁。</li>\n<li>如果存在 HashCode ， MarkWord 即为不可偏向状态。</li>\n<li>因为轻量级锁会将 Mark Word 复制到虚拟机的栈帧，所以轻量级锁和 HashCode 是可以共存的。</li>\n</ul>\n<blockquote>\n<p>并不是十分确定。</p>\n</blockquote>\n<br>\n\n<h3 id=\"自旋锁-amp-自适应自旋锁\"><a href=\"#自旋锁-amp-自适应自旋锁\" class=\"headerlink\" title=\"自旋锁 &amp; 自适应自旋锁\"></a>自旋锁 &amp; 自适应自旋锁</h3><p>引入自旋锁是因为在很多时候线程并不会长时间持有锁，此时使用  Metux 阻塞线程没过一会儿又唤醒就得不偿失。</p>\n<blockquote>\n<p><strong>自旋锁就是一个循环，在等待持有锁的线程释放锁的过程中，不阻塞线程而让线程处于一直循环尝试获取锁的状态，从而避免了线程切换，阻塞的开销。</strong></p>\n</blockquote>\n<p>自旋锁在自旋的过程中也会占用一部分的 CPU 时间，若一直无限制自旋也会白白浪费 CPU 资源，所以在此基础之上又引入了<strong>自适应自旋锁</strong>.</p>\n<p>自适应自旋锁是对自旋锁的优化，<strong>为自旋的次数或者时间设定一个上限，若超过这个上限一般会选择挂起线程或别的操作.</strong></p>\n<br>\n\n<h3 id=\"锁消除\"><a href=\"#锁消除\" class=\"headerlink\" title=\"锁消除\"></a>锁消除</h3><p>锁消除就是<strong>在逃逸分析技术的支持下</strong>，消除非公用资源的上锁步骤，从而提高性能。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">test</span><span class=\"hljs-params\">()</span>&#123;<br>    <span class=\"hljs-type\">StringBuffer</span> <span class=\"hljs-variable\">s</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">StringBuffer</span>();<br>    <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">a1</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&quot;CheN&quot;</span>;<br>    <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">a2</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&quot;bXxx&quot;</span>;<br>    s.append(a1);<br>    s.append(a2);<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>如上面这段代码展示，其中 StringBuffer 类是线程安全的，方法都会有 synchronized 修饰，所以最少也会有偏向锁的机制在发挥作用，但 a1 和 a2 的作用域就在 test 方法中，完全不会逃逸到方法体外，也不会引起线程安全问题，此时甚至偏向锁都显得很没必要。</p>\n<br>\n\n<h3 id=\"锁粗化\"><a href=\"#锁粗化\" class=\"headerlink\" title=\"锁粗化\"></a>锁粗化</h3><p>在一段代码中，若同步区域被限制的过小会导致线程频繁的进行锁的释放和获取操作.而此时锁粗化的作用就出来了，<strong>虚拟机探测到该类情况会直接将锁的同步区域扩展到整个操作的外部</strong>，从而消除无谓的锁操作。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>;i &lt; <span class=\"hljs-number\">10</span>;i++)&#123;<br>    <span class=\"hljs-comment\">// 此时虚拟机会直接将锁的范围扩展到循环之外</span><br>    <span class=\"hljs-keyword\">synchronized</span>(<span class=\"hljs-built_in\">this</span>)&#123;<br>      \tdoSomething();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<br>\n\n<br>\n\n<h2 id=\"相关文章\"><a href=\"#相关文章\" class=\"headerlink\" title=\"相关文章\"></a>相关文章</h2><ul>\n<li><a href=\"https://blog.csdn.net/javazejian/article/details/72828483\">深入理解Java并发之synchronized实现原理</a></li>\n<li><a href=\"https://juejin.im/post/5b42c2546fb9a04f8751eabc\">Java并发——关键字synchronized解析</a></li>\n<li><a href=\"https://blog.csdn.net/saintyyu/article/details/108295657\">HashCode和偏向锁</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s?__biz=MzkxNTE3NjQ3MA==&mid=2247488192&idx=1&sn=85fa12be29fef85d41c571b2c853de5d&chksm=c1627fb9f615f6af30d979b3e69bd7223e9e5e3e801a59f12cd492d00ea32623d55177f5e523&mpshare=1&scene=24&srcid=03027ZCVnPeq49L3bb4hjg9z&sharer_sharetime=1614644481827&sharer_shareid=22f066e400946fcffb59089626c6a1f2#rd\">synchronized的源码级理解</a></li>\n</ul>\n"},{"title":"ThreadLocal 源码分析","excerpt":"ThreadLocal（线程局部变量），作用是保存每个线程的私有变量，以空间换时间的方式，为每一个线程保存一份私有变量，也就不存在所谓的并发问题。","index_img":"https://chenqwwq.oss-cn-hangzhou.aliyuncs.com/note/ThreadLocal.png","banner_img":"https://chenqwwq.oss-cn-hangzhou.aliyuncs.com/note/ThreadLocal.png","date":"2021-05-30T15:08:35.000Z","_content":"\n\n\n# ThreadLocal\n\n\n\n## 思维导图\n\n![ThreadLocal思维导图](https://chenqwwq.oss-cn-hangzhou.aliyuncs.com/note/ThreadLocal.png)\n\n<br>\n\n\n\n## 概述\n\nThreadLocal（线程局部变量），作用是**保存每个线程的私有变量**，以空间换时间的方式，为每一个线程保存一份**私有**变量，也就不存在所谓的并发问题。\n\n> 真实的数据并不会存在 ThreadLocal 中。\n>\n> 实际上，数据都保存在 Thread 对象中 Thread#threadLocals 这个成员变量里，所以一定程度上 ThreadLocal 只是一个操作该集合的工具类。\n\n<br>\n\n以下就是 ThreadLocalMap 在Thread中的变量声明:\n\n ![ThreadLocalMap的变量声明](https://chenqwwq.oss-cn-hangzhou.aliyuncs.com/note/ThreadLocalMap%E7%9A%84%E5%8F%98%E9%87%8F%E5%A3%B0%E6%98%8E.png)\n\n>threadLocals 是给 ThreadLocal 用的，该类只能访问当前线程中的数据。\n>\n>inheritableThreadLocal 是给 InheritableThreadLocal 用的，使用该类子线程可以访问到父线程的数据。\n\n<br>\n\n\n\n\n\n## ThreadLocal 的相关操作\n\n- `ThreadLocal`的内部方法因为逻辑都不复杂,不需要单独出来看,就直接全放一块了.\n\n### 数据获取 - Get\n\n```java\n   // 直接获取线程私有的数据\n   public T get() {\n        // 获取当前线程\n        Thread t = Thread.currentThread();\n        // getMap其实很简单就是获取`t`中的`threadLocals`,代码在`工具方法`中\n        ThreadLocalMap map = getMap(t); \n        if (map != null) {\t\t\t\t\t\t\t\t\t\t// 3.\n            ThreadLocalMap.Entry e = map.getEntry(this);\n            if (e != null) {\t\t\t\t\t\t\t// 2.\n                @SuppressWarnings(\"unchecked\")\n                T result = (T)e.value;\n                return result;\n            }\n        }\n        return setInitialValue();  \t\t\t\t// 1.\n    }\n\t// 这个方法只有在上面`1.`处调用...不知道为什么map,thread不直接传参\n\t// 该方法的功能就是为`Thread`设置`threadLocals`的初始值\n    private T setInitialValue() {\n        T value = initialValue();\n        Thread t = Thread.currentThread();\n        ThreadLocalMap map = getMap(t);\n        // map不为null表明是从上面的`2.`处进入该方法\n        // 已经初始化`threadLocals`,但并未找到当前对应的`Entry`\n        // 所以此时直接添加`Entry`就行\n        if (map != null)\n            map.set(this, value);\n        else\n            createMap(t, value);\n        return value;\n    }\n      // 初始值,`protected`方便子类继承,并定义自己的初始值.\n      protected T initialValue() {\n        return null;\n      }\n\n\t// 创建并赋值`threadLocals`的方法\n     void createMap(Thread t, T firstValue) {\n        t.threadLocals = new ThreadLocalMap(this, firstValue);\n    }\n```\n\n整个获取的过程其实并不难：\n\n1. 通过 Thread#currentThread 方法获取当前线程对象。\n2. 首先通过 getMap 方法获取当前线程绑定的 threadLocals。\n3. 不要为空时，以当前 ThreadLocal 对象为参数获取对应的Entry 对象，为空跳到第四步。\n4. 获取 Entry 对象中的 value ，并返回。\n5. 调用 setInitialValue方法，并返回。\n\n<br>\n\n这里可以很明显的看出来，数据其实还是保存在 Thread 对象里的。\n\n通过 setInitialValue 方法可以设定初始值。\n\n> 例如，希望统计每个线程的某个操作计数，那么就可以用如下的方法：\n>\n> ```java\n> ThreadLocal<Integer> counter = new ThreadLocal<Integer>() {\n>     @Override\n>     protected Integer initialValue() {\n>         return 0;\n>     }\n> };\n> ```\n>\n> 以 0 为初始值做统计。\n\n<br>\n\n<br>\n\n### 数据存储 - Set\n\n```java\n public void set(T value) {\n        // 获取当前线程\n        Thread t = Thread.currentThread();\n        ThreadLocalMap map = getMap(t);     // .1\n        if (map != null)\n            map.set(this, value);\n        else\n            createMap(t, value);\n }\n```\n\n流程简述如下：\n\n1. 获取当前线程,并以此获取线程绑定的 ThreadLocalMap 对象。\n2. map 不为空时,直接set。\n3. map 为空时需要先创建 Map 并赋值。\n\n<br><br>\n\n## ThreadLocalMap\n\nThreadLocalMap 类似于 HashMap ，也是使用 Hash 算法定位存取的数据结构，以 ThreadLocal 对象为 Key。\n\nHash 算法合理时 ThreadLocalMap 的存取操作近乎是 O(1) 的复杂度。\n\n`ThreadLocalMap` 出人意料的并没有继承任何一个类或接口，是完全独立的类，以为会像 HashMap 一样继承一下 AbstractMap。\n\n<br>\n\n### 成员变量\n\n  ```java\n// 默认的初始容量 一定要是二的次幂\nprivate static final int INITIAL_CAPACITY = 16;\n// 元素数组/条目数组\nprivate Entry[] table;\n// 大小,用于记录数组中实际存在的Entry数目\nprivate int size = 0;\n// 阈值\nprivate int threshold; // Default to 0 构造方法\n  ```\n\n> **ThreadLocalMap 的底层数据结构是 Entry 的数组，**并且默认容量为16。\n\n<br>\n\n以下为 Entry 对象的声明形式：\n\n ![image-20210221154222208](https://chenqwwq.oss-cn-hangzhou.aliyuncs.com/note/image-20210221154222208.png)\n\n> WeakReference 声明了 Entry 对象对于 Key ，也就是 ThreadLocal 对象的引用是弱引用。\n>\n> **弱引用消除了 ThreadLocalMap 的引用对 ThreadLocal  的对象回收的影响，**这是 ThreadLocal 避免内存泄漏的核心。\n\n<br>\n\n### 元素获取\n\n#### getEntry(ThreadLocal<?> key) \n\n- 该方法就是通过 ThreadLocal 对象获取对应的数据。\n\n```java\nprivate Entry getEntry(ThreadLocal<?> key) {\n    // 和HashMap中一样的下标计算方式\n    int i = key.threadLocalHashCode & (table.length - 1);\n    Entry e = table[i];\n    // 获取到对应的Entry之后就分两步\n    if (e != null && e.get() == key)\n        // 1. e不为空且threadLocal相等\n        return e;\t\t\n    else\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n        // 2. e为空或者threadLocal不相等\t\t\t\t\n        return getEntryAfterMiss(key, i, e);\n}\n```\n\n起手就是一个 HashCode & (len - 1)，和 HashMap 类似，但ThreadLocal 的 HashCode 和 HashMap 中的直接调用 hashCode() 方法不同。\n\nThreadLocal 是采用递增的形式，而非直接计算对象的 HashCode。\n\n<br>\n\n ```java\n private final int threadLocalHashCode = nextHashCode();\n private static AtomicInteger nextHashCode = new AtomicInteger();  \n private static int nextHashCode() {\n \treturn nextHashCode.getAndAdd(HASH_INCREMENT);\n }\n ```\n 以上就是 HashCode 的获取方式，**是以类变量的方式递增获取**，相对于直接调用 hashCode() 可以更好的减少 hash 冲突。\n\n> 每次创建一个 ThreadLocal，hashCode 都会+1，所以能使数据更加均匀的散布在数组中，更好的减少 hash 冲突。\n\n<br>\n\n如果hash计算出来的下标存在想要的元素就直接返回，如果获取元素为空还会再调用 `getEntryAfterMiss` 做冲突查询的后续处理.\n\n<br><br>\n\n#### getEntryAfterMiss(ThreadLocal<?> key, int i, Entry e)\n\n- 该方法是在直接按照 `Hash` 计算下标后，没获取到对应的 `Entry` 对象的时候调用，**下标处不是想要的元素就说明出现了 Hash 冲突。**\n\n以下为方法源码：\n\n```java\nprivate Entry getEntryAfterMiss(ThreadLocal<?> key, int i, Entry e) {\n        Entry[] tab = table;\n        int len = tab.length;\n        // 此时注意如果从上面情况`2.`进来时,\n        // e为空则直接返回null,不会进入while循环\n        // 只有e不为空且e.get() != key时才会进while循环\n        while (e != null) {\n            ThreadLocal<?> k = e.get();\n            // 找到相同的k,返回得到的Entry,get操作结束\n            if (k == key)\n                return e;\n            // 若此时的k为空,那么e则被标记为`Stale`需要被`expunge`\n            if (k == null)\n                expungeStaleEntry(i);\n            else\t// 下面两个都是遍历的相关操作\n                // nextIndex就是+1判断是否越界\n                i = nextIndex(i, len);\n            e = tab[i];\n        }\n        return null;\n}\n```\n\n> **在判断出现 hash 冲突之后，直接往后线性查找之后的数组元素。**\n\n<br>\n\n<br>\n\n\n\n#### expungeStaleEntry(int staleSlot)\n\n- 该方法用来清除 `staleSlot` 位置的 Entry 对象,并且会**清理当前节点到下一个 `null` 节点中间的过期 `Entry`.**\n\n\n\n```java\n   /** \n     * 清空旧的Entry对象\n     * @param staleSlot: 清理的起始位置\n     * @param return: 返回的是第一个为空的Entry下标\n     */\n    private int expungeStaleEntry(int staleSlot) {\n            Entry[] tab = table;\n            int len = tab.length;\n        \t// 清空`staleSlot`位置的Entry\n        \t// value引用置为空之后,对象被标记为不可达,下次GC就会被回收.\n            tab[staleSlot].value = null;\n            tab[staleSlot] = null;\n            size--;\n            Entry e;\n            int i;\n        \t// 通过nextIndex从`staleSlot`的下一个开始向后遍历Entry数组,直到e不为空\n         \t// e赋值为当前的Entry对象\n            for (i = nextIndex(staleSlot, len);\n                 (e = tab[i]) != null;\t\t\n                 i = nextIndex(i, len)) {\n                ThreadLocal<?> k = e.get();\n                // 当k为空的时候清空节点信息\n                if (k == null) {\t\t\t\t\t\t\t\n                    e.value = null;\n                    tab[i] = null;\n                    size--;\n                } else {\t// 以下为k存在的情况\n                    int h = k.threadLocalHashCode & (len - 1);\n                    // 元素下标和key计算的不一样，表明是出现`Hash碰撞`之后调整的位置\n                    // 将当前的元素移动到下一个null位置\n                    if (h != i) {\t\t\t\t\t\n                        tab[i] = null;\n                        while (tab[h] != null)\n                            h = nextIndex(h, len);\n                        tab[h] = e;\n                    }\n                }\n            }\n            return i;\n        } \n```\n\n该方法是对内存泄露的进一步处理。\n\n**如果将ThreadLocal的内存泄露问题分成两个部分来看，一个是 Key，另外一个就是 Value。**\n\n**Key 的部分依靠弱引用清除，如果外部的强引用断开之后，也就是没有地方在使用到该 Key 之后，Key 会被 GC 回收，所以引用就为 null。**\n\n从而判断 Key 为 null 的 Value 就是 Stale 的对象，则靠该方法清除。\n\n> ThreadLocal 靠弱引用清除的只有 Key 对象，还有 Value 对象则需要靠扫描，所以内存泄露的情况并不是能够完全避免的。\n\n<br>\n\n<br>\n\n### 元素添加\n\n#### set(ThreadLocal<?> key, Object value)\n\n- 该方法就是添加元素的方法。\n\n```java\nprivate void set(ThreadLocal<?> key, Object value) {\n    Entry[] tab = table;\n    int len = tab.length;\n    int i = key.threadLocalHashCode & (len-1);\n    // 整个循环的功能就是找到相同的key覆盖value\n    // 或者找到key为null的节点覆盖节点信息\n    // 只有在e==null的时候跳出循环执行下面的代码\n    for (Entry e = tab[i];\n         e != null;\t\n         e = tab[i = nextIndex(i, len)]) {\n        ThreadLocal<?> k = e.get();\n        // 找到相等的k,则直接替换value,set操作结束\n        if (k == key) {\n            e.value = value;\n            return;\n        }\n        // k为空表示该节点过期,直接替换该节点\n        if (k == null) {\t\t\t\t\t       // 1.\n            replaceStaleEntry(key, value, i);\n            return;\n        }\n    }\n    // 走到这一步就是找到了e为空的位置，不然在上面两个判断里都return了\n    tab[i] = new Entry(key, value);\n    int sz = ++size;\n    if (!cleanSomeSlots(i, sz) && sz >= threshold)\n        rehash();\n}\n```\n\n通过 hashCode 确定下标后，如果 Key 相等则直接覆盖原数据，如果 Key 不相等则往后线性查找元素，找到为 null 的元素直接覆盖，或者找到空余的位置赋值。\n\n<br>\n\n最后会清理旧的元素，并且判断 threshold，决定是否需要扩容。\n\n> **ThreadLocalMap 处理 Hash 冲突的方法叫做 线性寻址法，在冲突之后往后搜索，找到第一个为空的下标并保存元素。**\n>\n> 线性寻址法在出现 Hash 冲突的时候处理的复杂度基本会变成 O(n)，并不能直接找一个 null 点就存储，因为数组中可能还有相同的 Key 在后面。\n\n<br>\n\n<br>\n\nreplaceStaleEntry\n\n- 源码中只有从上面 `1.` 处进入该方法,用于**替换  `key`  为空的 `Entry` 节点,顺带清除数组中的过期节点.**\n\n往后搜索的是第一个为空或者 Key 相等，如果先找到 Key 为空的并不能保证后续的节点没有 Key 相等的，所以在 replaceStaleEntry 方法中可能还需要处理另外一个 Key 相同的节点。\n\n```java\n/**\n *\t从`set.1.`处进入,key是插入元素ThreadLocal的hash,staleSlot为key为空的数组节点下标\n */\nprivate void replaceStaleEntry(ThreadLocal<?> key, Object value,\n                               int staleSlot) {\n    Entry[] tab = table;\n    int len = tab.length;\n    Entry e;\n    int slotToExpunge = staleSlot;\n    // 从传入位置,即插入时发现k为null的位置开始,向前遍历,直到数组元素为空\n    // 找到最前面一个key为null的值.\t\n    // 这里要吐槽一下源代码...大括号都不加 习惯真差\n    for (int i = prevIndex(staleSlot, len);\n         (e = tab[i]) != null;\t\t\n         i = prevIndex(i, len)){\n\t\t// 向前获取到第一个 Key 为空的对象\n        if (e.get() == null)\n            // 因为是环状遍历所以此时slotToExpunge是可能等于staleSlot的\n            slotToExpunge = i;\n    }\n    // 该段循环的功能就是向后遍历找到`key`相等的节点并替换\n    // 并对之后的元素进行清理\n    for (int i = nextIndex(staleSlot, len);\n         (e = tab[i]) != null;\n         i = nextIndex(i, len)) {\n        ThreadLocal<?> k = e.get();\n        if (k == key) {\t\n            // 替换 e 的 value\n            e.value = value;\n            // staleSlot 是因为 key 为 null 才进来的\n            // 所以 tab[i] 也是需要清理的节点\n            tab[i] = tab[staleSlot];\n            tab[staleSlot] = e;\n            if (slotToExpunge == staleSlot)\n                slotToExpunge = i;\n            cleanSomeSlots(expungeStaleEntry(slotToExpunge), len);\n            return;\n        }\n        // 其实我对这个`slotToExpunge == staleSlot`的判断一直挺疑惑的,为什么需要这个判断?\n        if (k == null && slotToExpunge == staleSlot)\n            slotToExpunge = i;\n    }\n    // e==null时跳到下面代码运行\n    // 清空并重新赋值\n    // 断开 Entry 对应的数据的强引用\n    tab[staleSlot].value = null;\n    tab[staleSlot] = new Entry(key, value);\n    // set后的清理\n    if (slotToExpunge != staleSlot)\n        cleanSomeSlots(expungeStaleEntry(slotToExpunge), len);\n}\n\n```\n\n**如上所说，再出现 Hash 冲突的时候，往后搜索的是第一个为空的节点，并不能直接赋值，因为在后续的数组中可能还存在相同的 Key 的节点。**\n\n替换元素之前会先向前搜索找到一个 Key 为 null 的节点。\n\n<br>\n\n<br>\n\n\n\n#### cleanSomeSlots\n\n- 该方法的功能是就是清除数组中的过期`Entry`\n- 首次清除从`i`向后开始遍历`log2(n)`次,如果之间发现过期`Entry`会直接将`n`扩充到`len`可以说全数组范围的遍历.发现过期`Entry`就调用`expungeStaleEntry`清除直到未发现`Entry`为止.\n\n```java\n/**\n  * @param i 清除的起始节点位置\n  * @param n 遍历控制,每次扫描都是log2(n)次,一般取当前数组的`size`或`len`\n  */\nprivate boolean cleanSomeSlots(int i, int n) {\n    \t\t// 是否有清除的标记\n            boolean removed = false;\n    \t\t// 获取底层数组的数据信息\n            Entry[] tab = table;\n            int len = tab.length;\n            do {\n                i = nextIndex(i, len);\n                Entry e = tab[i];\n                if (e != null && e.get() == null) {\n                    // 当发现有过期`Entry`时,n变为len\n                    // 即扩大范围,全数组范围在遍历一次\n                    n = len;\n                    removed = true;\n                    i = expungeStaleEntry(i);\n                }\t\n                // 无符号右移一位相当于n = n /2\n                // 所以在第一次会遍历`log2(n)`次\n            } while ( (n >>>= 1) != 0);\n    \t\t// 遍历过程中没出现过期`Entry`的情况下会返回是否有清理的标记.\n            return removed;\n        }\n```\n\n<br>\n\n<br>\n\n### 扩容调整方法\n\n#### rehash\n\n- 容量调整的先驱方法,先清理过期`Entry`,并做是否需要`resize`的判断\n- 调整的条件是**当前size大于阈值的3/4**就进行扩容\n\n```java\n private void rehash() {\n     \t\t// 清理过期Entry\n            expungeStaleEntries();\n     \t\t// 初始阈值threshold为10\n            if (size >= threshold - threshold / 4)\n                resize();\n        }\n```\n\n<br>\n\n<br>\n\n#### resize\n\n- 扩容的实际方法.\n\n```java\n  private void resize() {\n      \t\t// 获取旧数组并记录就数组大小\n            Entry[] oldTab = table;\n            int oldLen = oldTab.length;\n      \t\t// 新数组大小为旧数组的两倍\n            int newLen = oldLen * 2;\n            Entry[] newTab = new Entry[newLen];\n            int count = 0;\n\t\t\t// 遍历整个旧数组,并迁移元素到新数组\n            for (int j = 0; j < oldLen; ++j) {\n                Entry e = oldTab[j];\n                // 判断是否为空,空的话就算了\n                if (e != null) {\n                    ThreadLocal<?> k = e.get();\n                    // k为空即表示为过期节点,当即清理了.\n                    if (k == null) {\n                        e.value = null; \n                    } else {\n                        // 重新计算数组下标,如果数组对应位置已存在元素\n                        // 则环状遍历整个数组找个空位置赋值\n                        int h = k.threadLocalHashCode & (newLen - 1);\n                        while (newTab[h] != null)\n                            h = nextIndex(h, newLen);\n                        newTab[h] = e;\n                        count++;\n                    }\n                }\n            }\n\t\t\t// 设置新属性\t\n            setThreshold(newLen);\n            size = count;\n            table = newTab;\n        }\n```\n\n\n\n<br>\n\n<br>\n\n\n\n## Q&A\n\n> Q: ThreadLocal 为何会出现内存泄露？\n\n**ThreadLocal 会出现内存泄露的主要原因是如果是强引用，那么在 ThreadLocal 类不再使用之后，ThreadLocalMap 中无法清除相关的 Entry 对象。**\n\n在 ThreadLocal 不再使用之后，ThreadLocalMap 中指向 ThreadLocal 的强引用也会导致 ThreadLocal 无法被 GC 回收，同理 Value 对象也被保留了下来。\n\n**也就出现了所谓的内存泄露，无用的数据无法被 GC 有效的清除。**\n\n<br>\n\n<br>\n\n\n\n\n\n>  Q: ThreadLocal 如何解决内存泄漏?\n\nThreadLocal 的内存泄露可以分为 Key（也就是 ThreadLocal），以及 Value。\n\n**解决 Key 的内存泄露的方法就是采用弱引用，弱引用消除了 ThreadLocalMap 对 ThreadLocal 对象的 GC 的影响。**\n\n另外的在每次获取或者添加数据的时候都会判断 Key 是否被回收，如果 Key 已经被回收会连带清理 Value 对象，这也就顺带解决了 Value 的泄露问题。\n\n<br>\n\n<br>\n\n\n\n>  Q: ThreadLocalMap 如何解决Hash冲突？\n\nHash 冲突就是指通过 Hash 计算的下标值一致，两个元素的定位一致。\n\nHashMap 解决 Hash 冲突的方法就是**拉链法**，底层的数组中保存的不是单一的数据，而是一个集合(链表/红黑树)，冲突之后下挂。\n\n采用拉链法的结果就是在Hash冲突严重时会严重影响时间复杂度，因为就算是红黑树查询的事件复杂度都是 O(Log2n)。\n\nThreadLocalMap 并没有采用这种方法，而是使用的**开放寻址法**，如果已经有数据存在冲突点，就在数组中往下遍历找到第一个空着的位置。\n\n> 需要注意的是，并不是找到空的位置就可以直接替换，还是需要遍历整个数组确保没有重复的 Key。\n\n<br>\n\n<br>\n\n\n\n>  Q: ThreadLocalMap 和 HashMap 的异同\n\n两个都是采用 Hash 定位的数据结构，底层都是以数组的形式。\n\n但是 HashCode 的获取方式不同，HashMap 调用对象的 hashCode() 方法，而  ThreadLocalMap 中的 Key 就是 ThreadLocal，ThreadLocal 的 HashCode 是递增分配的。\n\n另外处理 Hash 冲突的方式不同，ThreadLocalMap 采用的开放寻址法，而 HashMap 采用的是拉链法。\n\n","source":"_posts/ThreadLocal实现解析.md","raw":"---\ntitle: ThreadLocal 源码分析\nexcerpt: ThreadLocal（线程局部变量），作用是保存每个线程的私有变量，以空间换时间的方式，为每一个线程保存一份私有变量，也就不存在所谓的并发问题。\nindex_img: https://chenqwwq.oss-cn-hangzhou.aliyuncs.com/note/ThreadLocal.png\nbanner_img: https://chenqwwq.oss-cn-hangzhou.aliyuncs.com/note/ThreadLocal.png\ndate: 2021-05-30 23:08:35\ncategories:\n- java\ntags:\n- jdk\n---\n\n\n\n# ThreadLocal\n\n\n\n## 思维导图\n\n![ThreadLocal思维导图](https://chenqwwq.oss-cn-hangzhou.aliyuncs.com/note/ThreadLocal.png)\n\n<br>\n\n\n\n## 概述\n\nThreadLocal（线程局部变量），作用是**保存每个线程的私有变量**，以空间换时间的方式，为每一个线程保存一份**私有**变量，也就不存在所谓的并发问题。\n\n> 真实的数据并不会存在 ThreadLocal 中。\n>\n> 实际上，数据都保存在 Thread 对象中 Thread#threadLocals 这个成员变量里，所以一定程度上 ThreadLocal 只是一个操作该集合的工具类。\n\n<br>\n\n以下就是 ThreadLocalMap 在Thread中的变量声明:\n\n ![ThreadLocalMap的变量声明](https://chenqwwq.oss-cn-hangzhou.aliyuncs.com/note/ThreadLocalMap%E7%9A%84%E5%8F%98%E9%87%8F%E5%A3%B0%E6%98%8E.png)\n\n>threadLocals 是给 ThreadLocal 用的，该类只能访问当前线程中的数据。\n>\n>inheritableThreadLocal 是给 InheritableThreadLocal 用的，使用该类子线程可以访问到父线程的数据。\n\n<br>\n\n\n\n\n\n## ThreadLocal 的相关操作\n\n- `ThreadLocal`的内部方法因为逻辑都不复杂,不需要单独出来看,就直接全放一块了.\n\n### 数据获取 - Get\n\n```java\n   // 直接获取线程私有的数据\n   public T get() {\n        // 获取当前线程\n        Thread t = Thread.currentThread();\n        // getMap其实很简单就是获取`t`中的`threadLocals`,代码在`工具方法`中\n        ThreadLocalMap map = getMap(t); \n        if (map != null) {\t\t\t\t\t\t\t\t\t\t// 3.\n            ThreadLocalMap.Entry e = map.getEntry(this);\n            if (e != null) {\t\t\t\t\t\t\t// 2.\n                @SuppressWarnings(\"unchecked\")\n                T result = (T)e.value;\n                return result;\n            }\n        }\n        return setInitialValue();  \t\t\t\t// 1.\n    }\n\t// 这个方法只有在上面`1.`处调用...不知道为什么map,thread不直接传参\n\t// 该方法的功能就是为`Thread`设置`threadLocals`的初始值\n    private T setInitialValue() {\n        T value = initialValue();\n        Thread t = Thread.currentThread();\n        ThreadLocalMap map = getMap(t);\n        // map不为null表明是从上面的`2.`处进入该方法\n        // 已经初始化`threadLocals`,但并未找到当前对应的`Entry`\n        // 所以此时直接添加`Entry`就行\n        if (map != null)\n            map.set(this, value);\n        else\n            createMap(t, value);\n        return value;\n    }\n      // 初始值,`protected`方便子类继承,并定义自己的初始值.\n      protected T initialValue() {\n        return null;\n      }\n\n\t// 创建并赋值`threadLocals`的方法\n     void createMap(Thread t, T firstValue) {\n        t.threadLocals = new ThreadLocalMap(this, firstValue);\n    }\n```\n\n整个获取的过程其实并不难：\n\n1. 通过 Thread#currentThread 方法获取当前线程对象。\n2. 首先通过 getMap 方法获取当前线程绑定的 threadLocals。\n3. 不要为空时，以当前 ThreadLocal 对象为参数获取对应的Entry 对象，为空跳到第四步。\n4. 获取 Entry 对象中的 value ，并返回。\n5. 调用 setInitialValue方法，并返回。\n\n<br>\n\n这里可以很明显的看出来，数据其实还是保存在 Thread 对象里的。\n\n通过 setInitialValue 方法可以设定初始值。\n\n> 例如，希望统计每个线程的某个操作计数，那么就可以用如下的方法：\n>\n> ```java\n> ThreadLocal<Integer> counter = new ThreadLocal<Integer>() {\n>     @Override\n>     protected Integer initialValue() {\n>         return 0;\n>     }\n> };\n> ```\n>\n> 以 0 为初始值做统计。\n\n<br>\n\n<br>\n\n### 数据存储 - Set\n\n```java\n public void set(T value) {\n        // 获取当前线程\n        Thread t = Thread.currentThread();\n        ThreadLocalMap map = getMap(t);     // .1\n        if (map != null)\n            map.set(this, value);\n        else\n            createMap(t, value);\n }\n```\n\n流程简述如下：\n\n1. 获取当前线程,并以此获取线程绑定的 ThreadLocalMap 对象。\n2. map 不为空时,直接set。\n3. map 为空时需要先创建 Map 并赋值。\n\n<br><br>\n\n## ThreadLocalMap\n\nThreadLocalMap 类似于 HashMap ，也是使用 Hash 算法定位存取的数据结构，以 ThreadLocal 对象为 Key。\n\nHash 算法合理时 ThreadLocalMap 的存取操作近乎是 O(1) 的复杂度。\n\n`ThreadLocalMap` 出人意料的并没有继承任何一个类或接口，是完全独立的类，以为会像 HashMap 一样继承一下 AbstractMap。\n\n<br>\n\n### 成员变量\n\n  ```java\n// 默认的初始容量 一定要是二的次幂\nprivate static final int INITIAL_CAPACITY = 16;\n// 元素数组/条目数组\nprivate Entry[] table;\n// 大小,用于记录数组中实际存在的Entry数目\nprivate int size = 0;\n// 阈值\nprivate int threshold; // Default to 0 构造方法\n  ```\n\n> **ThreadLocalMap 的底层数据结构是 Entry 的数组，**并且默认容量为16。\n\n<br>\n\n以下为 Entry 对象的声明形式：\n\n ![image-20210221154222208](https://chenqwwq.oss-cn-hangzhou.aliyuncs.com/note/image-20210221154222208.png)\n\n> WeakReference 声明了 Entry 对象对于 Key ，也就是 ThreadLocal 对象的引用是弱引用。\n>\n> **弱引用消除了 ThreadLocalMap 的引用对 ThreadLocal  的对象回收的影响，**这是 ThreadLocal 避免内存泄漏的核心。\n\n<br>\n\n### 元素获取\n\n#### getEntry(ThreadLocal<?> key) \n\n- 该方法就是通过 ThreadLocal 对象获取对应的数据。\n\n```java\nprivate Entry getEntry(ThreadLocal<?> key) {\n    // 和HashMap中一样的下标计算方式\n    int i = key.threadLocalHashCode & (table.length - 1);\n    Entry e = table[i];\n    // 获取到对应的Entry之后就分两步\n    if (e != null && e.get() == key)\n        // 1. e不为空且threadLocal相等\n        return e;\t\t\n    else\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n        // 2. e为空或者threadLocal不相等\t\t\t\t\n        return getEntryAfterMiss(key, i, e);\n}\n```\n\n起手就是一个 HashCode & (len - 1)，和 HashMap 类似，但ThreadLocal 的 HashCode 和 HashMap 中的直接调用 hashCode() 方法不同。\n\nThreadLocal 是采用递增的形式，而非直接计算对象的 HashCode。\n\n<br>\n\n ```java\n private final int threadLocalHashCode = nextHashCode();\n private static AtomicInteger nextHashCode = new AtomicInteger();  \n private static int nextHashCode() {\n \treturn nextHashCode.getAndAdd(HASH_INCREMENT);\n }\n ```\n 以上就是 HashCode 的获取方式，**是以类变量的方式递增获取**，相对于直接调用 hashCode() 可以更好的减少 hash 冲突。\n\n> 每次创建一个 ThreadLocal，hashCode 都会+1，所以能使数据更加均匀的散布在数组中，更好的减少 hash 冲突。\n\n<br>\n\n如果hash计算出来的下标存在想要的元素就直接返回，如果获取元素为空还会再调用 `getEntryAfterMiss` 做冲突查询的后续处理.\n\n<br><br>\n\n#### getEntryAfterMiss(ThreadLocal<?> key, int i, Entry e)\n\n- 该方法是在直接按照 `Hash` 计算下标后，没获取到对应的 `Entry` 对象的时候调用，**下标处不是想要的元素就说明出现了 Hash 冲突。**\n\n以下为方法源码：\n\n```java\nprivate Entry getEntryAfterMiss(ThreadLocal<?> key, int i, Entry e) {\n        Entry[] tab = table;\n        int len = tab.length;\n        // 此时注意如果从上面情况`2.`进来时,\n        // e为空则直接返回null,不会进入while循环\n        // 只有e不为空且e.get() != key时才会进while循环\n        while (e != null) {\n            ThreadLocal<?> k = e.get();\n            // 找到相同的k,返回得到的Entry,get操作结束\n            if (k == key)\n                return e;\n            // 若此时的k为空,那么e则被标记为`Stale`需要被`expunge`\n            if (k == null)\n                expungeStaleEntry(i);\n            else\t// 下面两个都是遍历的相关操作\n                // nextIndex就是+1判断是否越界\n                i = nextIndex(i, len);\n            e = tab[i];\n        }\n        return null;\n}\n```\n\n> **在判断出现 hash 冲突之后，直接往后线性查找之后的数组元素。**\n\n<br>\n\n<br>\n\n\n\n#### expungeStaleEntry(int staleSlot)\n\n- 该方法用来清除 `staleSlot` 位置的 Entry 对象,并且会**清理当前节点到下一个 `null` 节点中间的过期 `Entry`.**\n\n\n\n```java\n   /** \n     * 清空旧的Entry对象\n     * @param staleSlot: 清理的起始位置\n     * @param return: 返回的是第一个为空的Entry下标\n     */\n    private int expungeStaleEntry(int staleSlot) {\n            Entry[] tab = table;\n            int len = tab.length;\n        \t// 清空`staleSlot`位置的Entry\n        \t// value引用置为空之后,对象被标记为不可达,下次GC就会被回收.\n            tab[staleSlot].value = null;\n            tab[staleSlot] = null;\n            size--;\n            Entry e;\n            int i;\n        \t// 通过nextIndex从`staleSlot`的下一个开始向后遍历Entry数组,直到e不为空\n         \t// e赋值为当前的Entry对象\n            for (i = nextIndex(staleSlot, len);\n                 (e = tab[i]) != null;\t\t\n                 i = nextIndex(i, len)) {\n                ThreadLocal<?> k = e.get();\n                // 当k为空的时候清空节点信息\n                if (k == null) {\t\t\t\t\t\t\t\n                    e.value = null;\n                    tab[i] = null;\n                    size--;\n                } else {\t// 以下为k存在的情况\n                    int h = k.threadLocalHashCode & (len - 1);\n                    // 元素下标和key计算的不一样，表明是出现`Hash碰撞`之后调整的位置\n                    // 将当前的元素移动到下一个null位置\n                    if (h != i) {\t\t\t\t\t\n                        tab[i] = null;\n                        while (tab[h] != null)\n                            h = nextIndex(h, len);\n                        tab[h] = e;\n                    }\n                }\n            }\n            return i;\n        } \n```\n\n该方法是对内存泄露的进一步处理。\n\n**如果将ThreadLocal的内存泄露问题分成两个部分来看，一个是 Key，另外一个就是 Value。**\n\n**Key 的部分依靠弱引用清除，如果外部的强引用断开之后，也就是没有地方在使用到该 Key 之后，Key 会被 GC 回收，所以引用就为 null。**\n\n从而判断 Key 为 null 的 Value 就是 Stale 的对象，则靠该方法清除。\n\n> ThreadLocal 靠弱引用清除的只有 Key 对象，还有 Value 对象则需要靠扫描，所以内存泄露的情况并不是能够完全避免的。\n\n<br>\n\n<br>\n\n### 元素添加\n\n#### set(ThreadLocal<?> key, Object value)\n\n- 该方法就是添加元素的方法。\n\n```java\nprivate void set(ThreadLocal<?> key, Object value) {\n    Entry[] tab = table;\n    int len = tab.length;\n    int i = key.threadLocalHashCode & (len-1);\n    // 整个循环的功能就是找到相同的key覆盖value\n    // 或者找到key为null的节点覆盖节点信息\n    // 只有在e==null的时候跳出循环执行下面的代码\n    for (Entry e = tab[i];\n         e != null;\t\n         e = tab[i = nextIndex(i, len)]) {\n        ThreadLocal<?> k = e.get();\n        // 找到相等的k,则直接替换value,set操作结束\n        if (k == key) {\n            e.value = value;\n            return;\n        }\n        // k为空表示该节点过期,直接替换该节点\n        if (k == null) {\t\t\t\t\t       // 1.\n            replaceStaleEntry(key, value, i);\n            return;\n        }\n    }\n    // 走到这一步就是找到了e为空的位置，不然在上面两个判断里都return了\n    tab[i] = new Entry(key, value);\n    int sz = ++size;\n    if (!cleanSomeSlots(i, sz) && sz >= threshold)\n        rehash();\n}\n```\n\n通过 hashCode 确定下标后，如果 Key 相等则直接覆盖原数据，如果 Key 不相等则往后线性查找元素，找到为 null 的元素直接覆盖，或者找到空余的位置赋值。\n\n<br>\n\n最后会清理旧的元素，并且判断 threshold，决定是否需要扩容。\n\n> **ThreadLocalMap 处理 Hash 冲突的方法叫做 线性寻址法，在冲突之后往后搜索，找到第一个为空的下标并保存元素。**\n>\n> 线性寻址法在出现 Hash 冲突的时候处理的复杂度基本会变成 O(n)，并不能直接找一个 null 点就存储，因为数组中可能还有相同的 Key 在后面。\n\n<br>\n\n<br>\n\nreplaceStaleEntry\n\n- 源码中只有从上面 `1.` 处进入该方法,用于**替换  `key`  为空的 `Entry` 节点,顺带清除数组中的过期节点.**\n\n往后搜索的是第一个为空或者 Key 相等，如果先找到 Key 为空的并不能保证后续的节点没有 Key 相等的，所以在 replaceStaleEntry 方法中可能还需要处理另外一个 Key 相同的节点。\n\n```java\n/**\n *\t从`set.1.`处进入,key是插入元素ThreadLocal的hash,staleSlot为key为空的数组节点下标\n */\nprivate void replaceStaleEntry(ThreadLocal<?> key, Object value,\n                               int staleSlot) {\n    Entry[] tab = table;\n    int len = tab.length;\n    Entry e;\n    int slotToExpunge = staleSlot;\n    // 从传入位置,即插入时发现k为null的位置开始,向前遍历,直到数组元素为空\n    // 找到最前面一个key为null的值.\t\n    // 这里要吐槽一下源代码...大括号都不加 习惯真差\n    for (int i = prevIndex(staleSlot, len);\n         (e = tab[i]) != null;\t\t\n         i = prevIndex(i, len)){\n\t\t// 向前获取到第一个 Key 为空的对象\n        if (e.get() == null)\n            // 因为是环状遍历所以此时slotToExpunge是可能等于staleSlot的\n            slotToExpunge = i;\n    }\n    // 该段循环的功能就是向后遍历找到`key`相等的节点并替换\n    // 并对之后的元素进行清理\n    for (int i = nextIndex(staleSlot, len);\n         (e = tab[i]) != null;\n         i = nextIndex(i, len)) {\n        ThreadLocal<?> k = e.get();\n        if (k == key) {\t\n            // 替换 e 的 value\n            e.value = value;\n            // staleSlot 是因为 key 为 null 才进来的\n            // 所以 tab[i] 也是需要清理的节点\n            tab[i] = tab[staleSlot];\n            tab[staleSlot] = e;\n            if (slotToExpunge == staleSlot)\n                slotToExpunge = i;\n            cleanSomeSlots(expungeStaleEntry(slotToExpunge), len);\n            return;\n        }\n        // 其实我对这个`slotToExpunge == staleSlot`的判断一直挺疑惑的,为什么需要这个判断?\n        if (k == null && slotToExpunge == staleSlot)\n            slotToExpunge = i;\n    }\n    // e==null时跳到下面代码运行\n    // 清空并重新赋值\n    // 断开 Entry 对应的数据的强引用\n    tab[staleSlot].value = null;\n    tab[staleSlot] = new Entry(key, value);\n    // set后的清理\n    if (slotToExpunge != staleSlot)\n        cleanSomeSlots(expungeStaleEntry(slotToExpunge), len);\n}\n\n```\n\n**如上所说，再出现 Hash 冲突的时候，往后搜索的是第一个为空的节点，并不能直接赋值，因为在后续的数组中可能还存在相同的 Key 的节点。**\n\n替换元素之前会先向前搜索找到一个 Key 为 null 的节点。\n\n<br>\n\n<br>\n\n\n\n#### cleanSomeSlots\n\n- 该方法的功能是就是清除数组中的过期`Entry`\n- 首次清除从`i`向后开始遍历`log2(n)`次,如果之间发现过期`Entry`会直接将`n`扩充到`len`可以说全数组范围的遍历.发现过期`Entry`就调用`expungeStaleEntry`清除直到未发现`Entry`为止.\n\n```java\n/**\n  * @param i 清除的起始节点位置\n  * @param n 遍历控制,每次扫描都是log2(n)次,一般取当前数组的`size`或`len`\n  */\nprivate boolean cleanSomeSlots(int i, int n) {\n    \t\t// 是否有清除的标记\n            boolean removed = false;\n    \t\t// 获取底层数组的数据信息\n            Entry[] tab = table;\n            int len = tab.length;\n            do {\n                i = nextIndex(i, len);\n                Entry e = tab[i];\n                if (e != null && e.get() == null) {\n                    // 当发现有过期`Entry`时,n变为len\n                    // 即扩大范围,全数组范围在遍历一次\n                    n = len;\n                    removed = true;\n                    i = expungeStaleEntry(i);\n                }\t\n                // 无符号右移一位相当于n = n /2\n                // 所以在第一次会遍历`log2(n)`次\n            } while ( (n >>>= 1) != 0);\n    \t\t// 遍历过程中没出现过期`Entry`的情况下会返回是否有清理的标记.\n            return removed;\n        }\n```\n\n<br>\n\n<br>\n\n### 扩容调整方法\n\n#### rehash\n\n- 容量调整的先驱方法,先清理过期`Entry`,并做是否需要`resize`的判断\n- 调整的条件是**当前size大于阈值的3/4**就进行扩容\n\n```java\n private void rehash() {\n     \t\t// 清理过期Entry\n            expungeStaleEntries();\n     \t\t// 初始阈值threshold为10\n            if (size >= threshold - threshold / 4)\n                resize();\n        }\n```\n\n<br>\n\n<br>\n\n#### resize\n\n- 扩容的实际方法.\n\n```java\n  private void resize() {\n      \t\t// 获取旧数组并记录就数组大小\n            Entry[] oldTab = table;\n            int oldLen = oldTab.length;\n      \t\t// 新数组大小为旧数组的两倍\n            int newLen = oldLen * 2;\n            Entry[] newTab = new Entry[newLen];\n            int count = 0;\n\t\t\t// 遍历整个旧数组,并迁移元素到新数组\n            for (int j = 0; j < oldLen; ++j) {\n                Entry e = oldTab[j];\n                // 判断是否为空,空的话就算了\n                if (e != null) {\n                    ThreadLocal<?> k = e.get();\n                    // k为空即表示为过期节点,当即清理了.\n                    if (k == null) {\n                        e.value = null; \n                    } else {\n                        // 重新计算数组下标,如果数组对应位置已存在元素\n                        // 则环状遍历整个数组找个空位置赋值\n                        int h = k.threadLocalHashCode & (newLen - 1);\n                        while (newTab[h] != null)\n                            h = nextIndex(h, newLen);\n                        newTab[h] = e;\n                        count++;\n                    }\n                }\n            }\n\t\t\t// 设置新属性\t\n            setThreshold(newLen);\n            size = count;\n            table = newTab;\n        }\n```\n\n\n\n<br>\n\n<br>\n\n\n\n## Q&A\n\n> Q: ThreadLocal 为何会出现内存泄露？\n\n**ThreadLocal 会出现内存泄露的主要原因是如果是强引用，那么在 ThreadLocal 类不再使用之后，ThreadLocalMap 中无法清除相关的 Entry 对象。**\n\n在 ThreadLocal 不再使用之后，ThreadLocalMap 中指向 ThreadLocal 的强引用也会导致 ThreadLocal 无法被 GC 回收，同理 Value 对象也被保留了下来。\n\n**也就出现了所谓的内存泄露，无用的数据无法被 GC 有效的清除。**\n\n<br>\n\n<br>\n\n\n\n\n\n>  Q: ThreadLocal 如何解决内存泄漏?\n\nThreadLocal 的内存泄露可以分为 Key（也就是 ThreadLocal），以及 Value。\n\n**解决 Key 的内存泄露的方法就是采用弱引用，弱引用消除了 ThreadLocalMap 对 ThreadLocal 对象的 GC 的影响。**\n\n另外的在每次获取或者添加数据的时候都会判断 Key 是否被回收，如果 Key 已经被回收会连带清理 Value 对象，这也就顺带解决了 Value 的泄露问题。\n\n<br>\n\n<br>\n\n\n\n>  Q: ThreadLocalMap 如何解决Hash冲突？\n\nHash 冲突就是指通过 Hash 计算的下标值一致，两个元素的定位一致。\n\nHashMap 解决 Hash 冲突的方法就是**拉链法**，底层的数组中保存的不是单一的数据，而是一个集合(链表/红黑树)，冲突之后下挂。\n\n采用拉链法的结果就是在Hash冲突严重时会严重影响时间复杂度，因为就算是红黑树查询的事件复杂度都是 O(Log2n)。\n\nThreadLocalMap 并没有采用这种方法，而是使用的**开放寻址法**，如果已经有数据存在冲突点，就在数组中往下遍历找到第一个空着的位置。\n\n> 需要注意的是，并不是找到空的位置就可以直接替换，还是需要遍历整个数组确保没有重复的 Key。\n\n<br>\n\n<br>\n\n\n\n>  Q: ThreadLocalMap 和 HashMap 的异同\n\n两个都是采用 Hash 定位的数据结构，底层都是以数组的形式。\n\n但是 HashCode 的获取方式不同，HashMap 调用对象的 hashCode() 方法，而  ThreadLocalMap 中的 Key 就是 ThreadLocal，ThreadLocal 的 HashCode 是递增分配的。\n\n另外处理 Hash 冲突的方式不同，ThreadLocalMap 采用的开放寻址法，而 HashMap 采用的是拉链法。\n\n","slug":"ThreadLocal实现解析","published":1,"updated":"2022-03-23T03:04:47.551Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clk87sjyi0006wnbvb4uc8oft","content":"<h1 id=\"ThreadLocal\"><a href=\"#ThreadLocal\" class=\"headerlink\" title=\"ThreadLocal\"></a>ThreadLocal</h1><h2 id=\"思维导图\"><a href=\"#思维导图\" class=\"headerlink\" title=\"思维导图\"></a>思维导图</h2><p><img src=\"https://chenqwwq.oss-cn-hangzhou.aliyuncs.com/note/ThreadLocal.png\" alt=\"ThreadLocal思维导图\"></p>\n<br>\n\n\n\n<h2 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h2><p>ThreadLocal（线程局部变量），作用是<strong>保存每个线程的私有变量</strong>，以空间换时间的方式，为每一个线程保存一份<strong>私有</strong>变量，也就不存在所谓的并发问题。</p>\n<blockquote>\n<p>真实的数据并不会存在 ThreadLocal 中。</p>\n<p>实际上，数据都保存在 Thread 对象中 Thread#threadLocals 这个成员变量里，所以一定程度上 ThreadLocal 只是一个操作该集合的工具类。</p>\n</blockquote>\n<br>\n\n<p>以下就是 ThreadLocalMap 在Thread中的变量声明:</p>\n<p> <img src=\"https://chenqwwq.oss-cn-hangzhou.aliyuncs.com/note/ThreadLocalMap%E7%9A%84%E5%8F%98%E9%87%8F%E5%A3%B0%E6%98%8E.png\" alt=\"ThreadLocalMap的变量声明\"></p>\n<blockquote>\n<p>threadLocals 是给 ThreadLocal 用的，该类只能访问当前线程中的数据。</p>\n<p>inheritableThreadLocal 是给 InheritableThreadLocal 用的，使用该类子线程可以访问到父线程的数据。</p>\n</blockquote>\n<br>\n\n\n\n\n\n<h2 id=\"ThreadLocal-的相关操作\"><a href=\"#ThreadLocal-的相关操作\" class=\"headerlink\" title=\"ThreadLocal 的相关操作\"></a>ThreadLocal 的相关操作</h2><ul>\n<li><code>ThreadLocal</code>的内部方法因为逻辑都不复杂,不需要单独出来看,就直接全放一块了.</li>\n</ul>\n<h3 id=\"数据获取-Get\"><a href=\"#数据获取-Get\" class=\"headerlink\" title=\"数据获取 - Get\"></a>数据获取 - Get</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs java\">  <span class=\"hljs-comment\">// 直接获取线程私有的数据</span><br>  <span class=\"hljs-keyword\">public</span> T <span class=\"hljs-title function_\">get</span><span class=\"hljs-params\">()</span> &#123;<br>       <span class=\"hljs-comment\">// 获取当前线程</span><br>       <span class=\"hljs-type\">Thread</span> <span class=\"hljs-variable\">t</span> <span class=\"hljs-operator\">=</span> Thread.currentThread();<br>       <span class=\"hljs-comment\">// getMap其实很简单就是获取`t`中的`threadLocals`,代码在`工具方法`中</span><br>       <span class=\"hljs-type\">ThreadLocalMap</span> <span class=\"hljs-variable\">map</span> <span class=\"hljs-operator\">=</span> getMap(t); <br>       <span class=\"hljs-keyword\">if</span> (map != <span class=\"hljs-literal\">null</span>) &#123;\t\t\t\t\t\t\t\t\t\t<span class=\"hljs-comment\">// 3.</span><br>           ThreadLocalMap.<span class=\"hljs-type\">Entry</span> <span class=\"hljs-variable\">e</span> <span class=\"hljs-operator\">=</span> map.getEntry(<span class=\"hljs-built_in\">this</span>);<br>           <span class=\"hljs-keyword\">if</span> (e != <span class=\"hljs-literal\">null</span>) &#123;\t\t\t\t\t\t\t<span class=\"hljs-comment\">// 2.</span><br>               <span class=\"hljs-meta\">@SuppressWarnings(&quot;unchecked&quot;)</span><br>               <span class=\"hljs-type\">T</span> <span class=\"hljs-variable\">result</span> <span class=\"hljs-operator\">=</span> (T)e.value;<br>               <span class=\"hljs-keyword\">return</span> result;<br>           &#125;<br>       &#125;<br>       <span class=\"hljs-keyword\">return</span> setInitialValue();  \t\t\t\t<span class=\"hljs-comment\">// 1.</span><br>   &#125;<br><span class=\"hljs-comment\">// 这个方法只有在上面`1.`处调用...不知道为什么map,thread不直接传参</span><br><span class=\"hljs-comment\">// 该方法的功能就是为`Thread`设置`threadLocals`的初始值</span><br>   <span class=\"hljs-keyword\">private</span> T <span class=\"hljs-title function_\">setInitialValue</span><span class=\"hljs-params\">()</span> &#123;<br>       <span class=\"hljs-type\">T</span> <span class=\"hljs-variable\">value</span> <span class=\"hljs-operator\">=</span> initialValue();<br>       <span class=\"hljs-type\">Thread</span> <span class=\"hljs-variable\">t</span> <span class=\"hljs-operator\">=</span> Thread.currentThread();<br>       <span class=\"hljs-type\">ThreadLocalMap</span> <span class=\"hljs-variable\">map</span> <span class=\"hljs-operator\">=</span> getMap(t);<br>       <span class=\"hljs-comment\">// map不为null表明是从上面的`2.`处进入该方法</span><br>       <span class=\"hljs-comment\">// 已经初始化`threadLocals`,但并未找到当前对应的`Entry`</span><br>       <span class=\"hljs-comment\">// 所以此时直接添加`Entry`就行</span><br>       <span class=\"hljs-keyword\">if</span> (map != <span class=\"hljs-literal\">null</span>)<br>           map.set(<span class=\"hljs-built_in\">this</span>, value);<br>       <span class=\"hljs-keyword\">else</span><br>           createMap(t, value);<br>       <span class=\"hljs-keyword\">return</span> value;<br>   &#125;<br>     <span class=\"hljs-comment\">// 初始值,`protected`方便子类继承,并定义自己的初始值.</span><br>     <span class=\"hljs-keyword\">protected</span> T <span class=\"hljs-title function_\">initialValue</span><span class=\"hljs-params\">()</span> &#123;<br>       <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">null</span>;<br>     &#125;<br><br><span class=\"hljs-comment\">// 创建并赋值`threadLocals`的方法</span><br>    <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">createMap</span><span class=\"hljs-params\">(Thread t, T firstValue)</span> &#123;<br>       t.threadLocals = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ThreadLocalMap</span>(<span class=\"hljs-built_in\">this</span>, firstValue);<br>   &#125;<br></code></pre></div></td></tr></table></figure>\n\n<p>整个获取的过程其实并不难：</p>\n<ol>\n<li>通过 Thread#currentThread 方法获取当前线程对象。</li>\n<li>首先通过 getMap 方法获取当前线程绑定的 threadLocals。</li>\n<li>不要为空时，以当前 ThreadLocal 对象为参数获取对应的Entry 对象，为空跳到第四步。</li>\n<li>获取 Entry 对象中的 value ，并返回。</li>\n<li>调用 setInitialValue方法，并返回。</li>\n</ol>\n<br>\n\n<p>这里可以很明显的看出来，数据其实还是保存在 Thread 对象里的。</p>\n<p>通过 setInitialValue 方法可以设定初始值。</p>\n<blockquote>\n<p>例如，希望统计每个线程的某个操作计数，那么就可以用如下的方法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs java\">ThreadLocal&lt;Integer&gt; counter = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ThreadLocal</span>&lt;Integer&gt;() &#123;<br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">protected</span> Integer <span class=\"hljs-title function_\">initialValue</span><span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>    &#125;<br>&#125;;<br></code></pre></div></td></tr></table></figure>\n\n<p>以 0 为初始值做统计。</p>\n</blockquote>\n<br>\n\n<br>\n\n<h3 id=\"数据存储-Set\"><a href=\"#数据存储-Set\" class=\"headerlink\" title=\"数据存储 - Set\"></a>数据存储 - Set</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">set</span><span class=\"hljs-params\">(T value)</span> &#123;<br>       <span class=\"hljs-comment\">// 获取当前线程</span><br>       <span class=\"hljs-type\">Thread</span> <span class=\"hljs-variable\">t</span> <span class=\"hljs-operator\">=</span> Thread.currentThread();<br>       <span class=\"hljs-type\">ThreadLocalMap</span> <span class=\"hljs-variable\">map</span> <span class=\"hljs-operator\">=</span> getMap(t);     <span class=\"hljs-comment\">// .1</span><br>       <span class=\"hljs-keyword\">if</span> (map != <span class=\"hljs-literal\">null</span>)<br>           map.set(<span class=\"hljs-built_in\">this</span>, value);<br>       <span class=\"hljs-keyword\">else</span><br>           createMap(t, value);<br>&#125;<br></code></pre></div></td></tr></table></figure>\n\n<p>流程简述如下：</p>\n<ol>\n<li>获取当前线程,并以此获取线程绑定的 ThreadLocalMap 对象。</li>\n<li>map 不为空时,直接set。</li>\n<li>map 为空时需要先创建 Map 并赋值。</li>\n</ol>\n<p><br><br></p>\n<h2 id=\"ThreadLocalMap\"><a href=\"#ThreadLocalMap\" class=\"headerlink\" title=\"ThreadLocalMap\"></a>ThreadLocalMap</h2><p>ThreadLocalMap 类似于 HashMap ，也是使用 Hash 算法定位存取的数据结构，以 ThreadLocal 对象为 Key。</p>\n<p>Hash 算法合理时 ThreadLocalMap 的存取操作近乎是 O(1) 的复杂度。</p>\n<p><code>ThreadLocalMap</code> 出人意料的并没有继承任何一个类或接口，是完全独立的类，以为会像 HashMap 一样继承一下 AbstractMap。</p>\n<br>\n\n<h3 id=\"成员变量\"><a href=\"#成员变量\" class=\"headerlink\" title=\"成员变量\"></a>成员变量</h3>  <figure class=\"highlight java\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">// 默认的初始容量 一定要是二的次幂</span><br><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">INITIAL_CAPACITY</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">16</span>;<br><span class=\"hljs-comment\">// 元素数组/条目数组</span><br><span class=\"hljs-keyword\">private</span> Entry[] table;<br><span class=\"hljs-comment\">// 大小,用于记录数组中实际存在的Entry数目</span><br><span class=\"hljs-keyword\">private</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">size</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>;<br><span class=\"hljs-comment\">// 阈值</span><br><span class=\"hljs-keyword\">private</span> <span class=\"hljs-type\">int</span> threshold; <span class=\"hljs-comment\">// Default to 0 构造方法</span><br></code></pre></div></td></tr></table></figure>\n\n<blockquote>\n<p><strong>ThreadLocalMap 的底层数据结构是 Entry 的数组，</strong>并且默认容量为16。</p>\n</blockquote>\n<br>\n\n<p>以下为 Entry 对象的声明形式：</p>\n<p> <img src=\"https://chenqwwq.oss-cn-hangzhou.aliyuncs.com/note/image-20210221154222208.png\" alt=\"image-20210221154222208\"></p>\n<blockquote>\n<p>WeakReference 声明了 Entry 对象对于 Key ，也就是 ThreadLocal 对象的引用是弱引用。</p>\n<p><strong>弱引用消除了 ThreadLocalMap 的引用对 ThreadLocal  的对象回收的影响，</strong>这是 ThreadLocal 避免内存泄漏的核心。</p>\n</blockquote>\n<br>\n\n<h3 id=\"元素获取\"><a href=\"#元素获取\" class=\"headerlink\" title=\"元素获取\"></a>元素获取</h3><h4 id=\"getEntry-ThreadLocal-lt-gt-key\"><a href=\"#getEntry-ThreadLocal-lt-gt-key\" class=\"headerlink\" title=\"getEntry(ThreadLocal&lt;?&gt; key)\"></a>getEntry(ThreadLocal&lt;?&gt; key)</h4><ul>\n<li>该方法就是通过 ThreadLocal 对象获取对应的数据。</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">private</span> Entry <span class=\"hljs-title function_\">getEntry</span><span class=\"hljs-params\">(ThreadLocal&lt;?&gt; key)</span> &#123;<br>    <span class=\"hljs-comment\">// 和HashMap中一样的下标计算方式</span><br>    <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> key.threadLocalHashCode &amp; (table.length - <span class=\"hljs-number\">1</span>);<br>    <span class=\"hljs-type\">Entry</span> <span class=\"hljs-variable\">e</span> <span class=\"hljs-operator\">=</span> table[i];<br>    <span class=\"hljs-comment\">// 获取到对应的Entry之后就分两步</span><br>    <span class=\"hljs-keyword\">if</span> (e != <span class=\"hljs-literal\">null</span> &amp;&amp; e.get() == key)<br>        <span class=\"hljs-comment\">// 1. e不为空且threadLocal相等</span><br>        <span class=\"hljs-keyword\">return</span> e;\t\t<br>    <span class=\"hljs-keyword\">else</span>\t\t\t\t\t\t\t\t\t\t\t\t\t\t<br>        <span class=\"hljs-comment\">// 2. e为空或者threadLocal不相等\t\t\t\t</span><br>        <span class=\"hljs-keyword\">return</span> getEntryAfterMiss(key, i, e);<br>&#125;<br></code></pre></div></td></tr></table></figure>\n\n<p>起手就是一个 HashCode &amp; (len - 1)，和 HashMap 类似，但ThreadLocal 的 HashCode 和 HashMap 中的直接调用 hashCode() 方法不同。</p>\n<p>ThreadLocal 是采用递增的形式，而非直接计算对象的 HashCode。</p>\n<br>\n\n <figure class=\"highlight java\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">threadLocalHashCode</span> <span class=\"hljs-operator\">=</span> nextHashCode();<br><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">AtomicInteger</span> <span class=\"hljs-variable\">nextHashCode</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">AtomicInteger</span>();  <br><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">nextHashCode</span><span class=\"hljs-params\">()</span> &#123;<br>\t<span class=\"hljs-keyword\">return</span> nextHashCode.getAndAdd(HASH_INCREMENT);<br>&#125;<br></code></pre></div></td></tr></table></figure>\n<p> 以上就是 HashCode 的获取方式，<strong>是以类变量的方式递增获取</strong>，相对于直接调用 hashCode() 可以更好的减少 hash 冲突。</p>\n<blockquote>\n<p>每次创建一个 ThreadLocal，hashCode 都会+1，所以能使数据更加均匀的散布在数组中，更好的减少 hash 冲突。</p>\n</blockquote>\n<br>\n\n<p>如果hash计算出来的下标存在想要的元素就直接返回，如果获取元素为空还会再调用 <code>getEntryAfterMiss</code> 做冲突查询的后续处理.</p>\n<p><br><br></p>\n<h4 id=\"getEntryAfterMiss-ThreadLocal-lt-gt-key-int-i-Entry-e\"><a href=\"#getEntryAfterMiss-ThreadLocal-lt-gt-key-int-i-Entry-e\" class=\"headerlink\" title=\"getEntryAfterMiss(ThreadLocal&lt;?&gt; key, int i, Entry e)\"></a>getEntryAfterMiss(ThreadLocal&lt;?&gt; key, int i, Entry e)</h4><ul>\n<li>该方法是在直接按照 <code>Hash</code> 计算下标后，没获取到对应的 <code>Entry</code> 对象的时候调用，<strong>下标处不是想要的元素就说明出现了 Hash 冲突。</strong></li>\n</ul>\n<p>以下为方法源码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">private</span> Entry <span class=\"hljs-title function_\">getEntryAfterMiss</span><span class=\"hljs-params\">(ThreadLocal&lt;?&gt; key, <span class=\"hljs-type\">int</span> i, Entry e)</span> &#123;<br>        Entry[] tab = table;<br>        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">len</span> <span class=\"hljs-operator\">=</span> tab.length;<br>        <span class=\"hljs-comment\">// 此时注意如果从上面情况`2.`进来时,</span><br>        <span class=\"hljs-comment\">// e为空则直接返回null,不会进入while循环</span><br>        <span class=\"hljs-comment\">// 只有e不为空且e.get() != key时才会进while循环</span><br>        <span class=\"hljs-keyword\">while</span> (e != <span class=\"hljs-literal\">null</span>) &#123;<br>            ThreadLocal&lt;?&gt; k = e.get();<br>            <span class=\"hljs-comment\">// 找到相同的k,返回得到的Entry,get操作结束</span><br>            <span class=\"hljs-keyword\">if</span> (k == key)<br>                <span class=\"hljs-keyword\">return</span> e;<br>            <span class=\"hljs-comment\">// 若此时的k为空,那么e则被标记为`Stale`需要被`expunge`</span><br>            <span class=\"hljs-keyword\">if</span> (k == <span class=\"hljs-literal\">null</span>)<br>                expungeStaleEntry(i);<br>            <span class=\"hljs-keyword\">else</span>\t<span class=\"hljs-comment\">// 下面两个都是遍历的相关操作</span><br>                <span class=\"hljs-comment\">// nextIndex就是+1判断是否越界</span><br>                i = nextIndex(i, len);<br>            e = tab[i];<br>        &#125;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">null</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure>\n\n<blockquote>\n<p><strong>在判断出现 hash 冲突之后，直接往后线性查找之后的数组元素。</strong></p>\n</blockquote>\n<br>\n\n<br>\n\n\n\n<h4 id=\"expungeStaleEntry-int-staleSlot\"><a href=\"#expungeStaleEntry-int-staleSlot\" class=\"headerlink\" title=\"expungeStaleEntry(int staleSlot)\"></a>expungeStaleEntry(int staleSlot)</h4><ul>\n<li>该方法用来清除 <code>staleSlot</code> 位置的 Entry 对象,并且会<strong>清理当前节点到下一个 <code>null</code> 节点中间的过期 <code>Entry</code>.</strong></li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">/** </span><br><span class=\"hljs-comment\">  * 清空旧的Entry对象</span><br><span class=\"hljs-comment\">  * <span class=\"hljs-doctag\">@param</span> staleSlot: 清理的起始位置</span><br><span class=\"hljs-comment\">  * <span class=\"hljs-doctag\">@param</span> return: 返回的是第一个为空的Entry下标</span><br><span class=\"hljs-comment\">  */</span><br> <span class=\"hljs-keyword\">private</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">expungeStaleEntry</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> staleSlot)</span> &#123;<br>         Entry[] tab = table;<br>         <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">len</span> <span class=\"hljs-operator\">=</span> tab.length;<br>     \t<span class=\"hljs-comment\">// 清空`staleSlot`位置的Entry</span><br>     \t<span class=\"hljs-comment\">// value引用置为空之后,对象被标记为不可达,下次GC就会被回收.</span><br>         tab[staleSlot].value = <span class=\"hljs-literal\">null</span>;<br>         tab[staleSlot] = <span class=\"hljs-literal\">null</span>;<br>         size--;<br>         Entry e;<br>         <span class=\"hljs-type\">int</span> i;<br>     \t<span class=\"hljs-comment\">// 通过nextIndex从`staleSlot`的下一个开始向后遍历Entry数组,直到e不为空</span><br>      \t<span class=\"hljs-comment\">// e赋值为当前的Entry对象</span><br>         <span class=\"hljs-keyword\">for</span> (i = nextIndex(staleSlot, len);<br>              (e = tab[i]) != <span class=\"hljs-literal\">null</span>;\t\t<br>              i = nextIndex(i, len)) &#123;<br>             ThreadLocal&lt;?&gt; k = e.get();<br>             <span class=\"hljs-comment\">// 当k为空的时候清空节点信息</span><br>             <span class=\"hljs-keyword\">if</span> (k == <span class=\"hljs-literal\">null</span>) &#123;\t\t\t\t\t\t\t<br>                 e.value = <span class=\"hljs-literal\">null</span>;<br>                 tab[i] = <span class=\"hljs-literal\">null</span>;<br>                 size--;<br>             &#125; <span class=\"hljs-keyword\">else</span> &#123;\t<span class=\"hljs-comment\">// 以下为k存在的情况</span><br>                 <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">h</span> <span class=\"hljs-operator\">=</span> k.threadLocalHashCode &amp; (len - <span class=\"hljs-number\">1</span>);<br>                 <span class=\"hljs-comment\">// 元素下标和key计算的不一样，表明是出现`Hash碰撞`之后调整的位置</span><br>                 <span class=\"hljs-comment\">// 将当前的元素移动到下一个null位置</span><br>                 <span class=\"hljs-keyword\">if</span> (h != i) &#123;\t\t\t\t\t<br>                     tab[i] = <span class=\"hljs-literal\">null</span>;<br>                     <span class=\"hljs-keyword\">while</span> (tab[h] != <span class=\"hljs-literal\">null</span>)<br>                         h = nextIndex(h, len);<br>                     tab[h] = e;<br>                 &#125;<br>             &#125;<br>         &#125;<br>         <span class=\"hljs-keyword\">return</span> i;<br>     &#125; <br></code></pre></div></td></tr></table></figure>\n\n<p>该方法是对内存泄露的进一步处理。</p>\n<p><strong>如果将ThreadLocal的内存泄露问题分成两个部分来看，一个是 Key，另外一个就是 Value。</strong></p>\n<p><strong>Key 的部分依靠弱引用清除，如果外部的强引用断开之后，也就是没有地方在使用到该 Key 之后，Key 会被 GC 回收，所以引用就为 null。</strong></p>\n<p>从而判断 Key 为 null 的 Value 就是 Stale 的对象，则靠该方法清除。</p>\n<blockquote>\n<p>ThreadLocal 靠弱引用清除的只有 Key 对象，还有 Value 对象则需要靠扫描，所以内存泄露的情况并不是能够完全避免的。</p>\n</blockquote>\n<br>\n\n<br>\n\n<h3 id=\"元素添加\"><a href=\"#元素添加\" class=\"headerlink\" title=\"元素添加\"></a>元素添加</h3><h4 id=\"set-ThreadLocal-lt-gt-key-Object-value\"><a href=\"#set-ThreadLocal-lt-gt-key-Object-value\" class=\"headerlink\" title=\"set(ThreadLocal&lt;?&gt; key, Object value)\"></a>set(ThreadLocal&lt;?&gt; key, Object value)</h4><ul>\n<li>该方法就是添加元素的方法。</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">set</span><span class=\"hljs-params\">(ThreadLocal&lt;?&gt; key, Object value)</span> &#123;<br>    Entry[] tab = table;<br>    <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">len</span> <span class=\"hljs-operator\">=</span> tab.length;<br>    <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> key.threadLocalHashCode &amp; (len-<span class=\"hljs-number\">1</span>);<br>    <span class=\"hljs-comment\">// 整个循环的功能就是找到相同的key覆盖value</span><br>    <span class=\"hljs-comment\">// 或者找到key为null的节点覆盖节点信息</span><br>    <span class=\"hljs-comment\">// 只有在e==null的时候跳出循环执行下面的代码</span><br>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">Entry</span> <span class=\"hljs-variable\">e</span> <span class=\"hljs-operator\">=</span> tab[i];<br>         e != <span class=\"hljs-literal\">null</span>;\t<br>         e = tab[i = nextIndex(i, len)]) &#123;<br>        ThreadLocal&lt;?&gt; k = e.get();<br>        <span class=\"hljs-comment\">// 找到相等的k,则直接替换value,set操作结束</span><br>        <span class=\"hljs-keyword\">if</span> (k == key) &#123;<br>            e.value = value;<br>            <span class=\"hljs-keyword\">return</span>;<br>        &#125;<br>        <span class=\"hljs-comment\">// k为空表示该节点过期,直接替换该节点</span><br>        <span class=\"hljs-keyword\">if</span> (k == <span class=\"hljs-literal\">null</span>) &#123;\t\t\t\t\t       <span class=\"hljs-comment\">// 1.</span><br>            replaceStaleEntry(key, value, i);<br>            <span class=\"hljs-keyword\">return</span>;<br>        &#125;<br>    &#125;<br>    <span class=\"hljs-comment\">// 走到这一步就是找到了e为空的位置，不然在上面两个判断里都return了</span><br>    tab[i] = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Entry</span>(key, value);<br>    <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">sz</span> <span class=\"hljs-operator\">=</span> ++size;<br>    <span class=\"hljs-keyword\">if</span> (!cleanSomeSlots(i, sz) &amp;&amp; sz &gt;= threshold)<br>        rehash();<br>&#125;<br></code></pre></div></td></tr></table></figure>\n\n<p>通过 hashCode 确定下标后，如果 Key 相等则直接覆盖原数据，如果 Key 不相等则往后线性查找元素，找到为 null 的元素直接覆盖，或者找到空余的位置赋值。</p>\n<br>\n\n<p>最后会清理旧的元素，并且判断 threshold，决定是否需要扩容。</p>\n<blockquote>\n<p><strong>ThreadLocalMap 处理 Hash 冲突的方法叫做 线性寻址法，在冲突之后往后搜索，找到第一个为空的下标并保存元素。</strong></p>\n<p>线性寻址法在出现 Hash 冲突的时候处理的复杂度基本会变成 O(n)，并不能直接找一个 null 点就存储，因为数组中可能还有相同的 Key 在后面。</p>\n</blockquote>\n<br>\n\n<br>\n\n<p>replaceStaleEntry</p>\n<ul>\n<li>源码中只有从上面 <code>1.</code> 处进入该方法,用于<strong>替换  <code>key</code>  为空的 <code>Entry</code> 节点,顺带清除数组中的过期节点.</strong></li>\n</ul>\n<p>往后搜索的是第一个为空或者 Key 相等，如果先找到 Key 为空的并不能保证后续的节点没有 Key 相等的，所以在 replaceStaleEntry 方法中可能还需要处理另外一个 Key 相同的节点。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> *\t从`set.1.`处进入,key是插入元素ThreadLocal的hash,staleSlot为key为空的数组节点下标</span><br><span class=\"hljs-comment\"> */</span><br><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">replaceStaleEntry</span><span class=\"hljs-params\">(ThreadLocal&lt;?&gt; key, Object value,</span><br><span class=\"hljs-params\">                               <span class=\"hljs-type\">int</span> staleSlot)</span> &#123;<br>    Entry[] tab = table;<br>    <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">len</span> <span class=\"hljs-operator\">=</span> tab.length;<br>    Entry e;<br>    <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">slotToExpunge</span> <span class=\"hljs-operator\">=</span> staleSlot;<br>    <span class=\"hljs-comment\">// 从传入位置,即插入时发现k为null的位置开始,向前遍历,直到数组元素为空</span><br>    <span class=\"hljs-comment\">// 找到最前面一个key为null的值.\t</span><br>    <span class=\"hljs-comment\">// 这里要吐槽一下源代码...大括号都不加 习惯真差</span><br>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> prevIndex(staleSlot, len);<br>         (e = tab[i]) != <span class=\"hljs-literal\">null</span>;\t\t<br>         i = prevIndex(i, len))&#123;<br>\t\t<span class=\"hljs-comment\">// 向前获取到第一个 Key 为空的对象</span><br>        <span class=\"hljs-keyword\">if</span> (e.get() == <span class=\"hljs-literal\">null</span>)<br>            <span class=\"hljs-comment\">// 因为是环状遍历所以此时slotToExpunge是可能等于staleSlot的</span><br>            slotToExpunge = i;<br>    &#125;<br>    <span class=\"hljs-comment\">// 该段循环的功能就是向后遍历找到`key`相等的节点并替换</span><br>    <span class=\"hljs-comment\">// 并对之后的元素进行清理</span><br>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> nextIndex(staleSlot, len);<br>         (e = tab[i]) != <span class=\"hljs-literal\">null</span>;<br>         i = nextIndex(i, len)) &#123;<br>        ThreadLocal&lt;?&gt; k = e.get();<br>        <span class=\"hljs-keyword\">if</span> (k == key) &#123;\t<br>            <span class=\"hljs-comment\">// 替换 e 的 value</span><br>            e.value = value;<br>            <span class=\"hljs-comment\">// staleSlot 是因为 key 为 null 才进来的</span><br>            <span class=\"hljs-comment\">// 所以 tab[i] 也是需要清理的节点</span><br>            tab[i] = tab[staleSlot];<br>            tab[staleSlot] = e;<br>            <span class=\"hljs-keyword\">if</span> (slotToExpunge == staleSlot)<br>                slotToExpunge = i;<br>            cleanSomeSlots(expungeStaleEntry(slotToExpunge), len);<br>            <span class=\"hljs-keyword\">return</span>;<br>        &#125;<br>        <span class=\"hljs-comment\">// 其实我对这个`slotToExpunge == staleSlot`的判断一直挺疑惑的,为什么需要这个判断?</span><br>        <span class=\"hljs-keyword\">if</span> (k == <span class=\"hljs-literal\">null</span> &amp;&amp; slotToExpunge == staleSlot)<br>            slotToExpunge = i;<br>    &#125;<br>    <span class=\"hljs-comment\">// e==null时跳到下面代码运行</span><br>    <span class=\"hljs-comment\">// 清空并重新赋值</span><br>    <span class=\"hljs-comment\">// 断开 Entry 对应的数据的强引用</span><br>    tab[staleSlot].value = <span class=\"hljs-literal\">null</span>;<br>    tab[staleSlot] = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Entry</span>(key, value);<br>    <span class=\"hljs-comment\">// set后的清理</span><br>    <span class=\"hljs-keyword\">if</span> (slotToExpunge != staleSlot)<br>        cleanSomeSlots(expungeStaleEntry(slotToExpunge), len);<br>&#125;<br><br></code></pre></div></td></tr></table></figure>\n\n<p><strong>如上所说，再出现 Hash 冲突的时候，往后搜索的是第一个为空的节点，并不能直接赋值，因为在后续的数组中可能还存在相同的 Key 的节点。</strong></p>\n<p>替换元素之前会先向前搜索找到一个 Key 为 null 的节点。</p>\n<br>\n\n<br>\n\n\n\n<h4 id=\"cleanSomeSlots\"><a href=\"#cleanSomeSlots\" class=\"headerlink\" title=\"cleanSomeSlots\"></a>cleanSomeSlots</h4><ul>\n<li>该方法的功能是就是清除数组中的过期<code>Entry</code></li>\n<li>首次清除从<code>i</code>向后开始遍历<code>log2(n)</code>次,如果之间发现过期<code>Entry</code>会直接将<code>n</code>扩充到<code>len</code>可以说全数组范围的遍历.发现过期<code>Entry</code>就调用<code>expungeStaleEntry</code>清除直到未发现<code>Entry</code>为止.</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">  * <span class=\"hljs-doctag\">@param</span> i 清除的起始节点位置</span><br><span class=\"hljs-comment\">  * <span class=\"hljs-doctag\">@param</span> n 遍历控制,每次扫描都是log2(n)次,一般取当前数组的`size`或`len`</span><br><span class=\"hljs-comment\">  */</span><br><span class=\"hljs-keyword\">private</span> <span class=\"hljs-type\">boolean</span> <span class=\"hljs-title function_\">cleanSomeSlots</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> i, <span class=\"hljs-type\">int</span> n)</span> &#123;<br>    \t\t<span class=\"hljs-comment\">// 是否有清除的标记</span><br>            <span class=\"hljs-type\">boolean</span> <span class=\"hljs-variable\">removed</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-literal\">false</span>;<br>    \t\t<span class=\"hljs-comment\">// 获取底层数组的数据信息</span><br>            Entry[] tab = table;<br>            <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">len</span> <span class=\"hljs-operator\">=</span> tab.length;<br>            <span class=\"hljs-keyword\">do</span> &#123;<br>                i = nextIndex(i, len);<br>                <span class=\"hljs-type\">Entry</span> <span class=\"hljs-variable\">e</span> <span class=\"hljs-operator\">=</span> tab[i];<br>                <span class=\"hljs-keyword\">if</span> (e != <span class=\"hljs-literal\">null</span> &amp;&amp; e.get() == <span class=\"hljs-literal\">null</span>) &#123;<br>                    <span class=\"hljs-comment\">// 当发现有过期`Entry`时,n变为len</span><br>                    <span class=\"hljs-comment\">// 即扩大范围,全数组范围在遍历一次</span><br>                    n = len;<br>                    removed = <span class=\"hljs-literal\">true</span>;<br>                    i = expungeStaleEntry(i);<br>                &#125;\t<br>                <span class=\"hljs-comment\">// 无符号右移一位相当于n = n /2</span><br>                <span class=\"hljs-comment\">// 所以在第一次会遍历`log2(n)`次</span><br>            &#125; <span class=\"hljs-keyword\">while</span> ( (n &gt;&gt;&gt;= <span class=\"hljs-number\">1</span>) != <span class=\"hljs-number\">0</span>);<br>    \t\t<span class=\"hljs-comment\">// 遍历过程中没出现过期`Entry`的情况下会返回是否有清理的标记.</span><br>            <span class=\"hljs-keyword\">return</span> removed;<br>        &#125;<br></code></pre></div></td></tr></table></figure>\n\n<br>\n\n<br>\n\n<h3 id=\"扩容调整方法\"><a href=\"#扩容调整方法\" class=\"headerlink\" title=\"扩容调整方法\"></a>扩容调整方法</h3><h4 id=\"rehash\"><a href=\"#rehash\" class=\"headerlink\" title=\"rehash\"></a>rehash</h4><ul>\n<li>容量调整的先驱方法,先清理过期<code>Entry</code>,并做是否需要<code>resize</code>的判断</li>\n<li>调整的条件是<strong>当前size大于阈值的3&#x2F;4</strong>就进行扩容</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">rehash</span><span class=\"hljs-params\">()</span> &#123;<br>    \t\t<span class=\"hljs-comment\">// 清理过期Entry</span><br>           expungeStaleEntries();<br>    \t\t<span class=\"hljs-comment\">// 初始阈值threshold为10</span><br>           <span class=\"hljs-keyword\">if</span> (size &gt;= threshold - threshold / <span class=\"hljs-number\">4</span>)<br>               resize();<br>       &#125;<br></code></pre></div></td></tr></table></figure>\n\n<br>\n\n<br>\n\n<h4 id=\"resize\"><a href=\"#resize\" class=\"headerlink\" title=\"resize\"></a>resize</h4><ul>\n<li>扩容的实际方法.</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">resize</span><span class=\"hljs-params\">()</span> &#123;<br>    \t\t<span class=\"hljs-comment\">// 获取旧数组并记录就数组大小</span><br>          Entry[] oldTab = table;<br>          <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">oldLen</span> <span class=\"hljs-operator\">=</span> oldTab.length;<br>    \t\t<span class=\"hljs-comment\">// 新数组大小为旧数组的两倍</span><br>          <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">newLen</span> <span class=\"hljs-operator\">=</span> oldLen * <span class=\"hljs-number\">2</span>;<br>          Entry[] newTab = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Entry</span>[newLen];<br>          <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">count</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>;<br>\t<span class=\"hljs-comment\">// 遍历整个旧数组,并迁移元素到新数组</span><br>          <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">j</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; j &lt; oldLen; ++j) &#123;<br>              <span class=\"hljs-type\">Entry</span> <span class=\"hljs-variable\">e</span> <span class=\"hljs-operator\">=</span> oldTab[j];<br>              <span class=\"hljs-comment\">// 判断是否为空,空的话就算了</span><br>              <span class=\"hljs-keyword\">if</span> (e != <span class=\"hljs-literal\">null</span>) &#123;<br>                  ThreadLocal&lt;?&gt; k = e.get();<br>                  <span class=\"hljs-comment\">// k为空即表示为过期节点,当即清理了.</span><br>                  <span class=\"hljs-keyword\">if</span> (k == <span class=\"hljs-literal\">null</span>) &#123;<br>                      e.value = <span class=\"hljs-literal\">null</span>; <br>                  &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>                      <span class=\"hljs-comment\">// 重新计算数组下标,如果数组对应位置已存在元素</span><br>                      <span class=\"hljs-comment\">// 则环状遍历整个数组找个空位置赋值</span><br>                      <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">h</span> <span class=\"hljs-operator\">=</span> k.threadLocalHashCode &amp; (newLen - <span class=\"hljs-number\">1</span>);<br>                      <span class=\"hljs-keyword\">while</span> (newTab[h] != <span class=\"hljs-literal\">null</span>)<br>                          h = nextIndex(h, newLen);<br>                      newTab[h] = e;<br>                      count++;<br>                  &#125;<br>              &#125;<br>          &#125;<br>\t<span class=\"hljs-comment\">// 设置新属性\t</span><br>          setThreshold(newLen);<br>          size = count;<br>          table = newTab;<br>      &#125;<br></code></pre></div></td></tr></table></figure>\n\n\n\n<br>\n\n<br>\n\n\n\n<h2 id=\"Q-amp-A\"><a href=\"#Q-amp-A\" class=\"headerlink\" title=\"Q&amp;A\"></a>Q&amp;A</h2><blockquote>\n<p>Q: ThreadLocal 为何会出现内存泄露？</p>\n</blockquote>\n<p><strong>ThreadLocal 会出现内存泄露的主要原因是如果是强引用，那么在 ThreadLocal 类不再使用之后，ThreadLocalMap 中无法清除相关的 Entry 对象。</strong></p>\n<p>在 ThreadLocal 不再使用之后，ThreadLocalMap 中指向 ThreadLocal 的强引用也会导致 ThreadLocal 无法被 GC 回收，同理 Value 对象也被保留了下来。</p>\n<p><strong>也就出现了所谓的内存泄露，无用的数据无法被 GC 有效的清除。</strong></p>\n<br>\n\n<br>\n\n\n\n\n\n<blockquote>\n<p> Q: ThreadLocal 如何解决内存泄漏?</p>\n</blockquote>\n<p>ThreadLocal 的内存泄露可以分为 Key（也就是 ThreadLocal），以及 Value。</p>\n<p><strong>解决 Key 的内存泄露的方法就是采用弱引用，弱引用消除了 ThreadLocalMap 对 ThreadLocal 对象的 GC 的影响。</strong></p>\n<p>另外的在每次获取或者添加数据的时候都会判断 Key 是否被回收，如果 Key 已经被回收会连带清理 Value 对象，这也就顺带解决了 Value 的泄露问题。</p>\n<br>\n\n<br>\n\n\n\n<blockquote>\n<p> Q: ThreadLocalMap 如何解决Hash冲突？</p>\n</blockquote>\n<p>Hash 冲突就是指通过 Hash 计算的下标值一致，两个元素的定位一致。</p>\n<p>HashMap 解决 Hash 冲突的方法就是<strong>拉链法</strong>，底层的数组中保存的不是单一的数据，而是一个集合(链表&#x2F;红黑树)，冲突之后下挂。</p>\n<p>采用拉链法的结果就是在Hash冲突严重时会严重影响时间复杂度，因为就算是红黑树查询的事件复杂度都是 O(Log2n)。</p>\n<p>ThreadLocalMap 并没有采用这种方法，而是使用的<strong>开放寻址法</strong>，如果已经有数据存在冲突点，就在数组中往下遍历找到第一个空着的位置。</p>\n<blockquote>\n<p>需要注意的是，并不是找到空的位置就可以直接替换，还是需要遍历整个数组确保没有重复的 Key。</p>\n</blockquote>\n<br>\n\n<br>\n\n\n\n<blockquote>\n<p> Q: ThreadLocalMap 和 HashMap 的异同</p>\n</blockquote>\n<p>两个都是采用 Hash 定位的数据结构，底层都是以数组的形式。</p>\n<p>但是 HashCode 的获取方式不同，HashMap 调用对象的 hashCode() 方法，而  ThreadLocalMap 中的 Key 就是 ThreadLocal，ThreadLocal 的 HashCode 是递增分配的。</p>\n<p>另外处理 Hash 冲突的方式不同，ThreadLocalMap 采用的开放寻址法，而 HashMap 采用的是拉链法。</p>\n","site":{"data":{}},"more":"<h1 id=\"ThreadLocal\"><a href=\"#ThreadLocal\" class=\"headerlink\" title=\"ThreadLocal\"></a>ThreadLocal</h1><h2 id=\"思维导图\"><a href=\"#思维导图\" class=\"headerlink\" title=\"思维导图\"></a>思维导图</h2><p><img src=\"https://chenqwwq.oss-cn-hangzhou.aliyuncs.com/note/ThreadLocal.png\" alt=\"ThreadLocal思维导图\"></p>\n<br>\n\n\n\n<h2 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h2><p>ThreadLocal（线程局部变量），作用是<strong>保存每个线程的私有变量</strong>，以空间换时间的方式，为每一个线程保存一份<strong>私有</strong>变量，也就不存在所谓的并发问题。</p>\n<blockquote>\n<p>真实的数据并不会存在 ThreadLocal 中。</p>\n<p>实际上，数据都保存在 Thread 对象中 Thread#threadLocals 这个成员变量里，所以一定程度上 ThreadLocal 只是一个操作该集合的工具类。</p>\n</blockquote>\n<br>\n\n<p>以下就是 ThreadLocalMap 在Thread中的变量声明:</p>\n<p> <img src=\"https://chenqwwq.oss-cn-hangzhou.aliyuncs.com/note/ThreadLocalMap%E7%9A%84%E5%8F%98%E9%87%8F%E5%A3%B0%E6%98%8E.png\" alt=\"ThreadLocalMap的变量声明\"></p>\n<blockquote>\n<p>threadLocals 是给 ThreadLocal 用的，该类只能访问当前线程中的数据。</p>\n<p>inheritableThreadLocal 是给 InheritableThreadLocal 用的，使用该类子线程可以访问到父线程的数据。</p>\n</blockquote>\n<br>\n\n\n\n\n\n<h2 id=\"ThreadLocal-的相关操作\"><a href=\"#ThreadLocal-的相关操作\" class=\"headerlink\" title=\"ThreadLocal 的相关操作\"></a>ThreadLocal 的相关操作</h2><ul>\n<li><code>ThreadLocal</code>的内部方法因为逻辑都不复杂,不需要单独出来看,就直接全放一块了.</li>\n</ul>\n<h3 id=\"数据获取-Get\"><a href=\"#数据获取-Get\" class=\"headerlink\" title=\"数据获取 - Get\"></a>数据获取 - Get</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\">  <span class=\"hljs-comment\">// 直接获取线程私有的数据</span><br>  <span class=\"hljs-keyword\">public</span> T <span class=\"hljs-title function_\">get</span><span class=\"hljs-params\">()</span> &#123;<br>       <span class=\"hljs-comment\">// 获取当前线程</span><br>       <span class=\"hljs-type\">Thread</span> <span class=\"hljs-variable\">t</span> <span class=\"hljs-operator\">=</span> Thread.currentThread();<br>       <span class=\"hljs-comment\">// getMap其实很简单就是获取`t`中的`threadLocals`,代码在`工具方法`中</span><br>       <span class=\"hljs-type\">ThreadLocalMap</span> <span class=\"hljs-variable\">map</span> <span class=\"hljs-operator\">=</span> getMap(t); <br>       <span class=\"hljs-keyword\">if</span> (map != <span class=\"hljs-literal\">null</span>) &#123;\t\t\t\t\t\t\t\t\t\t<span class=\"hljs-comment\">// 3.</span><br>           ThreadLocalMap.<span class=\"hljs-type\">Entry</span> <span class=\"hljs-variable\">e</span> <span class=\"hljs-operator\">=</span> map.getEntry(<span class=\"hljs-built_in\">this</span>);<br>           <span class=\"hljs-keyword\">if</span> (e != <span class=\"hljs-literal\">null</span>) &#123;\t\t\t\t\t\t\t<span class=\"hljs-comment\">// 2.</span><br>               <span class=\"hljs-meta\">@SuppressWarnings(&quot;unchecked&quot;)</span><br>               <span class=\"hljs-type\">T</span> <span class=\"hljs-variable\">result</span> <span class=\"hljs-operator\">=</span> (T)e.value;<br>               <span class=\"hljs-keyword\">return</span> result;<br>           &#125;<br>       &#125;<br>       <span class=\"hljs-keyword\">return</span> setInitialValue();  \t\t\t\t<span class=\"hljs-comment\">// 1.</span><br>   &#125;<br><span class=\"hljs-comment\">// 这个方法只有在上面`1.`处调用...不知道为什么map,thread不直接传参</span><br><span class=\"hljs-comment\">// 该方法的功能就是为`Thread`设置`threadLocals`的初始值</span><br>   <span class=\"hljs-keyword\">private</span> T <span class=\"hljs-title function_\">setInitialValue</span><span class=\"hljs-params\">()</span> &#123;<br>       <span class=\"hljs-type\">T</span> <span class=\"hljs-variable\">value</span> <span class=\"hljs-operator\">=</span> initialValue();<br>       <span class=\"hljs-type\">Thread</span> <span class=\"hljs-variable\">t</span> <span class=\"hljs-operator\">=</span> Thread.currentThread();<br>       <span class=\"hljs-type\">ThreadLocalMap</span> <span class=\"hljs-variable\">map</span> <span class=\"hljs-operator\">=</span> getMap(t);<br>       <span class=\"hljs-comment\">// map不为null表明是从上面的`2.`处进入该方法</span><br>       <span class=\"hljs-comment\">// 已经初始化`threadLocals`,但并未找到当前对应的`Entry`</span><br>       <span class=\"hljs-comment\">// 所以此时直接添加`Entry`就行</span><br>       <span class=\"hljs-keyword\">if</span> (map != <span class=\"hljs-literal\">null</span>)<br>           map.set(<span class=\"hljs-built_in\">this</span>, value);<br>       <span class=\"hljs-keyword\">else</span><br>           createMap(t, value);<br>       <span class=\"hljs-keyword\">return</span> value;<br>   &#125;<br>     <span class=\"hljs-comment\">// 初始值,`protected`方便子类继承,并定义自己的初始值.</span><br>     <span class=\"hljs-keyword\">protected</span> T <span class=\"hljs-title function_\">initialValue</span><span class=\"hljs-params\">()</span> &#123;<br>       <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">null</span>;<br>     &#125;<br><br><span class=\"hljs-comment\">// 创建并赋值`threadLocals`的方法</span><br>    <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">createMap</span><span class=\"hljs-params\">(Thread t, T firstValue)</span> &#123;<br>       t.threadLocals = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ThreadLocalMap</span>(<span class=\"hljs-built_in\">this</span>, firstValue);<br>   &#125;<br></code></pre></td></tr></table></figure>\n\n<p>整个获取的过程其实并不难：</p>\n<ol>\n<li>通过 Thread#currentThread 方法获取当前线程对象。</li>\n<li>首先通过 getMap 方法获取当前线程绑定的 threadLocals。</li>\n<li>不要为空时，以当前 ThreadLocal 对象为参数获取对应的Entry 对象，为空跳到第四步。</li>\n<li>获取 Entry 对象中的 value ，并返回。</li>\n<li>调用 setInitialValue方法，并返回。</li>\n</ol>\n<br>\n\n<p>这里可以很明显的看出来，数据其实还是保存在 Thread 对象里的。</p>\n<p>通过 setInitialValue 方法可以设定初始值。</p>\n<blockquote>\n<p>例如，希望统计每个线程的某个操作计数，那么就可以用如下的方法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\">ThreadLocal&lt;Integer&gt; counter = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ThreadLocal</span>&lt;Integer&gt;() &#123;<br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">protected</span> Integer <span class=\"hljs-title function_\">initialValue</span><span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>\n\n<p>以 0 为初始值做统计。</p>\n</blockquote>\n<br>\n\n<br>\n\n<h3 id=\"数据存储-Set\"><a href=\"#数据存储-Set\" class=\"headerlink\" title=\"数据存储 - Set\"></a>数据存储 - Set</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">set</span><span class=\"hljs-params\">(T value)</span> &#123;<br>       <span class=\"hljs-comment\">// 获取当前线程</span><br>       <span class=\"hljs-type\">Thread</span> <span class=\"hljs-variable\">t</span> <span class=\"hljs-operator\">=</span> Thread.currentThread();<br>       <span class=\"hljs-type\">ThreadLocalMap</span> <span class=\"hljs-variable\">map</span> <span class=\"hljs-operator\">=</span> getMap(t);     <span class=\"hljs-comment\">// .1</span><br>       <span class=\"hljs-keyword\">if</span> (map != <span class=\"hljs-literal\">null</span>)<br>           map.set(<span class=\"hljs-built_in\">this</span>, value);<br>       <span class=\"hljs-keyword\">else</span><br>           createMap(t, value);<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>流程简述如下：</p>\n<ol>\n<li>获取当前线程,并以此获取线程绑定的 ThreadLocalMap 对象。</li>\n<li>map 不为空时,直接set。</li>\n<li>map 为空时需要先创建 Map 并赋值。</li>\n</ol>\n<p><br><br></p>\n<h2 id=\"ThreadLocalMap\"><a href=\"#ThreadLocalMap\" class=\"headerlink\" title=\"ThreadLocalMap\"></a>ThreadLocalMap</h2><p>ThreadLocalMap 类似于 HashMap ，也是使用 Hash 算法定位存取的数据结构，以 ThreadLocal 对象为 Key。</p>\n<p>Hash 算法合理时 ThreadLocalMap 的存取操作近乎是 O(1) 的复杂度。</p>\n<p><code>ThreadLocalMap</code> 出人意料的并没有继承任何一个类或接口，是完全独立的类，以为会像 HashMap 一样继承一下 AbstractMap。</p>\n<br>\n\n<h3 id=\"成员变量\"><a href=\"#成员变量\" class=\"headerlink\" title=\"成员变量\"></a>成员变量</h3>  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">// 默认的初始容量 一定要是二的次幂</span><br><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">INITIAL_CAPACITY</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">16</span>;<br><span class=\"hljs-comment\">// 元素数组/条目数组</span><br><span class=\"hljs-keyword\">private</span> Entry[] table;<br><span class=\"hljs-comment\">// 大小,用于记录数组中实际存在的Entry数目</span><br><span class=\"hljs-keyword\">private</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">size</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>;<br><span class=\"hljs-comment\">// 阈值</span><br><span class=\"hljs-keyword\">private</span> <span class=\"hljs-type\">int</span> threshold; <span class=\"hljs-comment\">// Default to 0 构造方法</span><br></code></pre></td></tr></table></figure>\n\n<blockquote>\n<p><strong>ThreadLocalMap 的底层数据结构是 Entry 的数组，</strong>并且默认容量为16。</p>\n</blockquote>\n<br>\n\n<p>以下为 Entry 对象的声明形式：</p>\n<p> <img src=\"https://chenqwwq.oss-cn-hangzhou.aliyuncs.com/note/image-20210221154222208.png\" alt=\"image-20210221154222208\"></p>\n<blockquote>\n<p>WeakReference 声明了 Entry 对象对于 Key ，也就是 ThreadLocal 对象的引用是弱引用。</p>\n<p><strong>弱引用消除了 ThreadLocalMap 的引用对 ThreadLocal  的对象回收的影响，</strong>这是 ThreadLocal 避免内存泄漏的核心。</p>\n</blockquote>\n<br>\n\n<h3 id=\"元素获取\"><a href=\"#元素获取\" class=\"headerlink\" title=\"元素获取\"></a>元素获取</h3><h4 id=\"getEntry-ThreadLocal-lt-gt-key\"><a href=\"#getEntry-ThreadLocal-lt-gt-key\" class=\"headerlink\" title=\"getEntry(ThreadLocal&lt;?&gt; key)\"></a>getEntry(ThreadLocal&lt;?&gt; key)</h4><ul>\n<li>该方法就是通过 ThreadLocal 对象获取对应的数据。</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">private</span> Entry <span class=\"hljs-title function_\">getEntry</span><span class=\"hljs-params\">(ThreadLocal&lt;?&gt; key)</span> &#123;<br>    <span class=\"hljs-comment\">// 和HashMap中一样的下标计算方式</span><br>    <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> key.threadLocalHashCode &amp; (table.length - <span class=\"hljs-number\">1</span>);<br>    <span class=\"hljs-type\">Entry</span> <span class=\"hljs-variable\">e</span> <span class=\"hljs-operator\">=</span> table[i];<br>    <span class=\"hljs-comment\">// 获取到对应的Entry之后就分两步</span><br>    <span class=\"hljs-keyword\">if</span> (e != <span class=\"hljs-literal\">null</span> &amp;&amp; e.get() == key)<br>        <span class=\"hljs-comment\">// 1. e不为空且threadLocal相等</span><br>        <span class=\"hljs-keyword\">return</span> e;\t\t<br>    <span class=\"hljs-keyword\">else</span>\t\t\t\t\t\t\t\t\t\t\t\t\t\t<br>        <span class=\"hljs-comment\">// 2. e为空或者threadLocal不相等\t\t\t\t</span><br>        <span class=\"hljs-keyword\">return</span> getEntryAfterMiss(key, i, e);<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>起手就是一个 HashCode &amp; (len - 1)，和 HashMap 类似，但ThreadLocal 的 HashCode 和 HashMap 中的直接调用 hashCode() 方法不同。</p>\n<p>ThreadLocal 是采用递增的形式，而非直接计算对象的 HashCode。</p>\n<br>\n\n <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">threadLocalHashCode</span> <span class=\"hljs-operator\">=</span> nextHashCode();<br><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">AtomicInteger</span> <span class=\"hljs-variable\">nextHashCode</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">AtomicInteger</span>();  <br><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">nextHashCode</span><span class=\"hljs-params\">()</span> &#123;<br>\t<span class=\"hljs-keyword\">return</span> nextHashCode.getAndAdd(HASH_INCREMENT);<br>&#125;<br></code></pre></td></tr></table></figure>\n<p> 以上就是 HashCode 的获取方式，<strong>是以类变量的方式递增获取</strong>，相对于直接调用 hashCode() 可以更好的减少 hash 冲突。</p>\n<blockquote>\n<p>每次创建一个 ThreadLocal，hashCode 都会+1，所以能使数据更加均匀的散布在数组中，更好的减少 hash 冲突。</p>\n</blockquote>\n<br>\n\n<p>如果hash计算出来的下标存在想要的元素就直接返回，如果获取元素为空还会再调用 <code>getEntryAfterMiss</code> 做冲突查询的后续处理.</p>\n<p><br><br></p>\n<h4 id=\"getEntryAfterMiss-ThreadLocal-lt-gt-key-int-i-Entry-e\"><a href=\"#getEntryAfterMiss-ThreadLocal-lt-gt-key-int-i-Entry-e\" class=\"headerlink\" title=\"getEntryAfterMiss(ThreadLocal&lt;?&gt; key, int i, Entry e)\"></a>getEntryAfterMiss(ThreadLocal&lt;?&gt; key, int i, Entry e)</h4><ul>\n<li>该方法是在直接按照 <code>Hash</code> 计算下标后，没获取到对应的 <code>Entry</code> 对象的时候调用，<strong>下标处不是想要的元素就说明出现了 Hash 冲突。</strong></li>\n</ul>\n<p>以下为方法源码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">private</span> Entry <span class=\"hljs-title function_\">getEntryAfterMiss</span><span class=\"hljs-params\">(ThreadLocal&lt;?&gt; key, <span class=\"hljs-type\">int</span> i, Entry e)</span> &#123;<br>        Entry[] tab = table;<br>        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">len</span> <span class=\"hljs-operator\">=</span> tab.length;<br>        <span class=\"hljs-comment\">// 此时注意如果从上面情况`2.`进来时,</span><br>        <span class=\"hljs-comment\">// e为空则直接返回null,不会进入while循环</span><br>        <span class=\"hljs-comment\">// 只有e不为空且e.get() != key时才会进while循环</span><br>        <span class=\"hljs-keyword\">while</span> (e != <span class=\"hljs-literal\">null</span>) &#123;<br>            ThreadLocal&lt;?&gt; k = e.get();<br>            <span class=\"hljs-comment\">// 找到相同的k,返回得到的Entry,get操作结束</span><br>            <span class=\"hljs-keyword\">if</span> (k == key)<br>                <span class=\"hljs-keyword\">return</span> e;<br>            <span class=\"hljs-comment\">// 若此时的k为空,那么e则被标记为`Stale`需要被`expunge`</span><br>            <span class=\"hljs-keyword\">if</span> (k == <span class=\"hljs-literal\">null</span>)<br>                expungeStaleEntry(i);<br>            <span class=\"hljs-keyword\">else</span>\t<span class=\"hljs-comment\">// 下面两个都是遍历的相关操作</span><br>                <span class=\"hljs-comment\">// nextIndex就是+1判断是否越界</span><br>                i = nextIndex(i, len);<br>            e = tab[i];<br>        &#125;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">null</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<blockquote>\n<p><strong>在判断出现 hash 冲突之后，直接往后线性查找之后的数组元素。</strong></p>\n</blockquote>\n<br>\n\n<br>\n\n\n\n<h4 id=\"expungeStaleEntry-int-staleSlot\"><a href=\"#expungeStaleEntry-int-staleSlot\" class=\"headerlink\" title=\"expungeStaleEntry(int staleSlot)\"></a>expungeStaleEntry(int staleSlot)</h4><ul>\n<li>该方法用来清除 <code>staleSlot</code> 位置的 Entry 对象,并且会<strong>清理当前节点到下一个 <code>null</code> 节点中间的过期 <code>Entry</code>.</strong></li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">/** </span><br><span class=\"hljs-comment\">  * 清空旧的Entry对象</span><br><span class=\"hljs-comment\">  * <span class=\"hljs-doctag\">@param</span> staleSlot: 清理的起始位置</span><br><span class=\"hljs-comment\">  * <span class=\"hljs-doctag\">@param</span> return: 返回的是第一个为空的Entry下标</span><br><span class=\"hljs-comment\">  */</span><br> <span class=\"hljs-keyword\">private</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">expungeStaleEntry</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> staleSlot)</span> &#123;<br>         Entry[] tab = table;<br>         <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">len</span> <span class=\"hljs-operator\">=</span> tab.length;<br>     \t<span class=\"hljs-comment\">// 清空`staleSlot`位置的Entry</span><br>     \t<span class=\"hljs-comment\">// value引用置为空之后,对象被标记为不可达,下次GC就会被回收.</span><br>         tab[staleSlot].value = <span class=\"hljs-literal\">null</span>;<br>         tab[staleSlot] = <span class=\"hljs-literal\">null</span>;<br>         size--;<br>         Entry e;<br>         <span class=\"hljs-type\">int</span> i;<br>     \t<span class=\"hljs-comment\">// 通过nextIndex从`staleSlot`的下一个开始向后遍历Entry数组,直到e不为空</span><br>      \t<span class=\"hljs-comment\">// e赋值为当前的Entry对象</span><br>         <span class=\"hljs-keyword\">for</span> (i = nextIndex(staleSlot, len);<br>              (e = tab[i]) != <span class=\"hljs-literal\">null</span>;\t\t<br>              i = nextIndex(i, len)) &#123;<br>             ThreadLocal&lt;?&gt; k = e.get();<br>             <span class=\"hljs-comment\">// 当k为空的时候清空节点信息</span><br>             <span class=\"hljs-keyword\">if</span> (k == <span class=\"hljs-literal\">null</span>) &#123;\t\t\t\t\t\t\t<br>                 e.value = <span class=\"hljs-literal\">null</span>;<br>                 tab[i] = <span class=\"hljs-literal\">null</span>;<br>                 size--;<br>             &#125; <span class=\"hljs-keyword\">else</span> &#123;\t<span class=\"hljs-comment\">// 以下为k存在的情况</span><br>                 <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">h</span> <span class=\"hljs-operator\">=</span> k.threadLocalHashCode &amp; (len - <span class=\"hljs-number\">1</span>);<br>                 <span class=\"hljs-comment\">// 元素下标和key计算的不一样，表明是出现`Hash碰撞`之后调整的位置</span><br>                 <span class=\"hljs-comment\">// 将当前的元素移动到下一个null位置</span><br>                 <span class=\"hljs-keyword\">if</span> (h != i) &#123;\t\t\t\t\t<br>                     tab[i] = <span class=\"hljs-literal\">null</span>;<br>                     <span class=\"hljs-keyword\">while</span> (tab[h] != <span class=\"hljs-literal\">null</span>)<br>                         h = nextIndex(h, len);<br>                     tab[h] = e;<br>                 &#125;<br>             &#125;<br>         &#125;<br>         <span class=\"hljs-keyword\">return</span> i;<br>     &#125; <br></code></pre></td></tr></table></figure>\n\n<p>该方法是对内存泄露的进一步处理。</p>\n<p><strong>如果将ThreadLocal的内存泄露问题分成两个部分来看，一个是 Key，另外一个就是 Value。</strong></p>\n<p><strong>Key 的部分依靠弱引用清除，如果外部的强引用断开之后，也就是没有地方在使用到该 Key 之后，Key 会被 GC 回收，所以引用就为 null。</strong></p>\n<p>从而判断 Key 为 null 的 Value 就是 Stale 的对象，则靠该方法清除。</p>\n<blockquote>\n<p>ThreadLocal 靠弱引用清除的只有 Key 对象，还有 Value 对象则需要靠扫描，所以内存泄露的情况并不是能够完全避免的。</p>\n</blockquote>\n<br>\n\n<br>\n\n<h3 id=\"元素添加\"><a href=\"#元素添加\" class=\"headerlink\" title=\"元素添加\"></a>元素添加</h3><h4 id=\"set-ThreadLocal-lt-gt-key-Object-value\"><a href=\"#set-ThreadLocal-lt-gt-key-Object-value\" class=\"headerlink\" title=\"set(ThreadLocal&lt;?&gt; key, Object value)\"></a>set(ThreadLocal&lt;?&gt; key, Object value)</h4><ul>\n<li>该方法就是添加元素的方法。</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">set</span><span class=\"hljs-params\">(ThreadLocal&lt;?&gt; key, Object value)</span> &#123;<br>    Entry[] tab = table;<br>    <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">len</span> <span class=\"hljs-operator\">=</span> tab.length;<br>    <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> key.threadLocalHashCode &amp; (len-<span class=\"hljs-number\">1</span>);<br>    <span class=\"hljs-comment\">// 整个循环的功能就是找到相同的key覆盖value</span><br>    <span class=\"hljs-comment\">// 或者找到key为null的节点覆盖节点信息</span><br>    <span class=\"hljs-comment\">// 只有在e==null的时候跳出循环执行下面的代码</span><br>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">Entry</span> <span class=\"hljs-variable\">e</span> <span class=\"hljs-operator\">=</span> tab[i];<br>         e != <span class=\"hljs-literal\">null</span>;\t<br>         e = tab[i = nextIndex(i, len)]) &#123;<br>        ThreadLocal&lt;?&gt; k = e.get();<br>        <span class=\"hljs-comment\">// 找到相等的k,则直接替换value,set操作结束</span><br>        <span class=\"hljs-keyword\">if</span> (k == key) &#123;<br>            e.value = value;<br>            <span class=\"hljs-keyword\">return</span>;<br>        &#125;<br>        <span class=\"hljs-comment\">// k为空表示该节点过期,直接替换该节点</span><br>        <span class=\"hljs-keyword\">if</span> (k == <span class=\"hljs-literal\">null</span>) &#123;\t\t\t\t\t       <span class=\"hljs-comment\">// 1.</span><br>            replaceStaleEntry(key, value, i);<br>            <span class=\"hljs-keyword\">return</span>;<br>        &#125;<br>    &#125;<br>    <span class=\"hljs-comment\">// 走到这一步就是找到了e为空的位置，不然在上面两个判断里都return了</span><br>    tab[i] = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Entry</span>(key, value);<br>    <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">sz</span> <span class=\"hljs-operator\">=</span> ++size;<br>    <span class=\"hljs-keyword\">if</span> (!cleanSomeSlots(i, sz) &amp;&amp; sz &gt;= threshold)<br>        rehash();<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>通过 hashCode 确定下标后，如果 Key 相等则直接覆盖原数据，如果 Key 不相等则往后线性查找元素，找到为 null 的元素直接覆盖，或者找到空余的位置赋值。</p>\n<br>\n\n<p>最后会清理旧的元素，并且判断 threshold，决定是否需要扩容。</p>\n<blockquote>\n<p><strong>ThreadLocalMap 处理 Hash 冲突的方法叫做 线性寻址法，在冲突之后往后搜索，找到第一个为空的下标并保存元素。</strong></p>\n<p>线性寻址法在出现 Hash 冲突的时候处理的复杂度基本会变成 O(n)，并不能直接找一个 null 点就存储，因为数组中可能还有相同的 Key 在后面。</p>\n</blockquote>\n<br>\n\n<br>\n\n<p>replaceStaleEntry</p>\n<ul>\n<li>源码中只有从上面 <code>1.</code> 处进入该方法,用于<strong>替换  <code>key</code>  为空的 <code>Entry</code> 节点,顺带清除数组中的过期节点.</strong></li>\n</ul>\n<p>往后搜索的是第一个为空或者 Key 相等，如果先找到 Key 为空的并不能保证后续的节点没有 Key 相等的，所以在 replaceStaleEntry 方法中可能还需要处理另外一个 Key 相同的节点。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> *\t从`set.1.`处进入,key是插入元素ThreadLocal的hash,staleSlot为key为空的数组节点下标</span><br><span class=\"hljs-comment\"> */</span><br><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">replaceStaleEntry</span><span class=\"hljs-params\">(ThreadLocal&lt;?&gt; key, Object value,</span><br><span class=\"hljs-params\">                               <span class=\"hljs-type\">int</span> staleSlot)</span> &#123;<br>    Entry[] tab = table;<br>    <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">len</span> <span class=\"hljs-operator\">=</span> tab.length;<br>    Entry e;<br>    <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">slotToExpunge</span> <span class=\"hljs-operator\">=</span> staleSlot;<br>    <span class=\"hljs-comment\">// 从传入位置,即插入时发现k为null的位置开始,向前遍历,直到数组元素为空</span><br>    <span class=\"hljs-comment\">// 找到最前面一个key为null的值.\t</span><br>    <span class=\"hljs-comment\">// 这里要吐槽一下源代码...大括号都不加 习惯真差</span><br>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> prevIndex(staleSlot, len);<br>         (e = tab[i]) != <span class=\"hljs-literal\">null</span>;\t\t<br>         i = prevIndex(i, len))&#123;<br>\t\t<span class=\"hljs-comment\">// 向前获取到第一个 Key 为空的对象</span><br>        <span class=\"hljs-keyword\">if</span> (e.get() == <span class=\"hljs-literal\">null</span>)<br>            <span class=\"hljs-comment\">// 因为是环状遍历所以此时slotToExpunge是可能等于staleSlot的</span><br>            slotToExpunge = i;<br>    &#125;<br>    <span class=\"hljs-comment\">// 该段循环的功能就是向后遍历找到`key`相等的节点并替换</span><br>    <span class=\"hljs-comment\">// 并对之后的元素进行清理</span><br>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> nextIndex(staleSlot, len);<br>         (e = tab[i]) != <span class=\"hljs-literal\">null</span>;<br>         i = nextIndex(i, len)) &#123;<br>        ThreadLocal&lt;?&gt; k = e.get();<br>        <span class=\"hljs-keyword\">if</span> (k == key) &#123;\t<br>            <span class=\"hljs-comment\">// 替换 e 的 value</span><br>            e.value = value;<br>            <span class=\"hljs-comment\">// staleSlot 是因为 key 为 null 才进来的</span><br>            <span class=\"hljs-comment\">// 所以 tab[i] 也是需要清理的节点</span><br>            tab[i] = tab[staleSlot];<br>            tab[staleSlot] = e;<br>            <span class=\"hljs-keyword\">if</span> (slotToExpunge == staleSlot)<br>                slotToExpunge = i;<br>            cleanSomeSlots(expungeStaleEntry(slotToExpunge), len);<br>            <span class=\"hljs-keyword\">return</span>;<br>        &#125;<br>        <span class=\"hljs-comment\">// 其实我对这个`slotToExpunge == staleSlot`的判断一直挺疑惑的,为什么需要这个判断?</span><br>        <span class=\"hljs-keyword\">if</span> (k == <span class=\"hljs-literal\">null</span> &amp;&amp; slotToExpunge == staleSlot)<br>            slotToExpunge = i;<br>    &#125;<br>    <span class=\"hljs-comment\">// e==null时跳到下面代码运行</span><br>    <span class=\"hljs-comment\">// 清空并重新赋值</span><br>    <span class=\"hljs-comment\">// 断开 Entry 对应的数据的强引用</span><br>    tab[staleSlot].value = <span class=\"hljs-literal\">null</span>;<br>    tab[staleSlot] = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Entry</span>(key, value);<br>    <span class=\"hljs-comment\">// set后的清理</span><br>    <span class=\"hljs-keyword\">if</span> (slotToExpunge != staleSlot)<br>        cleanSomeSlots(expungeStaleEntry(slotToExpunge), len);<br>&#125;<br><br></code></pre></td></tr></table></figure>\n\n<p><strong>如上所说，再出现 Hash 冲突的时候，往后搜索的是第一个为空的节点，并不能直接赋值，因为在后续的数组中可能还存在相同的 Key 的节点。</strong></p>\n<p>替换元素之前会先向前搜索找到一个 Key 为 null 的节点。</p>\n<br>\n\n<br>\n\n\n\n<h4 id=\"cleanSomeSlots\"><a href=\"#cleanSomeSlots\" class=\"headerlink\" title=\"cleanSomeSlots\"></a>cleanSomeSlots</h4><ul>\n<li>该方法的功能是就是清除数组中的过期<code>Entry</code></li>\n<li>首次清除从<code>i</code>向后开始遍历<code>log2(n)</code>次,如果之间发现过期<code>Entry</code>会直接将<code>n</code>扩充到<code>len</code>可以说全数组范围的遍历.发现过期<code>Entry</code>就调用<code>expungeStaleEntry</code>清除直到未发现<code>Entry</code>为止.</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">  * <span class=\"hljs-doctag\">@param</span> i 清除的起始节点位置</span><br><span class=\"hljs-comment\">  * <span class=\"hljs-doctag\">@param</span> n 遍历控制,每次扫描都是log2(n)次,一般取当前数组的`size`或`len`</span><br><span class=\"hljs-comment\">  */</span><br><span class=\"hljs-keyword\">private</span> <span class=\"hljs-type\">boolean</span> <span class=\"hljs-title function_\">cleanSomeSlots</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> i, <span class=\"hljs-type\">int</span> n)</span> &#123;<br>    \t\t<span class=\"hljs-comment\">// 是否有清除的标记</span><br>            <span class=\"hljs-type\">boolean</span> <span class=\"hljs-variable\">removed</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-literal\">false</span>;<br>    \t\t<span class=\"hljs-comment\">// 获取底层数组的数据信息</span><br>            Entry[] tab = table;<br>            <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">len</span> <span class=\"hljs-operator\">=</span> tab.length;<br>            <span class=\"hljs-keyword\">do</span> &#123;<br>                i = nextIndex(i, len);<br>                <span class=\"hljs-type\">Entry</span> <span class=\"hljs-variable\">e</span> <span class=\"hljs-operator\">=</span> tab[i];<br>                <span class=\"hljs-keyword\">if</span> (e != <span class=\"hljs-literal\">null</span> &amp;&amp; e.get() == <span class=\"hljs-literal\">null</span>) &#123;<br>                    <span class=\"hljs-comment\">// 当发现有过期`Entry`时,n变为len</span><br>                    <span class=\"hljs-comment\">// 即扩大范围,全数组范围在遍历一次</span><br>                    n = len;<br>                    removed = <span class=\"hljs-literal\">true</span>;<br>                    i = expungeStaleEntry(i);<br>                &#125;\t<br>                <span class=\"hljs-comment\">// 无符号右移一位相当于n = n /2</span><br>                <span class=\"hljs-comment\">// 所以在第一次会遍历`log2(n)`次</span><br>            &#125; <span class=\"hljs-keyword\">while</span> ( (n &gt;&gt;&gt;= <span class=\"hljs-number\">1</span>) != <span class=\"hljs-number\">0</span>);<br>    \t\t<span class=\"hljs-comment\">// 遍历过程中没出现过期`Entry`的情况下会返回是否有清理的标记.</span><br>            <span class=\"hljs-keyword\">return</span> removed;<br>        &#125;<br></code></pre></td></tr></table></figure>\n\n<br>\n\n<br>\n\n<h3 id=\"扩容调整方法\"><a href=\"#扩容调整方法\" class=\"headerlink\" title=\"扩容调整方法\"></a>扩容调整方法</h3><h4 id=\"rehash\"><a href=\"#rehash\" class=\"headerlink\" title=\"rehash\"></a>rehash</h4><ul>\n<li>容量调整的先驱方法,先清理过期<code>Entry</code>,并做是否需要<code>resize</code>的判断</li>\n<li>调整的条件是<strong>当前size大于阈值的3&#x2F;4</strong>就进行扩容</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">rehash</span><span class=\"hljs-params\">()</span> &#123;<br>    \t\t<span class=\"hljs-comment\">// 清理过期Entry</span><br>           expungeStaleEntries();<br>    \t\t<span class=\"hljs-comment\">// 初始阈值threshold为10</span><br>           <span class=\"hljs-keyword\">if</span> (size &gt;= threshold - threshold / <span class=\"hljs-number\">4</span>)<br>               resize();<br>       &#125;<br></code></pre></td></tr></table></figure>\n\n<br>\n\n<br>\n\n<h4 id=\"resize\"><a href=\"#resize\" class=\"headerlink\" title=\"resize\"></a>resize</h4><ul>\n<li>扩容的实际方法.</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">resize</span><span class=\"hljs-params\">()</span> &#123;<br>    \t\t<span class=\"hljs-comment\">// 获取旧数组并记录就数组大小</span><br>          Entry[] oldTab = table;<br>          <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">oldLen</span> <span class=\"hljs-operator\">=</span> oldTab.length;<br>    \t\t<span class=\"hljs-comment\">// 新数组大小为旧数组的两倍</span><br>          <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">newLen</span> <span class=\"hljs-operator\">=</span> oldLen * <span class=\"hljs-number\">2</span>;<br>          Entry[] newTab = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Entry</span>[newLen];<br>          <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">count</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>;<br>\t<span class=\"hljs-comment\">// 遍历整个旧数组,并迁移元素到新数组</span><br>          <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">j</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; j &lt; oldLen; ++j) &#123;<br>              <span class=\"hljs-type\">Entry</span> <span class=\"hljs-variable\">e</span> <span class=\"hljs-operator\">=</span> oldTab[j];<br>              <span class=\"hljs-comment\">// 判断是否为空,空的话就算了</span><br>              <span class=\"hljs-keyword\">if</span> (e != <span class=\"hljs-literal\">null</span>) &#123;<br>                  ThreadLocal&lt;?&gt; k = e.get();<br>                  <span class=\"hljs-comment\">// k为空即表示为过期节点,当即清理了.</span><br>                  <span class=\"hljs-keyword\">if</span> (k == <span class=\"hljs-literal\">null</span>) &#123;<br>                      e.value = <span class=\"hljs-literal\">null</span>; <br>                  &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>                      <span class=\"hljs-comment\">// 重新计算数组下标,如果数组对应位置已存在元素</span><br>                      <span class=\"hljs-comment\">// 则环状遍历整个数组找个空位置赋值</span><br>                      <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">h</span> <span class=\"hljs-operator\">=</span> k.threadLocalHashCode &amp; (newLen - <span class=\"hljs-number\">1</span>);<br>                      <span class=\"hljs-keyword\">while</span> (newTab[h] != <span class=\"hljs-literal\">null</span>)<br>                          h = nextIndex(h, newLen);<br>                      newTab[h] = e;<br>                      count++;<br>                  &#125;<br>              &#125;<br>          &#125;<br>\t<span class=\"hljs-comment\">// 设置新属性\t</span><br>          setThreshold(newLen);<br>          size = count;<br>          table = newTab;<br>      &#125;<br></code></pre></td></tr></table></figure>\n\n\n\n<br>\n\n<br>\n\n\n\n<h2 id=\"Q-amp-A\"><a href=\"#Q-amp-A\" class=\"headerlink\" title=\"Q&amp;A\"></a>Q&amp;A</h2><blockquote>\n<p>Q: ThreadLocal 为何会出现内存泄露？</p>\n</blockquote>\n<p><strong>ThreadLocal 会出现内存泄露的主要原因是如果是强引用，那么在 ThreadLocal 类不再使用之后，ThreadLocalMap 中无法清除相关的 Entry 对象。</strong></p>\n<p>在 ThreadLocal 不再使用之后，ThreadLocalMap 中指向 ThreadLocal 的强引用也会导致 ThreadLocal 无法被 GC 回收，同理 Value 对象也被保留了下来。</p>\n<p><strong>也就出现了所谓的内存泄露，无用的数据无法被 GC 有效的清除。</strong></p>\n<br>\n\n<br>\n\n\n\n\n\n<blockquote>\n<p> Q: ThreadLocal 如何解决内存泄漏?</p>\n</blockquote>\n<p>ThreadLocal 的内存泄露可以分为 Key（也就是 ThreadLocal），以及 Value。</p>\n<p><strong>解决 Key 的内存泄露的方法就是采用弱引用，弱引用消除了 ThreadLocalMap 对 ThreadLocal 对象的 GC 的影响。</strong></p>\n<p>另外的在每次获取或者添加数据的时候都会判断 Key 是否被回收，如果 Key 已经被回收会连带清理 Value 对象，这也就顺带解决了 Value 的泄露问题。</p>\n<br>\n\n<br>\n\n\n\n<blockquote>\n<p> Q: ThreadLocalMap 如何解决Hash冲突？</p>\n</blockquote>\n<p>Hash 冲突就是指通过 Hash 计算的下标值一致，两个元素的定位一致。</p>\n<p>HashMap 解决 Hash 冲突的方法就是<strong>拉链法</strong>，底层的数组中保存的不是单一的数据，而是一个集合(链表&#x2F;红黑树)，冲突之后下挂。</p>\n<p>采用拉链法的结果就是在Hash冲突严重时会严重影响时间复杂度，因为就算是红黑树查询的事件复杂度都是 O(Log2n)。</p>\n<p>ThreadLocalMap 并没有采用这种方法，而是使用的<strong>开放寻址法</strong>，如果已经有数据存在冲突点，就在数组中往下遍历找到第一个空着的位置。</p>\n<blockquote>\n<p>需要注意的是，并不是找到空的位置就可以直接替换，还是需要遍历整个数组确保没有重复的 Key。</p>\n</blockquote>\n<br>\n\n<br>\n\n\n\n<blockquote>\n<p> Q: ThreadLocalMap 和 HashMap 的异同</p>\n</blockquote>\n<p>两个都是采用 Hash 定位的数据结构，底层都是以数组的形式。</p>\n<p>但是 HashCode 的获取方式不同，HashMap 调用对象的 hashCode() 方法，而  ThreadLocalMap 中的 Key 就是 ThreadLocal，ThreadLocal 的 HashCode 是递增分配的。</p>\n<p>另外处理 Hash 冲突的方式不同，ThreadLocalMap 采用的开放寻址法，而 HashMap 采用的是拉链法。</p>\n"},{"title":"TCP 协议整理（残酷残酷","excerpt":"包含连接的建立和释放，有限状态机，可靠传输基础，窗口管理，拥塞控制的等 TCP 基本内容","index_img":"https://chenqwwq.oss-cn-hangzhou.aliyuncs.com/note/TCP%E6%A8%A1%E5%9D%97%E6%95%B4%E7%90%86.png","banner_img":"https://chenqwwq.oss-cn-hangzhou.aliyuncs.com/note/TCP%E6%A8%A1%E5%9D%97%E6%95%B4%E7%90%86.png","date":"2021-10-12T14:10:28.000Z","_content":"\n\n\n# TCP 协议（一\n\n- 基于《TCP/IP详解 卷一》和谢希仁《计算机网络（第6版）》的简单整理和总结。\n\n\n\nTCP是一种面向连接的，基于字节流的，可靠的传输控制协议。\n\n属于OSI七层模型中的传输层。\n\n## 内容梳理\n\n![1569166769008](https://chenqwwq.oss-cn-hangzhou.aliyuncs.com/note/TCP%E6%A8%A1%E5%9D%97%E6%95%B4%E7%90%86.png)\n\n- TCP的内容模块整理，方便记忆。\n\n## 一、TCP报文首部\n\n![](https://chenqwwq.oss-cn-hangzhou.aliyuncs.com/note/TCP%E9%A6%96%E9%83%A8%E6%A0%BC%E5%BC%8F.png)\n\n\n\nTCP首部大小在20~60字节，其中标准长度为20个字节。\n\n**源端口和目的端口**\n\nTCP的四元组为源IP，源端口，目的IP，目的端口，**TCP首部中的源端口和目的端口结合IP首部中的源和目的IP地址组成了一个连接的四元组。**\n\n**序号/序列号(SEQ)**\n\n在一个TCP连接中唯一标识TCP报文段，是重传机制的重要字段。\n\n自ISN（初始序列号）起，单调递增。\n\n**确认号(ACK)**\n\n接收端发送给发送端，是期望对方下一个报文段的第一个字节的序号。\n\n**值为N的ACK报文表示的是序号在N之前的报文全部已经收到，希望收到序号N的报文。**\n\n**数据偏移**\n\n表示TCP数据部分相对于整个TCP报文段来说的偏移量，可以简单理解为TCP首部的长度。\n\n**控制位**\n\n1. URG - 紧急，置位后首部紧急指针生效\n2. ACK - 确认，置位后确认号生效\n3. PSH - 推送，置位后接收方应尽快给应用程序推送该段数据\n4. RST - 重置，置位后表示该报文为重置报文，取消连接\n5. SYN - 初始化，置位表示为初始化报文，用于初始化TCP连接\n6. FIN - 结束，职位表示当前端结束数据传输工作\n\n**URG之前还有CWR - 拥塞窗口 以及 ECE - ECN回显，但是在一些TCP的实现里面并没有实现这两位。**\n\n**窗口**\n\n**通常在ACK报文中附带，作为接收方对发送方的背压，是影响发送端发送速率的因素之一。**\n\n占16位，单位为字节，所以在没有**窗口缩放**选项的情况下，最大为65535字节。\n\n**校验和**\n\n报文段正确性校验使用占两位。\n\n校验范围包括首部和数据部分，和UDP一样需要再生成12字节的伪首部参与计算。\n\n伪首部包括源和目的IP，保证通信双方的正确性。\n\n**紧急指针**\n\n只有在**URG控制位**置位的情况下生效。\n\n表示紧急报文在**报文段序列号字段**上的正偏移，序列号超过紧急指针的即为正常数据。\n\n零窗口的情况下也可以发送紧急报文。\n\n**选项**\n\n**1. MSS - 最大报文段长度**\n\n连接中每个TCP报文段的**数据字段**的最大长度，不包含首部。\n\n在SYN报文中协商，双方都可以指定自己的MSS，甚至可以不同，默认为536字节。\n\n**2. SACK - 选择确认**\n\n当接收方接受到乱序数据时，就会在接收窗口产生缺口。\n\n设置SACK选项就是为了描述这些缺口信息，使发送方更好，更准确的重传这些缺口数据。\n\n**3. WSCALE/WSOPT - 窗口缩放**\n\n由于首部的**窗口大小**字段仅占16位，所以影响的范围也仅在0~2^16(65535)之间。\n\n该选项就是为了增加窗口大小字段的范围，从16位提升至30位。\n\n该选项只能出现在一个SYN报文段中，而SYN报文仅仅在初始化时通信双方各发一次，由此可知：\n\n**连接建立之后窗口缩放的比例因子是与方向绑定的**，通信双方的比例因子可以不同。\n\n**4. TSOPT - 时间戳选项** \n\n该选项要求发送方在每一个报文中添加2个4字节的单调递增的时间戳数值。\n\n分别是：**TSval/TSV 发送时间戳 以及 TSecr/TSER 时间戳回显**。\n\n该选项的设置可以很好的解决重传的二义性，也能更加精确的计算RTT。\n\n**5. 其他**\n\n另外的还有**认证选项**以及**用户超时选项**等等。\n\n\n\n## 二、连接管理\n\n\n\n### 建立连接\n\n稍微有点常识的程序猿应该都知道，TCP建立连接的时候需要往返发送三个报文。\n\n   ![1568818645296](https://chenqwwq.oss-cn-hangzhou.aliyuncs.com/note/TCP%E6%89%93%E5%BC%80%E8%BF%9E%E6%8E%A5.png)\n\n连接发起者(客户端)会向服务端发送一个**SYN报文**，报文中除了目的端口，还包括ISN(初始序列号)以及部分选项字段。\n\n服务端接受后会回复一个**SYN报文**作为响应，然后将接收到的SEQ+1，作为报文的ACK值，并指明服务端的的初始序列号等信息。\n\n客户端响应一个ACK报文，同样的将服务端SYN报文中的SEQ+1作为ACK值。\n\n#### 为什么要三次握手\n\n首先明确，**三次握手的主要目的是交换双方的ISN以及选项。**\n\n这些字段，例如是否启用SACK等都将是数据传输时的重要属性。\n\n交换双方的信息至少需要两次握手，而第三次握手则是为了**防止已失效的连接请求又被转发到了服务端**。\n\n意思就是如果客户端在收到服务端的SYN+ACK报文时就建立一个连接，那么在重传时将会出现先后多条连接的情况。\n\n我感觉可能防止建立重复连接的功能可能是意外之喜。\n\n另外**可以发现SYN报文也占用了一个序列号。**\n\n\n\n### 初始序列号 - ISN\n\n在发送用于建立连接的SYN报文时，通信的双方都会选择一个初始化序列号。\n\n每个连接都会有不同的初始化序列号。\n\n《TCP/IP详解》原文13.2章节:**此外，为了确认客户端的SYN，服务器将其包含的ISN(c)数值加1后作为返回的ACK数值。因此，每发送一个SYN，序列号都会自动加1。这样如果出现丢失的情况，该SYN段将会重传**。\n\nwireshark测试下发现，客户端SYN报文的SEQ（也就是ISN）在重传时也不会改变。\n\n\n\n### 关闭连接\n\n相对来说关闭连接的四次挥手就好理解多了。\n\n   ![1568820312811](https://chenqwwq.oss-cn-hangzhou.aliyuncs.com/note/TCP%E5%85%B3%E9%97%AD%E8%BF%9E%E6%8E%A5.png)\n\n1. 连接的主动关闭方，发送一个FIN。\n2. 被动方回复一个ACK。\n3. 被动方主动发送一个FIN。\n4. 主动方回复一个ACK\n\n#### 为什么要四次挥手\n\n和三次握手的区别，四次握手中被动关闭方的FIN报文和ACK拆开了，而三次握手的SYN报文和ACK是一起发出的。\n\n至于为什么要拆开，我的理解是因为**半关闭状态**的存在，作为一个全双工的协议，连接的双方都可以互相发送数据。\n\n半关闭状态是指TCP连接双方，有一端发送了FIN，而另一端还在继续传输数据，此时的主动关闭方仍然会对接收的数据作ACK的响应。 \n\n一方发送了FIN报文就表示己方的数据发送完毕了，**因此就分别需要两个FIN报文和两个ACK才足以完整的关闭一条(全双工)连接。**\n\n\n\n\n\n### 同时打开和关闭\n\n#### 同时打开\n\n通信双方在收到对方的SYN报文之前，都先发送了SYN报文，此时这种情况就叫做**同时打开**。\n\n算是一种很少出现的特殊情况，但是TCP也能支持，并建立一条正常的连接。\n\n    ![](https://chenbxxx.oss-cn-beijing.aliyuncs.com/TCP同时打开.png)\n\n<font size=\"1\">我的画图软件不能支持斜线，只能靠盗图了</font>\n\n如图可见，通信的双方同时向对方发送一个SYN，并附带上自己的ISN(SEQ)。\n\n接收方接受之后同样也同时作为被动发起方恢复一个ACK。\n\n**此时通信双方即为客户端也为服务端，状态的变化一致，且回复的ACK中ISN与SYN中的一致。**\n\n通信双方经历了相同的状态变更:`SYN_SENT` -> `SYN_RCVD` -> `ESTABLISHED`\n\n<font size=\"2\">我感觉TCP内部的实现中应该也是以SEQ作为参考依据。</font>\n\n#### 同时关闭 \n\n  ![](https://chenqwwq.oss-cn-hangzhou.aliyuncs.com/note/TCP%E5%90%8C%E6%97%B6%E5%85%B3%E9%97%AD.png)\n\n和同时打开差不多，**同时关闭是在收到对方的FIN之前，向对方发送了自己的FIN报文。**\n\n同样的通信双方经历了相同的状态变更:`FIN_WAIT_1` -> `CLOSING` -> `TIME_WAIT`\n\n可以看到双方是都需要等待一个2MSL的。\n\n\n\n### 半打开，半关闭，半连接\n\n以上是TCP连接中的三种特殊状态，就简单的叙述一下吧。\n\n半连接是指**服务端发送了SYN+ACK报文之后，等待客户端的ACK报文的这段时间**\n\n半连接有类似的攻击手段:大量的请求发送到服务端但是永远不回复最后的ACK，导致服务端存在大量的半连接。\n\n半打开是指**如果一方已经关闭或异常终止连接，而另一方却不知道。**\n\n半关闭上面也有提到过，**通信的一方主动发送FIN之后表示本方不会再主动发送任何数据，但仍然可以接受对方的数据并响应的情况。**\n\n\n\n## 三、TCP的有限状态机\n\n![](https://chenqwwq.oss-cn-hangzhou.aliyuncs.com/note/TCP%E6%9C%89%E9%99%90%E7%8A%B6%E6%80%81%E6%9C%BA.png)\n\n上图即为《TCP/IP详解 卷一》中的原图。\n\n图中基本包含了全部的TCP连接状态变更，包括典型、非典型。\n\n\n\n### ESTABLISHED\n\n`ESTABLISHED`状态是通信双方正常传输数据的状态。\n\n作为三次握手的终点和四次挥手的起点。\n\n\n\n### TIME_WAIT状态\n\n**`TIME_WAIT`状态是主动关闭方在连接关闭的最后阶段必须经历的。**\n\n在**WAIT_TIME**状态下，主动关闭方会判断本次的四元组不可用，所以此时就算对端重新请求SYN（接收到ACK释放连接之后），也会被拒绝。\n\n进入该状态时，**TCP会设置时间等待计时器(TIME_WAIT timer)，并等待2MSL的时间才会真正的释放连接，RFC793中建议为2min。**\n\nMSL(Maximum Segment Lifetime)，也可以称为最大报文生存时间，**是报文在所有链路中存在的最大时间，超过就会被丢弃。**\n\n这么做的目的有以下两个：\n\n1. 为了保证最后的ACK能够到达被动关闭方。\n\n从有限状态机的图中也可以看到，被动关闭方的连接真正释放是在收到最后一个ACK之后，所以必须要保证ACK的正确发送。\n\n**等待2MSL能够有效避免最终的ACK丢失的情况，ACK不会主动重传，但是对端的FIN会重传直到收到正确的ACK为止。**\n\n2MSL可以粗略的看做是己方ACK发送的时间加上对方FIN重传的时间。\n\n当一个报连接处于`TIME_WAIT`状态时，任何延迟到达的报文都会被丢弃，只接收FIN报文。\n\n另外**TIME_WAIT**的状态是从最后一个ACK发送开始，所以重新响应ACK之后，**TIME_WAIT**也会重新计时。\n\n2. 保证相同四元组额前后连接报文不混淆\n\n**等待2MSL，就可以使本次连接的报文在链路中全部消失。**\n\n期间TCP会将本次四元组定义为不可用，阻止重连。\n\n如果不等待，相同四元组的连接如果重连，就有可能导致旧报文发送到新连接的情况，造成数据混乱。\n\n2MSL是相对保守的处理方式，在ISN能超过上一次连接的最大序列号或者启用了时间戳选项的时候，感觉上可以跳过。\n\n\n\n### CLOSING 状态\n\n`CLOSING`状态是TCP的非典型状态<font size=2>(一般情况下不会出现）</font>。\n\n只有在上文提到过地**同时关闭**的情况下才会出现，同时关闭的通信双方在接收到对方的FIN，在发送ACK之后进入到`CLOSING`状态。\n\n处于`CLOSING`状态下的通信双方在接收到对方的ACK之后，都会进入`TIME_WAIT`状态。\n\n\n\n## 四、TCP的重传机制\n\nTCP协议往下就是网络层的IP协议，但是IP协议并不提供任何可靠传输的服务，所以我们可以简单认为TCP所处链路都是不可靠的。\n\n但是TCP介绍中也说了，它提供的是**可靠的传输服务**，因此也就要求TCP协议自身来补足IP协议中的不可靠部分。\n\n\n\n### 可靠传输的基础\n\n**TCP的重传机制是基于`连续ARQ协议`实现的。**\n\n维基百科对`ARQ`的解释如下：\n\n> ARQ协议，即自动重传请求（Automatic Repeat-reQuest），是OSI模型中数据链路层和传输层的错误纠正协议之一。它通过使用确认和超时这两个机制，在不可靠服务的基础上实现可靠的信息传输。如果发送方在发送后一段时间之内没有收到确认帧，它通常会重新发送。\n\n#### 停止等待ARQ协议\n\n ![](https://chenqwwq.oss-cn-hangzhou.aliyuncs.com/note/%E5%81%9C%E6%AD%A2%E7%AD%89%E5%BE%85ARQ.png)\n\n**一个分组一个分组的发送，在收到确认之前不会发送下一个分组，如果出现超时就重传丢失分组。**\n\n该协议能够完全保证通信的可靠新，但是显而易见的**该协议的利用率很成问题**，在发送完一个分组到确认到达的这段时间信道都是空闲的。\n\n即使整个链路十分可靠，依旧要等待确认信息的到达。\n\n而且判断分组是否丢失的算法就是**在一定时间内，是否收到接受的确认信息**，过于粗暴很容易出现伪重传的情况。\n\n#### 连续ARQ协议\n\n`连续ARQ协议`可以说是对`停止等待ARQ协议`的优化。\n\n**在停止等待ARQ协议之上，每次发送多个报文，并等待这些分组的确认信息**\n\n ![](https://chenqwwq.oss-cn-hangzhou.aliyuncs.com/note/%E8%BF%9E%E7%BB%ADARQ.png)\n\n连续ARQ协议虽然提高了信道利用率，但是仍然会存在**回退N**等问题。\n\n\n\n### 确认机制\n\n**确认机制指的就是接收端在收到一个正确的报文时，会给发送端回传一个ACK，表明报文已经到达。**\n\n#### 延迟确认/累计确认机制\n\n**接收端在收到数据之后，并不会立马回传ACK，而是会延迟一定的时间(延迟确认)，发送的时候会以最大有序报文的序号作为ACK的数值(累计确认)。**\n\n这样的目的很明确就是**减少ACK报文的数量，降低ACK造成的网络负担**。\n\n#### 选择确认SACK\n\n选择确认是TCP首部中的选项，启用SACK功能需要通信双方事先确认，之前也说过SACK字段是为了**描述接收端的接收缺口，帮助发送方更加准确的重传丢失报文。**\n\n可以在一个ACK报文中，指明多个缺口信息(最多三个)，普通的ACK报文可以看做是单个的缺口信息。\n\n\n\n### 超时重传\n\n**超时重传又可以称为基于计时器的重传。**\n\nTCP每发送一个报文，都会设定一个**重传计时器**，若在计时器超时时都没有收到确认消息，就会触发重传操作。\n\n超时重传的整体逻辑并不复杂，但是**超时时间的选择**却是TCP最难的问题之一。\n\n简单超时时间设置，比如SYN的重传 - **每次SYN重传的超时时间都是上一次的简单加倍**，比如说上次过了2s之后重传报文，这次就应该等待4s或者6s，这种方式称为**二进制指数退避**。\n\n复杂一点的设置就会根据报文的RTT推算RTO。\n\n> RTT （报文段往返时间）- 从报文发出到接受到该报文的ACK所花费的总时间。\n>\n> RTO （超时重传时间）- 从报文发出到重传报文所花费的时间，也就是所谓的重传超时时间。\n\n<font size=1>这里并不是很懂，就先空着了</font>\n\n\n\n### 快速重传\n\n快速重传是基于接收端反馈信息的重传模式。\n\n**首先在TCP中，接收方如果收到一个失序的报文段就会立即发送重复的ACK，而不会选择延迟或者累积。**\n\n因此如果接收端的接收缓存中出现缺口，那么后续到达的报文就会 重复确认同一个报文。\n\n简单的举个例子：\n\n接收端的缓存中存在的是报文1,2,3,4，且还未发送ACK，如果此时报文6到达，那么接收端就会立马发送一个ACK=5的报文，如果报文5一直没有到达，那么在报文7,8,9到达时，都会发送一个ACK=5的重复确认报文。\n\n**发送方接收到的重复确认报文达到一定阈值(通常为3)之后，就会立马重传确认报文中指定缺失的报文。**\n\n快速重传同时也是拥塞控制中的重要算法。\n\n\n\n### 伪重传的判定和响应\n\n伪重传就是指在没有发生数据丢失时，但仍然进行了重传的情况。\n\n导致伪重传的原因有超时时间误差，包失序，包重复或者ACK丢失等。\n\n判定是否是伪重传的方法有以下集中：\n\n1. **DSACK 重复的SACK**\n\n   对SACK的增强，**可以在第一次SACK块中可以指明接收端中重复收到的报文端序列号。**\n\n2. **Eifel检测算法**\n\n   该算法需要首部中的时间戳选项支持。\n\n   TCP会在重传的的时候记录下重传报文的TSV，当接收到重传报文是会对比回显TSER和保存的TSV对比。\n\n   如果TSER < TSV，则表示是伪重传。\n\nDSACK只能在接收到重传的ACK之后才能判断此次是否是伪重传，而Eifel检测算法是在第一个ACK到达时，就能判断出来，可能此时重传报文都还没传输到接收端。\n\n\n\n### 重复、失序以及重新组包\n\n#### 失序\n\n包失序可能由IP协议或者链路状态引起，因为IP协议不能保证包的有序发送，而且就算是有序发送但是在动态的网络中也不能保证包有序的到达接收端。\n\n上文也有提到过，当接收到一个失序的报文时，接收端会立马响应一个ACK。\n\n少量的失序并不会造成什么影响，但如果失序报文间隔的报文数目超过快速重传的阈值，就会触发重传，还是伪重传。\n\n#### 重复\n\n《TCP/IP详解 卷一》中也说了IP协议可能出现单次包传输多次的情况，因此也就产生了重复问题。\n\n重复次数过多也就会触发重传。\n\n#### 重新组包\n\n当TCP重传报文时，它并不需要完全重传相同的报文，为了提高性能等原因，可能会发送更大的包。\n\n\n\n## 五、窗口管理\n\nTCP协议中采用滑动窗口机制来实现流量控制。<font size=1>(所以窗口管理也是流量控制的关键)</font>\n\n**接受端和发送端各自都会维护一个发送窗口结构和一个接受窗口结构。**\n\n窗口结构以字节为单位\n\n上文也说过TCP首部中窗口字段，是接收端回传给发送端的，并以此作为背压控制发送方的发送窗口大小，这也被称作**通告窗口**。\n\n\n\n### TCP的流量控制\n\n因为TCP的流量控制基本是上基于窗口实现的，所以这块内容我也放到这里了。\n\n**流量控制的的主要目的就是在保持相对较高的传输速率的同时，还要保障收发速度平衡。**\n\nTCP的流量控制机制就是**通过调节ACK数据包中的窗口大小字段实现的**，这种方法在控制发送方速率的同时，也明确了接收方的缓存信息，防止接收方的缓存溢出。\n\n\n\n### 发送端窗口结构\n\n ![1569251203979](/home/chen/.config/Typora/typora-user-images/1569251203979.png)\n\n上图即为发送端的窗口结构。\n\n中间的发送窗口即为活动窗口，TCP会按照顺序发送区间内的报文。\n\n当接收到返回的数据ACK时，活动窗口也随之右移动，左右两边的相对运动就控制着窗口的大小。\n\n窗口的活动有图中三种：\n\n1. 关闭（close）-  活动窗口左边界右移，**当收到ACK数据时会进行此操作，使窗口减小。**\n\n2. 打开（open）-  活动窗口的右边界右移，**当接收的报文被处理时会触发此操作，使窗口增大。**\n\n   程序也需要TCP报文中的窗口大小字段判断窗口具体增大多少。\n\n3. 收缩（shrink）-  活动窗口的右边界左移动，使窗口减小，**TCP的协议中强烈不建议此操作。**\n\n**窗口的左边界明确说明不能左移,因为它代表的是已经被确认的数据**\n\n\n\n### 接收端窗口结构\t\n\n ![1569252451692](/home/chen/.config/Typora/typora-user-images/1569252451692.png)\n\n对比于发送端，接收端的窗口结构简单很多，**对于活动窗口(接收窗口)内部并不进行细分**。\n\n如果到达的报文在**接受已确认或者无法接受**范围，则会被丢弃。\n\n在接受窗口范围内会被缓存，只有在最左边的数据接收到之后整个窗口才能右移。\n\n同样的接受窗口的左边界不能左移。\n\n\n\n### 零窗口问题\n\n当持续收到ACK，但是应用程序并没有及时处理收到的数据(持续关闭，未打开)时，如果左右边界重合，就会出现所谓的**零窗口**现象。\n\n**在接收端窗口扩大重新获得可用窗口空间时，会给发送端发送一个窗口更新报文(window update)，通知其可以继续发送数据。**\n\n**送端也会采用一个持续计时器的机制，当计时器超时就会发送窗口探测报文(window probe)，强制要求接收端响应一个ACK报文(首部中包含窗口大小字段)。**\n\n\n\n### Nagle算法\n\n**Nagle算法通过减少包发送量来增加网络传输的效率。**\n\n**小数据包问题**  -  即TCP数据包中有效负载较低的问题，一个数据包中至少20字节的TCP首部以及20字节的IP首部，而真实数据甚至可能只有1字节，这就是很严重的浪费。\n\nNagle算法规定：**TCP连接中任意时刻都只能存在一个未经确认的小包，此时不能发送长度小于MSS的包，直到所有数据都ACK之后再合并（coalescing）所有待发送的数据包发送。**\n\nNagle算法的规则（可参考tcp_output.c文件里tcp_nagle_check函数注释）：\n\n（1）如果包长度达到MSS，则允许发送；\n\n（2）如果该包含有FIN，则允许发送；\n\n（3）设置了TCP_NODELAY选项，则允许发送；\n\n（4）未设置TCP_CORK选项时，若所有发出去的小数据包（包长度小于MSS）均被确认，则允许发送；\n\n（5）上述条件都未满足，但发生了超时（一般为200ms），则立即发送。\n\n<font size=1>这段照抄的...</font>\n\nNagle算法同时迫使TCP遵循了停止-等待协议，或者说扩展了停止-等待协议。\n\n网络良好的情况下，如果ACK回复的很快，发送端缓存也并没有积累多少数据，此时Nagle算法反而会使整体的传输时间更长。\n\n\n\n### 糊涂窗口综合症（**Silly window syndrome**）\n\n 维基百科百科中对[糊涂窗口综合症](https://w.wikipedia.org/wiki/糊涂窗口综合症)的说明如下：\n\n> **糊涂窗口综合症**（**Silly window syndrome**），亦称**愚蠢窗口综合症**、**愚笨窗口综合症**，是[TCP](https://zh.wikipedia.org/wiki/传输控制协议)[流量控制](https://zh.wikipedia.org/w/index.php?title=Flow_control_(data)&action=edit&redlink=1)实现不良导致的一种[计算机网络](https://zh.wikipedia.org/wiki/计算机网络)问题。当发送程序缓慢地创建数据，接收程序缓慢地消耗数据，或者两者同时存在时，滑动窗口运作会出现严重问题。\n\n**严重问题**就是指的小数据包问题。\n\n举个例子：\n\n若接收端的应用程序处理数据很慢，且每次只处理1个字节的数据，那么接受端的缓存慢慢积累之后就会出现零窗口情况，而处理完1个字节之后缓存有多出了一个字节，此时如果服务端发送窗口更新报文，告诉发送端你只能发送1个字节数据的报文，可想而知效率会有多低。\n\n导致SWS出现的情况有以下几种：\n\n1. 接收端通告窗口较小\n2. 发送端发送的数据段较小\n\n两端都有可能造成SWS，所以也需要同时从两端解决问题，发送端不应该发送小的报文段<font size=1>(此时Nagle算法可以帮助发送端解决部分发送端的问题)</font>，而接收端不应该通告小的窗口。\n\n根据以上情况具体的规则应该按照发送端和接收端区分，\n\n**针对发送端而言应该交由Nagle算法控制发送的时间**，而且只有满足以下条件，报文才能被传输：\n\n1. 长度为MSS的报文可以被传输。\n2. 报文长度大于接收端最大窗口值的一半可以发送\n3. 某一ACK不是目前期盼的(重传?)\n4. 连接禁用了Nagle算法\n\n**针对于接收端来说，不应该通告小的窗口值，在窗口增长至一个全长的报文段(MSS)或者接收端缓存空间的一半之前，不能通告该窗口。**\n\n\n\n## 六、TCP拥塞控制\n\n- 《TCP/IP详解》里该段内容太复杂了，大概的瞥了眼内容，详细的等我以后有空再看吧 。\n\n**拥塞控制的目的就是为了防止过多的包进入链路中，导致链路中的路由器等设备过载而丢弃数据包，引发拥塞。**\n\nTCP协议中，由**发送方维护**一个反映网络传输能力的的变量叫做**拥塞窗口**(cwnd)，所以**发送端的活动窗口实际值为拥塞窗口和通告窗口的较小值。**\n\n拥塞窗口同时\n\n因为拥塞控制是一个全局性的过程，网络传输能力也不仅仅取决于收发端，所以cwnd也无法取到一个准备的值，只能靠一步步的推测。\n\n\n\n### 慢开始\n\n慢开始的目的**是在不清楚网络传输能力的情况下，以少量包慢慢递增的形式进行探测。**\n\n**拥塞窗口大小在每次接收到一个正确的ACK时+1**，所以拥塞窗口大小整体呈指数形式递增。\n\n假设起始的拥塞窗口为n，在每接收到一个ACK之后拥塞窗口加1，所以如果网络良好ACK全部按时收到，那么在第一个RTT时间内拥塞窗口就变为了2n，之后便是4n，以指数增长。\n\n**另外由于接收端的延迟确认机制，所以并不会完全按照指数增长。**\n\n**慢开始的慢并不是增长速度慢，而是初始的拥塞窗口小**，在不清楚网络传输能力的情况下，并不会一下子就设置太大的拥塞窗口。\n\n慢开始的触发条件有以下几个：\n\n1. TCP连接刚初始化\n2. 检测到超时重传(丢包)\n3. 长时间处于空闲状态的连接\n\n另外慢开始还会预先设置一个慢开始门限(ssthresh)：\n\n1. 当cwnd < ssthresh时，执行慢开始算法\n2. 当cwnd > ssthresh时，改用拥塞避免算法\n3. 当cwnd = ssthresh时，慢开始和拥塞避免都可以\n\n慢开始门限并不是固定的，而是会随着时间变化，它代表的是TCP对最佳窗口大小的估计值。\n\n**慢启动状态下，TCP判断是否发生拥塞的依据就是是否有丢包。**\n\n\n\n### 拥塞避免\n\n**拥塞避免的作用就是让cwnd缓慢的线性增长。**\n\n虽然是慢开始，但是指数增长的速度过于快速，所以在达到阈值之后会改用拥塞避免。\n\n**慢开始和拥塞避免最大的区别就在于ACK到达之后cwnd如何变化。**\n\n不论是在慢开始还是用三个避免阶段，只要出现重传的情况(重传就表示TCP判定出现丢包)，TCP就会认为此时的cwnd超出网络传输能力，此时会将慢启动门限(ssthresh)减半。\n\n\n\n### 快恢复\n\n**快恢复**（Fast recovery）是Reno算法新引入的一个阶段，在将丢失的分段重传后，启动一个超时定时器，并等待该丢失分段包的分段确认后，再进入拥塞控制阶段。如果仍然超时，则回到慢启动阶段。\n\n快恢复算法需要**快重传**配合，在接收到三个连续的ACK(触发快速重传时)，快恢复算法会执行如下流程：\n\n1. 慢开始门限减半(ssthresh/2)\n2. 执行快重传算法，设置拥塞窗口(cwnd)为减半门限(ssthresh/2) + 3MSS(也有不加的TCP实现)\n3. 每接受到一个重复ACK报文，拥塞窗口(cwnd)临时+1\n4. 接收到正确的ACK报文时，cwnd被设置到减半门限(ssthresh/2)\n\n\n\n拥塞控制的流程图：\n\n  ![img](https://chenqwwq.oss-cn-hangzhou.aliyuncs.com/note/%E6%8B%A5%E5%A1%9E%E6%8E%A7%E5%88%B6.jpg)\n\n\n\n### TCP Reno和TCP Tahoe\n\nTCP Reno和TCP Tahoe是两种不同的拥塞控制算法。\n\n**两种算法对于拥塞的判断都是根据重传超时或者重复确认。**\n\n如果发生重传超时两种算法的处理逻辑一致，都会将拥塞窗口设置为1MSS，然后重新开始慢开始算法。\n\n但是对于重复确认来说两种算法不同：\n\nTahoe算法在收到超过阈值的重复ACK之后先触发的快速重传算法，**将慢开始门限设置为当前拥塞窗口(cwnd)的一半，拥塞窗口变为1MSS，再重新开始慢开始算法。**\n\nReno不同的在于快速重传之后的处理，首先慢开始门限是减半，变为当前慢开始门限的一半+3MSS，而且跳过慢开始阶段，直接以减半的慢开始门限作为拥塞窗口(cwnd)，直接跑拥塞避免。\n","source":"_posts/tcp协议整理.md","raw":"---\ntitle: TCP 协议整理（残酷残酷\nexcerpt: 包含连接的建立和释放，有限状态机，可靠传输基础，窗口管理，拥塞控制的等 TCP 基本内容\nindex_img: https://chenqwwq.oss-cn-hangzhou.aliyuncs.com/note/TCP%E6%A8%A1%E5%9D%97%E6%95%B4%E7%90%86.png\nbanner_img: https://chenqwwq.oss-cn-hangzhou.aliyuncs.com/note/TCP%E6%A8%A1%E5%9D%97%E6%95%B4%E7%90%86.png\ndate: 2021-10-12 22:10:28\ncategories:\n- 网络\ntags:\n- tcp\n---\n\n\n\n# TCP 协议（一\n\n- 基于《TCP/IP详解 卷一》和谢希仁《计算机网络（第6版）》的简单整理和总结。\n\n\n\nTCP是一种面向连接的，基于字节流的，可靠的传输控制协议。\n\n属于OSI七层模型中的传输层。\n\n## 内容梳理\n\n![1569166769008](https://chenqwwq.oss-cn-hangzhou.aliyuncs.com/note/TCP%E6%A8%A1%E5%9D%97%E6%95%B4%E7%90%86.png)\n\n- TCP的内容模块整理，方便记忆。\n\n## 一、TCP报文首部\n\n![](https://chenqwwq.oss-cn-hangzhou.aliyuncs.com/note/TCP%E9%A6%96%E9%83%A8%E6%A0%BC%E5%BC%8F.png)\n\n\n\nTCP首部大小在20~60字节，其中标准长度为20个字节。\n\n**源端口和目的端口**\n\nTCP的四元组为源IP，源端口，目的IP，目的端口，**TCP首部中的源端口和目的端口结合IP首部中的源和目的IP地址组成了一个连接的四元组。**\n\n**序号/序列号(SEQ)**\n\n在一个TCP连接中唯一标识TCP报文段，是重传机制的重要字段。\n\n自ISN（初始序列号）起，单调递增。\n\n**确认号(ACK)**\n\n接收端发送给发送端，是期望对方下一个报文段的第一个字节的序号。\n\n**值为N的ACK报文表示的是序号在N之前的报文全部已经收到，希望收到序号N的报文。**\n\n**数据偏移**\n\n表示TCP数据部分相对于整个TCP报文段来说的偏移量，可以简单理解为TCP首部的长度。\n\n**控制位**\n\n1. URG - 紧急，置位后首部紧急指针生效\n2. ACK - 确认，置位后确认号生效\n3. PSH - 推送，置位后接收方应尽快给应用程序推送该段数据\n4. RST - 重置，置位后表示该报文为重置报文，取消连接\n5. SYN - 初始化，置位表示为初始化报文，用于初始化TCP连接\n6. FIN - 结束，职位表示当前端结束数据传输工作\n\n**URG之前还有CWR - 拥塞窗口 以及 ECE - ECN回显，但是在一些TCP的实现里面并没有实现这两位。**\n\n**窗口**\n\n**通常在ACK报文中附带，作为接收方对发送方的背压，是影响发送端发送速率的因素之一。**\n\n占16位，单位为字节，所以在没有**窗口缩放**选项的情况下，最大为65535字节。\n\n**校验和**\n\n报文段正确性校验使用占两位。\n\n校验范围包括首部和数据部分，和UDP一样需要再生成12字节的伪首部参与计算。\n\n伪首部包括源和目的IP，保证通信双方的正确性。\n\n**紧急指针**\n\n只有在**URG控制位**置位的情况下生效。\n\n表示紧急报文在**报文段序列号字段**上的正偏移，序列号超过紧急指针的即为正常数据。\n\n零窗口的情况下也可以发送紧急报文。\n\n**选项**\n\n**1. MSS - 最大报文段长度**\n\n连接中每个TCP报文段的**数据字段**的最大长度，不包含首部。\n\n在SYN报文中协商，双方都可以指定自己的MSS，甚至可以不同，默认为536字节。\n\n**2. SACK - 选择确认**\n\n当接收方接受到乱序数据时，就会在接收窗口产生缺口。\n\n设置SACK选项就是为了描述这些缺口信息，使发送方更好，更准确的重传这些缺口数据。\n\n**3. WSCALE/WSOPT - 窗口缩放**\n\n由于首部的**窗口大小**字段仅占16位，所以影响的范围也仅在0~2^16(65535)之间。\n\n该选项就是为了增加窗口大小字段的范围，从16位提升至30位。\n\n该选项只能出现在一个SYN报文段中，而SYN报文仅仅在初始化时通信双方各发一次，由此可知：\n\n**连接建立之后窗口缩放的比例因子是与方向绑定的**，通信双方的比例因子可以不同。\n\n**4. TSOPT - 时间戳选项** \n\n该选项要求发送方在每一个报文中添加2个4字节的单调递增的时间戳数值。\n\n分别是：**TSval/TSV 发送时间戳 以及 TSecr/TSER 时间戳回显**。\n\n该选项的设置可以很好的解决重传的二义性，也能更加精确的计算RTT。\n\n**5. 其他**\n\n另外的还有**认证选项**以及**用户超时选项**等等。\n\n\n\n## 二、连接管理\n\n\n\n### 建立连接\n\n稍微有点常识的程序猿应该都知道，TCP建立连接的时候需要往返发送三个报文。\n\n   ![1568818645296](https://chenqwwq.oss-cn-hangzhou.aliyuncs.com/note/TCP%E6%89%93%E5%BC%80%E8%BF%9E%E6%8E%A5.png)\n\n连接发起者(客户端)会向服务端发送一个**SYN报文**，报文中除了目的端口，还包括ISN(初始序列号)以及部分选项字段。\n\n服务端接受后会回复一个**SYN报文**作为响应，然后将接收到的SEQ+1，作为报文的ACK值，并指明服务端的的初始序列号等信息。\n\n客户端响应一个ACK报文，同样的将服务端SYN报文中的SEQ+1作为ACK值。\n\n#### 为什么要三次握手\n\n首先明确，**三次握手的主要目的是交换双方的ISN以及选项。**\n\n这些字段，例如是否启用SACK等都将是数据传输时的重要属性。\n\n交换双方的信息至少需要两次握手，而第三次握手则是为了**防止已失效的连接请求又被转发到了服务端**。\n\n意思就是如果客户端在收到服务端的SYN+ACK报文时就建立一个连接，那么在重传时将会出现先后多条连接的情况。\n\n我感觉可能防止建立重复连接的功能可能是意外之喜。\n\n另外**可以发现SYN报文也占用了一个序列号。**\n\n\n\n### 初始序列号 - ISN\n\n在发送用于建立连接的SYN报文时，通信的双方都会选择一个初始化序列号。\n\n每个连接都会有不同的初始化序列号。\n\n《TCP/IP详解》原文13.2章节:**此外，为了确认客户端的SYN，服务器将其包含的ISN(c)数值加1后作为返回的ACK数值。因此，每发送一个SYN，序列号都会自动加1。这样如果出现丢失的情况，该SYN段将会重传**。\n\nwireshark测试下发现，客户端SYN报文的SEQ（也就是ISN）在重传时也不会改变。\n\n\n\n### 关闭连接\n\n相对来说关闭连接的四次挥手就好理解多了。\n\n   ![1568820312811](https://chenqwwq.oss-cn-hangzhou.aliyuncs.com/note/TCP%E5%85%B3%E9%97%AD%E8%BF%9E%E6%8E%A5.png)\n\n1. 连接的主动关闭方，发送一个FIN。\n2. 被动方回复一个ACK。\n3. 被动方主动发送一个FIN。\n4. 主动方回复一个ACK\n\n#### 为什么要四次挥手\n\n和三次握手的区别，四次握手中被动关闭方的FIN报文和ACK拆开了，而三次握手的SYN报文和ACK是一起发出的。\n\n至于为什么要拆开，我的理解是因为**半关闭状态**的存在，作为一个全双工的协议，连接的双方都可以互相发送数据。\n\n半关闭状态是指TCP连接双方，有一端发送了FIN，而另一端还在继续传输数据，此时的主动关闭方仍然会对接收的数据作ACK的响应。 \n\n一方发送了FIN报文就表示己方的数据发送完毕了，**因此就分别需要两个FIN报文和两个ACK才足以完整的关闭一条(全双工)连接。**\n\n\n\n\n\n### 同时打开和关闭\n\n#### 同时打开\n\n通信双方在收到对方的SYN报文之前，都先发送了SYN报文，此时这种情况就叫做**同时打开**。\n\n算是一种很少出现的特殊情况，但是TCP也能支持，并建立一条正常的连接。\n\n    ![](https://chenbxxx.oss-cn-beijing.aliyuncs.com/TCP同时打开.png)\n\n<font size=\"1\">我的画图软件不能支持斜线，只能靠盗图了</font>\n\n如图可见，通信的双方同时向对方发送一个SYN，并附带上自己的ISN(SEQ)。\n\n接收方接受之后同样也同时作为被动发起方恢复一个ACK。\n\n**此时通信双方即为客户端也为服务端，状态的变化一致，且回复的ACK中ISN与SYN中的一致。**\n\n通信双方经历了相同的状态变更:`SYN_SENT` -> `SYN_RCVD` -> `ESTABLISHED`\n\n<font size=\"2\">我感觉TCP内部的实现中应该也是以SEQ作为参考依据。</font>\n\n#### 同时关闭 \n\n  ![](https://chenqwwq.oss-cn-hangzhou.aliyuncs.com/note/TCP%E5%90%8C%E6%97%B6%E5%85%B3%E9%97%AD.png)\n\n和同时打开差不多，**同时关闭是在收到对方的FIN之前，向对方发送了自己的FIN报文。**\n\n同样的通信双方经历了相同的状态变更:`FIN_WAIT_1` -> `CLOSING` -> `TIME_WAIT`\n\n可以看到双方是都需要等待一个2MSL的。\n\n\n\n### 半打开，半关闭，半连接\n\n以上是TCP连接中的三种特殊状态，就简单的叙述一下吧。\n\n半连接是指**服务端发送了SYN+ACK报文之后，等待客户端的ACK报文的这段时间**\n\n半连接有类似的攻击手段:大量的请求发送到服务端但是永远不回复最后的ACK，导致服务端存在大量的半连接。\n\n半打开是指**如果一方已经关闭或异常终止连接，而另一方却不知道。**\n\n半关闭上面也有提到过，**通信的一方主动发送FIN之后表示本方不会再主动发送任何数据，但仍然可以接受对方的数据并响应的情况。**\n\n\n\n## 三、TCP的有限状态机\n\n![](https://chenqwwq.oss-cn-hangzhou.aliyuncs.com/note/TCP%E6%9C%89%E9%99%90%E7%8A%B6%E6%80%81%E6%9C%BA.png)\n\n上图即为《TCP/IP详解 卷一》中的原图。\n\n图中基本包含了全部的TCP连接状态变更，包括典型、非典型。\n\n\n\n### ESTABLISHED\n\n`ESTABLISHED`状态是通信双方正常传输数据的状态。\n\n作为三次握手的终点和四次挥手的起点。\n\n\n\n### TIME_WAIT状态\n\n**`TIME_WAIT`状态是主动关闭方在连接关闭的最后阶段必须经历的。**\n\n在**WAIT_TIME**状态下，主动关闭方会判断本次的四元组不可用，所以此时就算对端重新请求SYN（接收到ACK释放连接之后），也会被拒绝。\n\n进入该状态时，**TCP会设置时间等待计时器(TIME_WAIT timer)，并等待2MSL的时间才会真正的释放连接，RFC793中建议为2min。**\n\nMSL(Maximum Segment Lifetime)，也可以称为最大报文生存时间，**是报文在所有链路中存在的最大时间，超过就会被丢弃。**\n\n这么做的目的有以下两个：\n\n1. 为了保证最后的ACK能够到达被动关闭方。\n\n从有限状态机的图中也可以看到，被动关闭方的连接真正释放是在收到最后一个ACK之后，所以必须要保证ACK的正确发送。\n\n**等待2MSL能够有效避免最终的ACK丢失的情况，ACK不会主动重传，但是对端的FIN会重传直到收到正确的ACK为止。**\n\n2MSL可以粗略的看做是己方ACK发送的时间加上对方FIN重传的时间。\n\n当一个报连接处于`TIME_WAIT`状态时，任何延迟到达的报文都会被丢弃，只接收FIN报文。\n\n另外**TIME_WAIT**的状态是从最后一个ACK发送开始，所以重新响应ACK之后，**TIME_WAIT**也会重新计时。\n\n2. 保证相同四元组额前后连接报文不混淆\n\n**等待2MSL，就可以使本次连接的报文在链路中全部消失。**\n\n期间TCP会将本次四元组定义为不可用，阻止重连。\n\n如果不等待，相同四元组的连接如果重连，就有可能导致旧报文发送到新连接的情况，造成数据混乱。\n\n2MSL是相对保守的处理方式，在ISN能超过上一次连接的最大序列号或者启用了时间戳选项的时候，感觉上可以跳过。\n\n\n\n### CLOSING 状态\n\n`CLOSING`状态是TCP的非典型状态<font size=2>(一般情况下不会出现）</font>。\n\n只有在上文提到过地**同时关闭**的情况下才会出现，同时关闭的通信双方在接收到对方的FIN，在发送ACK之后进入到`CLOSING`状态。\n\n处于`CLOSING`状态下的通信双方在接收到对方的ACK之后，都会进入`TIME_WAIT`状态。\n\n\n\n## 四、TCP的重传机制\n\nTCP协议往下就是网络层的IP协议，但是IP协议并不提供任何可靠传输的服务，所以我们可以简单认为TCP所处链路都是不可靠的。\n\n但是TCP介绍中也说了，它提供的是**可靠的传输服务**，因此也就要求TCP协议自身来补足IP协议中的不可靠部分。\n\n\n\n### 可靠传输的基础\n\n**TCP的重传机制是基于`连续ARQ协议`实现的。**\n\n维基百科对`ARQ`的解释如下：\n\n> ARQ协议，即自动重传请求（Automatic Repeat-reQuest），是OSI模型中数据链路层和传输层的错误纠正协议之一。它通过使用确认和超时这两个机制，在不可靠服务的基础上实现可靠的信息传输。如果发送方在发送后一段时间之内没有收到确认帧，它通常会重新发送。\n\n#### 停止等待ARQ协议\n\n ![](https://chenqwwq.oss-cn-hangzhou.aliyuncs.com/note/%E5%81%9C%E6%AD%A2%E7%AD%89%E5%BE%85ARQ.png)\n\n**一个分组一个分组的发送，在收到确认之前不会发送下一个分组，如果出现超时就重传丢失分组。**\n\n该协议能够完全保证通信的可靠新，但是显而易见的**该协议的利用率很成问题**，在发送完一个分组到确认到达的这段时间信道都是空闲的。\n\n即使整个链路十分可靠，依旧要等待确认信息的到达。\n\n而且判断分组是否丢失的算法就是**在一定时间内，是否收到接受的确认信息**，过于粗暴很容易出现伪重传的情况。\n\n#### 连续ARQ协议\n\n`连续ARQ协议`可以说是对`停止等待ARQ协议`的优化。\n\n**在停止等待ARQ协议之上，每次发送多个报文，并等待这些分组的确认信息**\n\n ![](https://chenqwwq.oss-cn-hangzhou.aliyuncs.com/note/%E8%BF%9E%E7%BB%ADARQ.png)\n\n连续ARQ协议虽然提高了信道利用率，但是仍然会存在**回退N**等问题。\n\n\n\n### 确认机制\n\n**确认机制指的就是接收端在收到一个正确的报文时，会给发送端回传一个ACK，表明报文已经到达。**\n\n#### 延迟确认/累计确认机制\n\n**接收端在收到数据之后，并不会立马回传ACK，而是会延迟一定的时间(延迟确认)，发送的时候会以最大有序报文的序号作为ACK的数值(累计确认)。**\n\n这样的目的很明确就是**减少ACK报文的数量，降低ACK造成的网络负担**。\n\n#### 选择确认SACK\n\n选择确认是TCP首部中的选项，启用SACK功能需要通信双方事先确认，之前也说过SACK字段是为了**描述接收端的接收缺口，帮助发送方更加准确的重传丢失报文。**\n\n可以在一个ACK报文中，指明多个缺口信息(最多三个)，普通的ACK报文可以看做是单个的缺口信息。\n\n\n\n### 超时重传\n\n**超时重传又可以称为基于计时器的重传。**\n\nTCP每发送一个报文，都会设定一个**重传计时器**，若在计时器超时时都没有收到确认消息，就会触发重传操作。\n\n超时重传的整体逻辑并不复杂，但是**超时时间的选择**却是TCP最难的问题之一。\n\n简单超时时间设置，比如SYN的重传 - **每次SYN重传的超时时间都是上一次的简单加倍**，比如说上次过了2s之后重传报文，这次就应该等待4s或者6s，这种方式称为**二进制指数退避**。\n\n复杂一点的设置就会根据报文的RTT推算RTO。\n\n> RTT （报文段往返时间）- 从报文发出到接受到该报文的ACK所花费的总时间。\n>\n> RTO （超时重传时间）- 从报文发出到重传报文所花费的时间，也就是所谓的重传超时时间。\n\n<font size=1>这里并不是很懂，就先空着了</font>\n\n\n\n### 快速重传\n\n快速重传是基于接收端反馈信息的重传模式。\n\n**首先在TCP中，接收方如果收到一个失序的报文段就会立即发送重复的ACK，而不会选择延迟或者累积。**\n\n因此如果接收端的接收缓存中出现缺口，那么后续到达的报文就会 重复确认同一个报文。\n\n简单的举个例子：\n\n接收端的缓存中存在的是报文1,2,3,4，且还未发送ACK，如果此时报文6到达，那么接收端就会立马发送一个ACK=5的报文，如果报文5一直没有到达，那么在报文7,8,9到达时，都会发送一个ACK=5的重复确认报文。\n\n**发送方接收到的重复确认报文达到一定阈值(通常为3)之后，就会立马重传确认报文中指定缺失的报文。**\n\n快速重传同时也是拥塞控制中的重要算法。\n\n\n\n### 伪重传的判定和响应\n\n伪重传就是指在没有发生数据丢失时，但仍然进行了重传的情况。\n\n导致伪重传的原因有超时时间误差，包失序，包重复或者ACK丢失等。\n\n判定是否是伪重传的方法有以下集中：\n\n1. **DSACK 重复的SACK**\n\n   对SACK的增强，**可以在第一次SACK块中可以指明接收端中重复收到的报文端序列号。**\n\n2. **Eifel检测算法**\n\n   该算法需要首部中的时间戳选项支持。\n\n   TCP会在重传的的时候记录下重传报文的TSV，当接收到重传报文是会对比回显TSER和保存的TSV对比。\n\n   如果TSER < TSV，则表示是伪重传。\n\nDSACK只能在接收到重传的ACK之后才能判断此次是否是伪重传，而Eifel检测算法是在第一个ACK到达时，就能判断出来，可能此时重传报文都还没传输到接收端。\n\n\n\n### 重复、失序以及重新组包\n\n#### 失序\n\n包失序可能由IP协议或者链路状态引起，因为IP协议不能保证包的有序发送，而且就算是有序发送但是在动态的网络中也不能保证包有序的到达接收端。\n\n上文也有提到过，当接收到一个失序的报文时，接收端会立马响应一个ACK。\n\n少量的失序并不会造成什么影响，但如果失序报文间隔的报文数目超过快速重传的阈值，就会触发重传，还是伪重传。\n\n#### 重复\n\n《TCP/IP详解 卷一》中也说了IP协议可能出现单次包传输多次的情况，因此也就产生了重复问题。\n\n重复次数过多也就会触发重传。\n\n#### 重新组包\n\n当TCP重传报文时，它并不需要完全重传相同的报文，为了提高性能等原因，可能会发送更大的包。\n\n\n\n## 五、窗口管理\n\nTCP协议中采用滑动窗口机制来实现流量控制。<font size=1>(所以窗口管理也是流量控制的关键)</font>\n\n**接受端和发送端各自都会维护一个发送窗口结构和一个接受窗口结构。**\n\n窗口结构以字节为单位\n\n上文也说过TCP首部中窗口字段，是接收端回传给发送端的，并以此作为背压控制发送方的发送窗口大小，这也被称作**通告窗口**。\n\n\n\n### TCP的流量控制\n\n因为TCP的流量控制基本是上基于窗口实现的，所以这块内容我也放到这里了。\n\n**流量控制的的主要目的就是在保持相对较高的传输速率的同时，还要保障收发速度平衡。**\n\nTCP的流量控制机制就是**通过调节ACK数据包中的窗口大小字段实现的**，这种方法在控制发送方速率的同时，也明确了接收方的缓存信息，防止接收方的缓存溢出。\n\n\n\n### 发送端窗口结构\n\n ![1569251203979](/home/chen/.config/Typora/typora-user-images/1569251203979.png)\n\n上图即为发送端的窗口结构。\n\n中间的发送窗口即为活动窗口，TCP会按照顺序发送区间内的报文。\n\n当接收到返回的数据ACK时，活动窗口也随之右移动，左右两边的相对运动就控制着窗口的大小。\n\n窗口的活动有图中三种：\n\n1. 关闭（close）-  活动窗口左边界右移，**当收到ACK数据时会进行此操作，使窗口减小。**\n\n2. 打开（open）-  活动窗口的右边界右移，**当接收的报文被处理时会触发此操作，使窗口增大。**\n\n   程序也需要TCP报文中的窗口大小字段判断窗口具体增大多少。\n\n3. 收缩（shrink）-  活动窗口的右边界左移动，使窗口减小，**TCP的协议中强烈不建议此操作。**\n\n**窗口的左边界明确说明不能左移,因为它代表的是已经被确认的数据**\n\n\n\n### 接收端窗口结构\t\n\n ![1569252451692](/home/chen/.config/Typora/typora-user-images/1569252451692.png)\n\n对比于发送端，接收端的窗口结构简单很多，**对于活动窗口(接收窗口)内部并不进行细分**。\n\n如果到达的报文在**接受已确认或者无法接受**范围，则会被丢弃。\n\n在接受窗口范围内会被缓存，只有在最左边的数据接收到之后整个窗口才能右移。\n\n同样的接受窗口的左边界不能左移。\n\n\n\n### 零窗口问题\n\n当持续收到ACK，但是应用程序并没有及时处理收到的数据(持续关闭，未打开)时，如果左右边界重合，就会出现所谓的**零窗口**现象。\n\n**在接收端窗口扩大重新获得可用窗口空间时，会给发送端发送一个窗口更新报文(window update)，通知其可以继续发送数据。**\n\n**送端也会采用一个持续计时器的机制，当计时器超时就会发送窗口探测报文(window probe)，强制要求接收端响应一个ACK报文(首部中包含窗口大小字段)。**\n\n\n\n### Nagle算法\n\n**Nagle算法通过减少包发送量来增加网络传输的效率。**\n\n**小数据包问题**  -  即TCP数据包中有效负载较低的问题，一个数据包中至少20字节的TCP首部以及20字节的IP首部，而真实数据甚至可能只有1字节，这就是很严重的浪费。\n\nNagle算法规定：**TCP连接中任意时刻都只能存在一个未经确认的小包，此时不能发送长度小于MSS的包，直到所有数据都ACK之后再合并（coalescing）所有待发送的数据包发送。**\n\nNagle算法的规则（可参考tcp_output.c文件里tcp_nagle_check函数注释）：\n\n（1）如果包长度达到MSS，则允许发送；\n\n（2）如果该包含有FIN，则允许发送；\n\n（3）设置了TCP_NODELAY选项，则允许发送；\n\n（4）未设置TCP_CORK选项时，若所有发出去的小数据包（包长度小于MSS）均被确认，则允许发送；\n\n（5）上述条件都未满足，但发生了超时（一般为200ms），则立即发送。\n\n<font size=1>这段照抄的...</font>\n\nNagle算法同时迫使TCP遵循了停止-等待协议，或者说扩展了停止-等待协议。\n\n网络良好的情况下，如果ACK回复的很快，发送端缓存也并没有积累多少数据，此时Nagle算法反而会使整体的传输时间更长。\n\n\n\n### 糊涂窗口综合症（**Silly window syndrome**）\n\n 维基百科百科中对[糊涂窗口综合症](https://w.wikipedia.org/wiki/糊涂窗口综合症)的说明如下：\n\n> **糊涂窗口综合症**（**Silly window syndrome**），亦称**愚蠢窗口综合症**、**愚笨窗口综合症**，是[TCP](https://zh.wikipedia.org/wiki/传输控制协议)[流量控制](https://zh.wikipedia.org/w/index.php?title=Flow_control_(data)&action=edit&redlink=1)实现不良导致的一种[计算机网络](https://zh.wikipedia.org/wiki/计算机网络)问题。当发送程序缓慢地创建数据，接收程序缓慢地消耗数据，或者两者同时存在时，滑动窗口运作会出现严重问题。\n\n**严重问题**就是指的小数据包问题。\n\n举个例子：\n\n若接收端的应用程序处理数据很慢，且每次只处理1个字节的数据，那么接受端的缓存慢慢积累之后就会出现零窗口情况，而处理完1个字节之后缓存有多出了一个字节，此时如果服务端发送窗口更新报文，告诉发送端你只能发送1个字节数据的报文，可想而知效率会有多低。\n\n导致SWS出现的情况有以下几种：\n\n1. 接收端通告窗口较小\n2. 发送端发送的数据段较小\n\n两端都有可能造成SWS，所以也需要同时从两端解决问题，发送端不应该发送小的报文段<font size=1>(此时Nagle算法可以帮助发送端解决部分发送端的问题)</font>，而接收端不应该通告小的窗口。\n\n根据以上情况具体的规则应该按照发送端和接收端区分，\n\n**针对发送端而言应该交由Nagle算法控制发送的时间**，而且只有满足以下条件，报文才能被传输：\n\n1. 长度为MSS的报文可以被传输。\n2. 报文长度大于接收端最大窗口值的一半可以发送\n3. 某一ACK不是目前期盼的(重传?)\n4. 连接禁用了Nagle算法\n\n**针对于接收端来说，不应该通告小的窗口值，在窗口增长至一个全长的报文段(MSS)或者接收端缓存空间的一半之前，不能通告该窗口。**\n\n\n\n## 六、TCP拥塞控制\n\n- 《TCP/IP详解》里该段内容太复杂了，大概的瞥了眼内容，详细的等我以后有空再看吧 。\n\n**拥塞控制的目的就是为了防止过多的包进入链路中，导致链路中的路由器等设备过载而丢弃数据包，引发拥塞。**\n\nTCP协议中，由**发送方维护**一个反映网络传输能力的的变量叫做**拥塞窗口**(cwnd)，所以**发送端的活动窗口实际值为拥塞窗口和通告窗口的较小值。**\n\n拥塞窗口同时\n\n因为拥塞控制是一个全局性的过程，网络传输能力也不仅仅取决于收发端，所以cwnd也无法取到一个准备的值，只能靠一步步的推测。\n\n\n\n### 慢开始\n\n慢开始的目的**是在不清楚网络传输能力的情况下，以少量包慢慢递增的形式进行探测。**\n\n**拥塞窗口大小在每次接收到一个正确的ACK时+1**，所以拥塞窗口大小整体呈指数形式递增。\n\n假设起始的拥塞窗口为n，在每接收到一个ACK之后拥塞窗口加1，所以如果网络良好ACK全部按时收到，那么在第一个RTT时间内拥塞窗口就变为了2n，之后便是4n，以指数增长。\n\n**另外由于接收端的延迟确认机制，所以并不会完全按照指数增长。**\n\n**慢开始的慢并不是增长速度慢，而是初始的拥塞窗口小**，在不清楚网络传输能力的情况下，并不会一下子就设置太大的拥塞窗口。\n\n慢开始的触发条件有以下几个：\n\n1. TCP连接刚初始化\n2. 检测到超时重传(丢包)\n3. 长时间处于空闲状态的连接\n\n另外慢开始还会预先设置一个慢开始门限(ssthresh)：\n\n1. 当cwnd < ssthresh时，执行慢开始算法\n2. 当cwnd > ssthresh时，改用拥塞避免算法\n3. 当cwnd = ssthresh时，慢开始和拥塞避免都可以\n\n慢开始门限并不是固定的，而是会随着时间变化，它代表的是TCP对最佳窗口大小的估计值。\n\n**慢启动状态下，TCP判断是否发生拥塞的依据就是是否有丢包。**\n\n\n\n### 拥塞避免\n\n**拥塞避免的作用就是让cwnd缓慢的线性增长。**\n\n虽然是慢开始，但是指数增长的速度过于快速，所以在达到阈值之后会改用拥塞避免。\n\n**慢开始和拥塞避免最大的区别就在于ACK到达之后cwnd如何变化。**\n\n不论是在慢开始还是用三个避免阶段，只要出现重传的情况(重传就表示TCP判定出现丢包)，TCP就会认为此时的cwnd超出网络传输能力，此时会将慢启动门限(ssthresh)减半。\n\n\n\n### 快恢复\n\n**快恢复**（Fast recovery）是Reno算法新引入的一个阶段，在将丢失的分段重传后，启动一个超时定时器，并等待该丢失分段包的分段确认后，再进入拥塞控制阶段。如果仍然超时，则回到慢启动阶段。\n\n快恢复算法需要**快重传**配合，在接收到三个连续的ACK(触发快速重传时)，快恢复算法会执行如下流程：\n\n1. 慢开始门限减半(ssthresh/2)\n2. 执行快重传算法，设置拥塞窗口(cwnd)为减半门限(ssthresh/2) + 3MSS(也有不加的TCP实现)\n3. 每接受到一个重复ACK报文，拥塞窗口(cwnd)临时+1\n4. 接收到正确的ACK报文时，cwnd被设置到减半门限(ssthresh/2)\n\n\n\n拥塞控制的流程图：\n\n  ![img](https://chenqwwq.oss-cn-hangzhou.aliyuncs.com/note/%E6%8B%A5%E5%A1%9E%E6%8E%A7%E5%88%B6.jpg)\n\n\n\n### TCP Reno和TCP Tahoe\n\nTCP Reno和TCP Tahoe是两种不同的拥塞控制算法。\n\n**两种算法对于拥塞的判断都是根据重传超时或者重复确认。**\n\n如果发生重传超时两种算法的处理逻辑一致，都会将拥塞窗口设置为1MSS，然后重新开始慢开始算法。\n\n但是对于重复确认来说两种算法不同：\n\nTahoe算法在收到超过阈值的重复ACK之后先触发的快速重传算法，**将慢开始门限设置为当前拥塞窗口(cwnd)的一半，拥塞窗口变为1MSS，再重新开始慢开始算法。**\n\nReno不同的在于快速重传之后的处理，首先慢开始门限是减半，变为当前慢开始门限的一半+3MSS，而且跳过慢开始阶段，直接以减半的慢开始门限作为拥塞窗口(cwnd)，直接跑拥塞避免。\n","slug":"tcp协议整理","published":1,"updated":"2022-03-23T03:21:00.343Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clk87sjyi000awnbvcwhj07bp","content":"<h1 id=\"TCP-协议（一\"><a href=\"#TCP-协议（一\" class=\"headerlink\" title=\"TCP 协议（一\"></a>TCP 协议（一</h1><ul>\n<li>基于《TCP&#x2F;IP详解 卷一》和谢希仁《计算机网络（第6版）》的简单整理和总结。</li>\n</ul>\n<p>TCP是一种面向连接的，基于字节流的，可靠的传输控制协议。</p>\n<p>属于OSI七层模型中的传输层。</p>\n<h2 id=\"内容梳理\"><a href=\"#内容梳理\" class=\"headerlink\" title=\"内容梳理\"></a>内容梳理</h2><p><img src=\"https://chenqwwq.oss-cn-hangzhou.aliyuncs.com/note/TCP%E6%A8%A1%E5%9D%97%E6%95%B4%E7%90%86.png\" alt=\"1569166769008\"></p>\n<ul>\n<li>TCP的内容模块整理，方便记忆。</li>\n</ul>\n<h2 id=\"一、TCP报文首部\"><a href=\"#一、TCP报文首部\" class=\"headerlink\" title=\"一、TCP报文首部\"></a>一、TCP报文首部</h2><p><img src=\"https://chenqwwq.oss-cn-hangzhou.aliyuncs.com/note/TCP%E9%A6%96%E9%83%A8%E6%A0%BC%E5%BC%8F.png\"></p>\n<p>TCP首部大小在20~60字节，其中标准长度为20个字节。</p>\n<p><strong>源端口和目的端口</strong></p>\n<p>TCP的四元组为源IP，源端口，目的IP，目的端口，<strong>TCP首部中的源端口和目的端口结合IP首部中的源和目的IP地址组成了一个连接的四元组。</strong></p>\n<p><strong>序号&#x2F;序列号(SEQ)</strong></p>\n<p>在一个TCP连接中唯一标识TCP报文段，是重传机制的重要字段。</p>\n<p>自ISN（初始序列号）起，单调递增。</p>\n<p><strong>确认号(ACK)</strong></p>\n<p>接收端发送给发送端，是期望对方下一个报文段的第一个字节的序号。</p>\n<p><strong>值为N的ACK报文表示的是序号在N之前的报文全部已经收到，希望收到序号N的报文。</strong></p>\n<p><strong>数据偏移</strong></p>\n<p>表示TCP数据部分相对于整个TCP报文段来说的偏移量，可以简单理解为TCP首部的长度。</p>\n<p><strong>控制位</strong></p>\n<ol>\n<li>URG - 紧急，置位后首部紧急指针生效</li>\n<li>ACK - 确认，置位后确认号生效</li>\n<li>PSH - 推送，置位后接收方应尽快给应用程序推送该段数据</li>\n<li>RST - 重置，置位后表示该报文为重置报文，取消连接</li>\n<li>SYN - 初始化，置位表示为初始化报文，用于初始化TCP连接</li>\n<li>FIN - 结束，职位表示当前端结束数据传输工作</li>\n</ol>\n<p><strong>URG之前还有CWR - 拥塞窗口 以及 ECE - ECN回显，但是在一些TCP的实现里面并没有实现这两位。</strong></p>\n<p><strong>窗口</strong></p>\n<p><strong>通常在ACK报文中附带，作为接收方对发送方的背压，是影响发送端发送速率的因素之一。</strong></p>\n<p>占16位，单位为字节，所以在没有<strong>窗口缩放</strong>选项的情况下，最大为65535字节。</p>\n<p><strong>校验和</strong></p>\n<p>报文段正确性校验使用占两位。</p>\n<p>校验范围包括首部和数据部分，和UDP一样需要再生成12字节的伪首部参与计算。</p>\n<p>伪首部包括源和目的IP，保证通信双方的正确性。</p>\n<p><strong>紧急指针</strong></p>\n<p>只有在<strong>URG控制位</strong>置位的情况下生效。</p>\n<p>表示紧急报文在<strong>报文段序列号字段</strong>上的正偏移，序列号超过紧急指针的即为正常数据。</p>\n<p>零窗口的情况下也可以发送紧急报文。</p>\n<p><strong>选项</strong></p>\n<p><strong>1. MSS - 最大报文段长度</strong></p>\n<p>连接中每个TCP报文段的<strong>数据字段</strong>的最大长度，不包含首部。</p>\n<p>在SYN报文中协商，双方都可以指定自己的MSS，甚至可以不同，默认为536字节。</p>\n<p><strong>2. SACK - 选择确认</strong></p>\n<p>当接收方接受到乱序数据时，就会在接收窗口产生缺口。</p>\n<p>设置SACK选项就是为了描述这些缺口信息，使发送方更好，更准确的重传这些缺口数据。</p>\n<p><strong>3. WSCALE&#x2F;WSOPT - 窗口缩放</strong></p>\n<p>由于首部的<strong>窗口大小</strong>字段仅占16位，所以影响的范围也仅在0~2^16(65535)之间。</p>\n<p>该选项就是为了增加窗口大小字段的范围，从16位提升至30位。</p>\n<p>该选项只能出现在一个SYN报文段中，而SYN报文仅仅在初始化时通信双方各发一次，由此可知：</p>\n<p><strong>连接建立之后窗口缩放的比例因子是与方向绑定的</strong>，通信双方的比例因子可以不同。</p>\n<p><strong>4. TSOPT - 时间戳选项</strong> </p>\n<p>该选项要求发送方在每一个报文中添加2个4字节的单调递增的时间戳数值。</p>\n<p>分别是：<strong>TSval&#x2F;TSV 发送时间戳 以及 TSecr&#x2F;TSER 时间戳回显</strong>。</p>\n<p>该选项的设置可以很好的解决重传的二义性，也能更加精确的计算RTT。</p>\n<p><strong>5. 其他</strong></p>\n<p>另外的还有<strong>认证选项</strong>以及<strong>用户超时选项</strong>等等。</p>\n<h2 id=\"二、连接管理\"><a href=\"#二、连接管理\" class=\"headerlink\" title=\"二、连接管理\"></a>二、连接管理</h2><h3 id=\"建立连接\"><a href=\"#建立连接\" class=\"headerlink\" title=\"建立连接\"></a>建立连接</h3><p>稍微有点常识的程序猿应该都知道，TCP建立连接的时候需要往返发送三个报文。</p>\n<p>   <img src=\"https://chenqwwq.oss-cn-hangzhou.aliyuncs.com/note/TCP%E6%89%93%E5%BC%80%E8%BF%9E%E6%8E%A5.png\" alt=\"1568818645296\"></p>\n<p>连接发起者(客户端)会向服务端发送一个<strong>SYN报文</strong>，报文中除了目的端口，还包括ISN(初始序列号)以及部分选项字段。</p>\n<p>服务端接受后会回复一个<strong>SYN报文</strong>作为响应，然后将接收到的SEQ+1，作为报文的ACK值，并指明服务端的的初始序列号等信息。</p>\n<p>客户端响应一个ACK报文，同样的将服务端SYN报文中的SEQ+1作为ACK值。</p>\n<h4 id=\"为什么要三次握手\"><a href=\"#为什么要三次握手\" class=\"headerlink\" title=\"为什么要三次握手\"></a>为什么要三次握手</h4><p>首先明确，<strong>三次握手的主要目的是交换双方的ISN以及选项。</strong></p>\n<p>这些字段，例如是否启用SACK等都将是数据传输时的重要属性。</p>\n<p>交换双方的信息至少需要两次握手，而第三次握手则是为了<strong>防止已失效的连接请求又被转发到了服务端</strong>。</p>\n<p>意思就是如果客户端在收到服务端的SYN+ACK报文时就建立一个连接，那么在重传时将会出现先后多条连接的情况。</p>\n<p>我感觉可能防止建立重复连接的功能可能是意外之喜。</p>\n<p>另外<strong>可以发现SYN报文也占用了一个序列号。</strong></p>\n<h3 id=\"初始序列号-ISN\"><a href=\"#初始序列号-ISN\" class=\"headerlink\" title=\"初始序列号 - ISN\"></a>初始序列号 - ISN</h3><p>在发送用于建立连接的SYN报文时，通信的双方都会选择一个初始化序列号。</p>\n<p>每个连接都会有不同的初始化序列号。</p>\n<p>《TCP&#x2F;IP详解》原文13.2章节:<strong>此外，为了确认客户端的SYN，服务器将其包含的ISN(c)数值加1后作为返回的ACK数值。因此，每发送一个SYN，序列号都会自动加1。这样如果出现丢失的情况，该SYN段将会重传</strong>。</p>\n<p>wireshark测试下发现，客户端SYN报文的SEQ（也就是ISN）在重传时也不会改变。</p>\n<h3 id=\"关闭连接\"><a href=\"#关闭连接\" class=\"headerlink\" title=\"关闭连接\"></a>关闭连接</h3><p>相对来说关闭连接的四次挥手就好理解多了。</p>\n<p>   <img src=\"https://chenqwwq.oss-cn-hangzhou.aliyuncs.com/note/TCP%E5%85%B3%E9%97%AD%E8%BF%9E%E6%8E%A5.png\" alt=\"1568820312811\"></p>\n<ol>\n<li>连接的主动关闭方，发送一个FIN。</li>\n<li>被动方回复一个ACK。</li>\n<li>被动方主动发送一个FIN。</li>\n<li>主动方回复一个ACK</li>\n</ol>\n<h4 id=\"为什么要四次挥手\"><a href=\"#为什么要四次挥手\" class=\"headerlink\" title=\"为什么要四次挥手\"></a>为什么要四次挥手</h4><p>和三次握手的区别，四次握手中被动关闭方的FIN报文和ACK拆开了，而三次握手的SYN报文和ACK是一起发出的。</p>\n<p>至于为什么要拆开，我的理解是因为<strong>半关闭状态</strong>的存在，作为一个全双工的协议，连接的双方都可以互相发送数据。</p>\n<p>半关闭状态是指TCP连接双方，有一端发送了FIN，而另一端还在继续传输数据，此时的主动关闭方仍然会对接收的数据作ACK的响应。 </p>\n<p>一方发送了FIN报文就表示己方的数据发送完毕了，<strong>因此就分别需要两个FIN报文和两个ACK才足以完整的关闭一条(全双工)连接。</strong></p>\n<h3 id=\"同时打开和关闭\"><a href=\"#同时打开和关闭\" class=\"headerlink\" title=\"同时打开和关闭\"></a>同时打开和关闭</h3><h4 id=\"同时打开\"><a href=\"#同时打开\" class=\"headerlink\" title=\"同时打开\"></a>同时打开</h4><p>通信双方在收到对方的SYN报文之前，都先发送了SYN报文，此时这种情况就叫做<strong>同时打开</strong>。</p>\n<p>算是一种很少出现的特殊情况，但是TCP也能支持，并建立一条正常的连接。</p>\n<div class=\"hljs code-wrapper\"><pre><code>![](https://chenbxxx.oss-cn-beijing.aliyuncs.com/TCP同时打开.png)\n</code></pre></div>\n<p><font size=\"1\">我的画图软件不能支持斜线，只能靠盗图了</font></p>\n<p>如图可见，通信的双方同时向对方发送一个SYN，并附带上自己的ISN(SEQ)。</p>\n<p>接收方接受之后同样也同时作为被动发起方恢复一个ACK。</p>\n<p><strong>此时通信双方即为客户端也为服务端，状态的变化一致，且回复的ACK中ISN与SYN中的一致。</strong></p>\n<p>通信双方经历了相同的状态变更:<code>SYN_SENT</code> -&gt; <code>SYN_RCVD</code> -&gt; <code>ESTABLISHED</code></p>\n<p><font size=\"2\">我感觉TCP内部的实现中应该也是以SEQ作为参考依据。</font></p>\n<h4 id=\"同时关闭\"><a href=\"#同时关闭\" class=\"headerlink\" title=\"同时关闭\"></a>同时关闭</h4><p>  <img src=\"https://chenqwwq.oss-cn-hangzhou.aliyuncs.com/note/TCP%E5%90%8C%E6%97%B6%E5%85%B3%E9%97%AD.png\"></p>\n<p>和同时打开差不多，<strong>同时关闭是在收到对方的FIN之前，向对方发送了自己的FIN报文。</strong></p>\n<p>同样的通信双方经历了相同的状态变更:<code>FIN_WAIT_1</code> -&gt; <code>CLOSING</code> -&gt; <code>TIME_WAIT</code></p>\n<p>可以看到双方是都需要等待一个2MSL的。</p>\n<h3 id=\"半打开，半关闭，半连接\"><a href=\"#半打开，半关闭，半连接\" class=\"headerlink\" title=\"半打开，半关闭，半连接\"></a>半打开，半关闭，半连接</h3><p>以上是TCP连接中的三种特殊状态，就简单的叙述一下吧。</p>\n<p>半连接是指<strong>服务端发送了SYN+ACK报文之后，等待客户端的ACK报文的这段时间</strong></p>\n<p>半连接有类似的攻击手段:大量的请求发送到服务端但是永远不回复最后的ACK，导致服务端存在大量的半连接。</p>\n<p>半打开是指<strong>如果一方已经关闭或异常终止连接，而另一方却不知道。</strong></p>\n<p>半关闭上面也有提到过，<strong>通信的一方主动发送FIN之后表示本方不会再主动发送任何数据，但仍然可以接受对方的数据并响应的情况。</strong></p>\n<h2 id=\"三、TCP的有限状态机\"><a href=\"#三、TCP的有限状态机\" class=\"headerlink\" title=\"三、TCP的有限状态机\"></a>三、TCP的有限状态机</h2><p><img src=\"https://chenqwwq.oss-cn-hangzhou.aliyuncs.com/note/TCP%E6%9C%89%E9%99%90%E7%8A%B6%E6%80%81%E6%9C%BA.png\"></p>\n<p>上图即为《TCP&#x2F;IP详解 卷一》中的原图。</p>\n<p>图中基本包含了全部的TCP连接状态变更，包括典型、非典型。</p>\n<h3 id=\"ESTABLISHED\"><a href=\"#ESTABLISHED\" class=\"headerlink\" title=\"ESTABLISHED\"></a>ESTABLISHED</h3><p><code>ESTABLISHED</code>状态是通信双方正常传输数据的状态。</p>\n<p>作为三次握手的终点和四次挥手的起点。</p>\n<h3 id=\"TIME-WAIT状态\"><a href=\"#TIME-WAIT状态\" class=\"headerlink\" title=\"TIME_WAIT状态\"></a>TIME_WAIT状态</h3><p><strong><code>TIME_WAIT</code>状态是主动关闭方在连接关闭的最后阶段必须经历的。</strong></p>\n<p>在<strong>WAIT_TIME</strong>状态下，主动关闭方会判断本次的四元组不可用，所以此时就算对端重新请求SYN（接收到ACK释放连接之后），也会被拒绝。</p>\n<p>进入该状态时，<strong>TCP会设置时间等待计时器(TIME_WAIT timer)，并等待2MSL的时间才会真正的释放连接，RFC793中建议为2min。</strong></p>\n<p>MSL(Maximum Segment Lifetime)，也可以称为最大报文生存时间，<strong>是报文在所有链路中存在的最大时间，超过就会被丢弃。</strong></p>\n<p>这么做的目的有以下两个：</p>\n<ol>\n<li>为了保证最后的ACK能够到达被动关闭方。</li>\n</ol>\n<p>从有限状态机的图中也可以看到，被动关闭方的连接真正释放是在收到最后一个ACK之后，所以必须要保证ACK的正确发送。</p>\n<p><strong>等待2MSL能够有效避免最终的ACK丢失的情况，ACK不会主动重传，但是对端的FIN会重传直到收到正确的ACK为止。</strong></p>\n<p>2MSL可以粗略的看做是己方ACK发送的时间加上对方FIN重传的时间。</p>\n<p>当一个报连接处于<code>TIME_WAIT</code>状态时，任何延迟到达的报文都会被丢弃，只接收FIN报文。</p>\n<p>另外<strong>TIME_WAIT</strong>的状态是从最后一个ACK发送开始，所以重新响应ACK之后，<strong>TIME_WAIT</strong>也会重新计时。</p>\n<ol start=\"2\">\n<li>保证相同四元组额前后连接报文不混淆</li>\n</ol>\n<p><strong>等待2MSL，就可以使本次连接的报文在链路中全部消失。</strong></p>\n<p>期间TCP会将本次四元组定义为不可用，阻止重连。</p>\n<p>如果不等待，相同四元组的连接如果重连，就有可能导致旧报文发送到新连接的情况，造成数据混乱。</p>\n<p>2MSL是相对保守的处理方式，在ISN能超过上一次连接的最大序列号或者启用了时间戳选项的时候，感觉上可以跳过。</p>\n<h3 id=\"CLOSING-状态\"><a href=\"#CLOSING-状态\" class=\"headerlink\" title=\"CLOSING 状态\"></a>CLOSING 状态</h3><p><code>CLOSING</code>状态是TCP的非典型状态<font size=2>(一般情况下不会出现）</font>。</p>\n<p>只有在上文提到过地<strong>同时关闭</strong>的情况下才会出现，同时关闭的通信双方在接收到对方的FIN，在发送ACK之后进入到<code>CLOSING</code>状态。</p>\n<p>处于<code>CLOSING</code>状态下的通信双方在接收到对方的ACK之后，都会进入<code>TIME_WAIT</code>状态。</p>\n<h2 id=\"四、TCP的重传机制\"><a href=\"#四、TCP的重传机制\" class=\"headerlink\" title=\"四、TCP的重传机制\"></a>四、TCP的重传机制</h2><p>TCP协议往下就是网络层的IP协议，但是IP协议并不提供任何可靠传输的服务，所以我们可以简单认为TCP所处链路都是不可靠的。</p>\n<p>但是TCP介绍中也说了，它提供的是<strong>可靠的传输服务</strong>，因此也就要求TCP协议自身来补足IP协议中的不可靠部分。</p>\n<h3 id=\"可靠传输的基础\"><a href=\"#可靠传输的基础\" class=\"headerlink\" title=\"可靠传输的基础\"></a>可靠传输的基础</h3><p><strong>TCP的重传机制是基于<code>连续ARQ协议</code>实现的。</strong></p>\n<p>维基百科对<code>ARQ</code>的解释如下：</p>\n<blockquote>\n<p>ARQ协议，即自动重传请求（Automatic Repeat-reQuest），是OSI模型中数据链路层和传输层的错误纠正协议之一。它通过使用确认和超时这两个机制，在不可靠服务的基础上实现可靠的信息传输。如果发送方在发送后一段时间之内没有收到确认帧，它通常会重新发送。</p>\n</blockquote>\n<h4 id=\"停止等待ARQ协议\"><a href=\"#停止等待ARQ协议\" class=\"headerlink\" title=\"停止等待ARQ协议\"></a>停止等待ARQ协议</h4><p> <img src=\"https://chenqwwq.oss-cn-hangzhou.aliyuncs.com/note/%E5%81%9C%E6%AD%A2%E7%AD%89%E5%BE%85ARQ.png\"></p>\n<p><strong>一个分组一个分组的发送，在收到确认之前不会发送下一个分组，如果出现超时就重传丢失分组。</strong></p>\n<p>该协议能够完全保证通信的可靠新，但是显而易见的<strong>该协议的利用率很成问题</strong>，在发送完一个分组到确认到达的这段时间信道都是空闲的。</p>\n<p>即使整个链路十分可靠，依旧要等待确认信息的到达。</p>\n<p>而且判断分组是否丢失的算法就是<strong>在一定时间内，是否收到接受的确认信息</strong>，过于粗暴很容易出现伪重传的情况。</p>\n<h4 id=\"连续ARQ协议\"><a href=\"#连续ARQ协议\" class=\"headerlink\" title=\"连续ARQ协议\"></a>连续ARQ协议</h4><p><code>连续ARQ协议</code>可以说是对<code>停止等待ARQ协议</code>的优化。</p>\n<p><strong>在停止等待ARQ协议之上，每次发送多个报文，并等待这些分组的确认信息</strong></p>\n<p> <img src=\"https://chenqwwq.oss-cn-hangzhou.aliyuncs.com/note/%E8%BF%9E%E7%BB%ADARQ.png\"></p>\n<p>连续ARQ协议虽然提高了信道利用率，但是仍然会存在<strong>回退N</strong>等问题。</p>\n<h3 id=\"确认机制\"><a href=\"#确认机制\" class=\"headerlink\" title=\"确认机制\"></a>确认机制</h3><p><strong>确认机制指的就是接收端在收到一个正确的报文时，会给发送端回传一个ACK，表明报文已经到达。</strong></p>\n<h4 id=\"延迟确认-x2F-累计确认机制\"><a href=\"#延迟确认-x2F-累计确认机制\" class=\"headerlink\" title=\"延迟确认&#x2F;累计确认机制\"></a>延迟确认&#x2F;累计确认机制</h4><p><strong>接收端在收到数据之后，并不会立马回传ACK，而是会延迟一定的时间(延迟确认)，发送的时候会以最大有序报文的序号作为ACK的数值(累计确认)。</strong></p>\n<p>这样的目的很明确就是<strong>减少ACK报文的数量，降低ACK造成的网络负担</strong>。</p>\n<h4 id=\"选择确认SACK\"><a href=\"#选择确认SACK\" class=\"headerlink\" title=\"选择确认SACK\"></a>选择确认SACK</h4><p>选择确认是TCP首部中的选项，启用SACK功能需要通信双方事先确认，之前也说过SACK字段是为了<strong>描述接收端的接收缺口，帮助发送方更加准确的重传丢失报文。</strong></p>\n<p>可以在一个ACK报文中，指明多个缺口信息(最多三个)，普通的ACK报文可以看做是单个的缺口信息。</p>\n<h3 id=\"超时重传\"><a href=\"#超时重传\" class=\"headerlink\" title=\"超时重传\"></a>超时重传</h3><p><strong>超时重传又可以称为基于计时器的重传。</strong></p>\n<p>TCP每发送一个报文，都会设定一个<strong>重传计时器</strong>，若在计时器超时时都没有收到确认消息，就会触发重传操作。</p>\n<p>超时重传的整体逻辑并不复杂，但是<strong>超时时间的选择</strong>却是TCP最难的问题之一。</p>\n<p>简单超时时间设置，比如SYN的重传 - <strong>每次SYN重传的超时时间都是上一次的简单加倍</strong>，比如说上次过了2s之后重传报文，这次就应该等待4s或者6s，这种方式称为<strong>二进制指数退避</strong>。</p>\n<p>复杂一点的设置就会根据报文的RTT推算RTO。</p>\n<blockquote>\n<p>RTT （报文段往返时间）- 从报文发出到接受到该报文的ACK所花费的总时间。</p>\n<p>RTO （超时重传时间）- 从报文发出到重传报文所花费的时间，也就是所谓的重传超时时间。</p>\n</blockquote>\n<p><font size=1>这里并不是很懂，就先空着了</font></p>\n<h3 id=\"快速重传\"><a href=\"#快速重传\" class=\"headerlink\" title=\"快速重传\"></a>快速重传</h3><p>快速重传是基于接收端反馈信息的重传模式。</p>\n<p><strong>首先在TCP中，接收方如果收到一个失序的报文段就会立即发送重复的ACK，而不会选择延迟或者累积。</strong></p>\n<p>因此如果接收端的接收缓存中出现缺口，那么后续到达的报文就会 重复确认同一个报文。</p>\n<p>简单的举个例子：</p>\n<p>接收端的缓存中存在的是报文1,2,3,4，且还未发送ACK，如果此时报文6到达，那么接收端就会立马发送一个ACK&#x3D;5的报文，如果报文5一直没有到达，那么在报文7,8,9到达时，都会发送一个ACK&#x3D;5的重复确认报文。</p>\n<p><strong>发送方接收到的重复确认报文达到一定阈值(通常为3)之后，就会立马重传确认报文中指定缺失的报文。</strong></p>\n<p>快速重传同时也是拥塞控制中的重要算法。</p>\n<h3 id=\"伪重传的判定和响应\"><a href=\"#伪重传的判定和响应\" class=\"headerlink\" title=\"伪重传的判定和响应\"></a>伪重传的判定和响应</h3><p>伪重传就是指在没有发生数据丢失时，但仍然进行了重传的情况。</p>\n<p>导致伪重传的原因有超时时间误差，包失序，包重复或者ACK丢失等。</p>\n<p>判定是否是伪重传的方法有以下集中：</p>\n<ol>\n<li><p><strong>DSACK 重复的SACK</strong></p>\n<p>对SACK的增强，<strong>可以在第一次SACK块中可以指明接收端中重复收到的报文端序列号。</strong></p>\n</li>\n<li><p><strong>Eifel检测算法</strong></p>\n<p>该算法需要首部中的时间戳选项支持。</p>\n<p>TCP会在重传的的时候记录下重传报文的TSV，当接收到重传报文是会对比回显TSER和保存的TSV对比。</p>\n<p>如果TSER &lt; TSV，则表示是伪重传。</p>\n</li>\n</ol>\n<p>DSACK只能在接收到重传的ACK之后才能判断此次是否是伪重传，而Eifel检测算法是在第一个ACK到达时，就能判断出来，可能此时重传报文都还没传输到接收端。</p>\n<h3 id=\"重复、失序以及重新组包\"><a href=\"#重复、失序以及重新组包\" class=\"headerlink\" title=\"重复、失序以及重新组包\"></a>重复、失序以及重新组包</h3><h4 id=\"失序\"><a href=\"#失序\" class=\"headerlink\" title=\"失序\"></a>失序</h4><p>包失序可能由IP协议或者链路状态引起，因为IP协议不能保证包的有序发送，而且就算是有序发送但是在动态的网络中也不能保证包有序的到达接收端。</p>\n<p>上文也有提到过，当接收到一个失序的报文时，接收端会立马响应一个ACK。</p>\n<p>少量的失序并不会造成什么影响，但如果失序报文间隔的报文数目超过快速重传的阈值，就会触发重传，还是伪重传。</p>\n<h4 id=\"重复\"><a href=\"#重复\" class=\"headerlink\" title=\"重复\"></a>重复</h4><p>《TCP&#x2F;IP详解 卷一》中也说了IP协议可能出现单次包传输多次的情况，因此也就产生了重复问题。</p>\n<p>重复次数过多也就会触发重传。</p>\n<h4 id=\"重新组包\"><a href=\"#重新组包\" class=\"headerlink\" title=\"重新组包\"></a>重新组包</h4><p>当TCP重传报文时，它并不需要完全重传相同的报文，为了提高性能等原因，可能会发送更大的包。</p>\n<h2 id=\"五、窗口管理\"><a href=\"#五、窗口管理\" class=\"headerlink\" title=\"五、窗口管理\"></a>五、窗口管理</h2><p>TCP协议中采用滑动窗口机制来实现流量控制。<font size=1>(所以窗口管理也是流量控制的关键)</font></p>\n<p><strong>接受端和发送端各自都会维护一个发送窗口结构和一个接受窗口结构。</strong></p>\n<p>窗口结构以字节为单位</p>\n<p>上文也说过TCP首部中窗口字段，是接收端回传给发送端的，并以此作为背压控制发送方的发送窗口大小，这也被称作<strong>通告窗口</strong>。</p>\n<h3 id=\"TCP的流量控制\"><a href=\"#TCP的流量控制\" class=\"headerlink\" title=\"TCP的流量控制\"></a>TCP的流量控制</h3><p>因为TCP的流量控制基本是上基于窗口实现的，所以这块内容我也放到这里了。</p>\n<p><strong>流量控制的的主要目的就是在保持相对较高的传输速率的同时，还要保障收发速度平衡。</strong></p>\n<p>TCP的流量控制机制就是<strong>通过调节ACK数据包中的窗口大小字段实现的</strong>，这种方法在控制发送方速率的同时，也明确了接收方的缓存信息，防止接收方的缓存溢出。</p>\n<h3 id=\"发送端窗口结构\"><a href=\"#发送端窗口结构\" class=\"headerlink\" title=\"发送端窗口结构\"></a>发送端窗口结构</h3><p> <img src=\"/home/chen/.config/Typora/typora-user-images/1569251203979.png\" alt=\"1569251203979\"></p>\n<p>上图即为发送端的窗口结构。</p>\n<p>中间的发送窗口即为活动窗口，TCP会按照顺序发送区间内的报文。</p>\n<p>当接收到返回的数据ACK时，活动窗口也随之右移动，左右两边的相对运动就控制着窗口的大小。</p>\n<p>窗口的活动有图中三种：</p>\n<ol>\n<li><p>关闭（close）-  活动窗口左边界右移，<strong>当收到ACK数据时会进行此操作，使窗口减小。</strong></p>\n</li>\n<li><p>打开（open）-  活动窗口的右边界右移，<strong>当接收的报文被处理时会触发此操作，使窗口增大。</strong></p>\n<p>程序也需要TCP报文中的窗口大小字段判断窗口具体增大多少。</p>\n</li>\n<li><p>收缩（shrink）-  活动窗口的右边界左移动，使窗口减小，<strong>TCP的协议中强烈不建议此操作。</strong></p>\n</li>\n</ol>\n<p><strong>窗口的左边界明确说明不能左移,因为它代表的是已经被确认的数据</strong></p>\n<h3 id=\"接收端窗口结构\"><a href=\"#接收端窗口结构\" class=\"headerlink\" title=\"接收端窗口结构\"></a>接收端窗口结构</h3><p> <img src=\"/home/chen/.config/Typora/typora-user-images/1569252451692.png\" alt=\"1569252451692\"></p>\n<p>对比于发送端，接收端的窗口结构简单很多，<strong>对于活动窗口(接收窗口)内部并不进行细分</strong>。</p>\n<p>如果到达的报文在<strong>接受已确认或者无法接受</strong>范围，则会被丢弃。</p>\n<p>在接受窗口范围内会被缓存，只有在最左边的数据接收到之后整个窗口才能右移。</p>\n<p>同样的接受窗口的左边界不能左移。</p>\n<h3 id=\"零窗口问题\"><a href=\"#零窗口问题\" class=\"headerlink\" title=\"零窗口问题\"></a>零窗口问题</h3><p>当持续收到ACK，但是应用程序并没有及时处理收到的数据(持续关闭，未打开)时，如果左右边界重合，就会出现所谓的<strong>零窗口</strong>现象。</p>\n<p><strong>在接收端窗口扩大重新获得可用窗口空间时，会给发送端发送一个窗口更新报文(window update)，通知其可以继续发送数据。</strong></p>\n<p><strong>送端也会采用一个持续计时器的机制，当计时器超时就会发送窗口探测报文(window probe)，强制要求接收端响应一个ACK报文(首部中包含窗口大小字段)。</strong></p>\n<h3 id=\"Nagle算法\"><a href=\"#Nagle算法\" class=\"headerlink\" title=\"Nagle算法\"></a>Nagle算法</h3><p><strong>Nagle算法通过减少包发送量来增加网络传输的效率。</strong></p>\n<p><strong>小数据包问题</strong>  -  即TCP数据包中有效负载较低的问题，一个数据包中至少20字节的TCP首部以及20字节的IP首部，而真实数据甚至可能只有1字节，这就是很严重的浪费。</p>\n<p>Nagle算法规定：<strong>TCP连接中任意时刻都只能存在一个未经确认的小包，此时不能发送长度小于MSS的包，直到所有数据都ACK之后再合并（coalescing）所有待发送的数据包发送。</strong></p>\n<p>Nagle算法的规则（可参考tcp_output.c文件里tcp_nagle_check函数注释）：</p>\n<p>（1）如果包长度达到MSS，则允许发送；</p>\n<p>（2）如果该包含有FIN，则允许发送；</p>\n<p>（3）设置了TCP_NODELAY选项，则允许发送；</p>\n<p>（4）未设置TCP_CORK选项时，若所有发出去的小数据包（包长度小于MSS）均被确认，则允许发送；</p>\n<p>（5）上述条件都未满足，但发生了超时（一般为200ms），则立即发送。</p>\n<p><font size=1>这段照抄的…</font></p>\n<p>Nagle算法同时迫使TCP遵循了停止-等待协议，或者说扩展了停止-等待协议。</p>\n<p>网络良好的情况下，如果ACK回复的很快，发送端缓存也并没有积累多少数据，此时Nagle算法反而会使整体的传输时间更长。</p>\n<h3 id=\"糊涂窗口综合症（Silly-window-syndrome）\"><a href=\"#糊涂窗口综合症（Silly-window-syndrome）\" class=\"headerlink\" title=\"糊涂窗口综合症（Silly window syndrome）\"></a>糊涂窗口综合症（<strong>Silly window syndrome</strong>）</h3><p> 维基百科百科中对<a href=\"https://w.wikipedia.org/wiki/%E7%B3%8A%E6%B6%82%E7%AA%97%E5%8F%A3%E7%BB%BC%E5%90%88%E7%97%87\">糊涂窗口综合症</a>的说明如下：</p>\n<blockquote>\n<p><strong>糊涂窗口综合症</strong>（<strong>Silly window syndrome</strong>），亦称<strong>愚蠢窗口综合症</strong>、<strong>愚笨窗口综合症</strong>，是<a href=\"https://zh.wikipedia.org/wiki/%E4%BC%A0%E8%BE%93%E6%8E%A7%E5%88%B6%E5%8D%8F%E8%AE%AE\">TCP</a><a href=\"https://zh.wikipedia.org/w/index.php?title=Flow_control_(data)&action=edit&redlink=1\">流量控制</a>实现不良导致的一种<a href=\"https://zh.wikipedia.org/wiki/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C\">计算机网络</a>问题。当发送程序缓慢地创建数据，接收程序缓慢地消耗数据，或者两者同时存在时，滑动窗口运作会出现严重问题。</p>\n</blockquote>\n<p><strong>严重问题</strong>就是指的小数据包问题。</p>\n<p>举个例子：</p>\n<p>若接收端的应用程序处理数据很慢，且每次只处理1个字节的数据，那么接受端的缓存慢慢积累之后就会出现零窗口情况，而处理完1个字节之后缓存有多出了一个字节，此时如果服务端发送窗口更新报文，告诉发送端你只能发送1个字节数据的报文，可想而知效率会有多低。</p>\n<p>导致SWS出现的情况有以下几种：</p>\n<ol>\n<li>接收端通告窗口较小</li>\n<li>发送端发送的数据段较小</li>\n</ol>\n<p>两端都有可能造成SWS，所以也需要同时从两端解决问题，发送端不应该发送小的报文段<font size=1>(此时Nagle算法可以帮助发送端解决部分发送端的问题)</font>，而接收端不应该通告小的窗口。</p>\n<p>根据以上情况具体的规则应该按照发送端和接收端区分，</p>\n<p><strong>针对发送端而言应该交由Nagle算法控制发送的时间</strong>，而且只有满足以下条件，报文才能被传输：</p>\n<ol>\n<li>长度为MSS的报文可以被传输。</li>\n<li>报文长度大于接收端最大窗口值的一半可以发送</li>\n<li>某一ACK不是目前期盼的(重传?)</li>\n<li>连接禁用了Nagle算法</li>\n</ol>\n<p><strong>针对于接收端来说，不应该通告小的窗口值，在窗口增长至一个全长的报文段(MSS)或者接收端缓存空间的一半之前，不能通告该窗口。</strong></p>\n<h2 id=\"六、TCP拥塞控制\"><a href=\"#六、TCP拥塞控制\" class=\"headerlink\" title=\"六、TCP拥塞控制\"></a>六、TCP拥塞控制</h2><ul>\n<li>《TCP&#x2F;IP详解》里该段内容太复杂了，大概的瞥了眼内容，详细的等我以后有空再看吧 。</li>\n</ul>\n<p><strong>拥塞控制的目的就是为了防止过多的包进入链路中，导致链路中的路由器等设备过载而丢弃数据包，引发拥塞。</strong></p>\n<p>TCP协议中，由<strong>发送方维护</strong>一个反映网络传输能力的的变量叫做<strong>拥塞窗口</strong>(cwnd)，所以<strong>发送端的活动窗口实际值为拥塞窗口和通告窗口的较小值。</strong></p>\n<p>拥塞窗口同时</p>\n<p>因为拥塞控制是一个全局性的过程，网络传输能力也不仅仅取决于收发端，所以cwnd也无法取到一个准备的值，只能靠一步步的推测。</p>\n<h3 id=\"慢开始\"><a href=\"#慢开始\" class=\"headerlink\" title=\"慢开始\"></a>慢开始</h3><p>慢开始的目的<strong>是在不清楚网络传输能力的情况下，以少量包慢慢递增的形式进行探测。</strong></p>\n<p><strong>拥塞窗口大小在每次接收到一个正确的ACK时+1</strong>，所以拥塞窗口大小整体呈指数形式递增。</p>\n<p>假设起始的拥塞窗口为n，在每接收到一个ACK之后拥塞窗口加1，所以如果网络良好ACK全部按时收到，那么在第一个RTT时间内拥塞窗口就变为了2n，之后便是4n，以指数增长。</p>\n<p><strong>另外由于接收端的延迟确认机制，所以并不会完全按照指数增长。</strong></p>\n<p><strong>慢开始的慢并不是增长速度慢，而是初始的拥塞窗口小</strong>，在不清楚网络传输能力的情况下，并不会一下子就设置太大的拥塞窗口。</p>\n<p>慢开始的触发条件有以下几个：</p>\n<ol>\n<li>TCP连接刚初始化</li>\n<li>检测到超时重传(丢包)</li>\n<li>长时间处于空闲状态的连接</li>\n</ol>\n<p>另外慢开始还会预先设置一个慢开始门限(ssthresh)：</p>\n<ol>\n<li>当cwnd &lt; ssthresh时，执行慢开始算法</li>\n<li>当cwnd &gt; ssthresh时，改用拥塞避免算法</li>\n<li>当cwnd &#x3D; ssthresh时，慢开始和拥塞避免都可以</li>\n</ol>\n<p>慢开始门限并不是固定的，而是会随着时间变化，它代表的是TCP对最佳窗口大小的估计值。</p>\n<p><strong>慢启动状态下，TCP判断是否发生拥塞的依据就是是否有丢包。</strong></p>\n<h3 id=\"拥塞避免\"><a href=\"#拥塞避免\" class=\"headerlink\" title=\"拥塞避免\"></a>拥塞避免</h3><p><strong>拥塞避免的作用就是让cwnd缓慢的线性增长。</strong></p>\n<p>虽然是慢开始，但是指数增长的速度过于快速，所以在达到阈值之后会改用拥塞避免。</p>\n<p><strong>慢开始和拥塞避免最大的区别就在于ACK到达之后cwnd如何变化。</strong></p>\n<p>不论是在慢开始还是用三个避免阶段，只要出现重传的情况(重传就表示TCP判定出现丢包)，TCP就会认为此时的cwnd超出网络传输能力，此时会将慢启动门限(ssthresh)减半。</p>\n<h3 id=\"快恢复\"><a href=\"#快恢复\" class=\"headerlink\" title=\"快恢复\"></a>快恢复</h3><p><strong>快恢复</strong>（Fast recovery）是Reno算法新引入的一个阶段，在将丢失的分段重传后，启动一个超时定时器，并等待该丢失分段包的分段确认后，再进入拥塞控制阶段。如果仍然超时，则回到慢启动阶段。</p>\n<p>快恢复算法需要<strong>快重传</strong>配合，在接收到三个连续的ACK(触发快速重传时)，快恢复算法会执行如下流程：</p>\n<ol>\n<li>慢开始门限减半(ssthresh&#x2F;2)</li>\n<li>执行快重传算法，设置拥塞窗口(cwnd)为减半门限(ssthresh&#x2F;2) + 3MSS(也有不加的TCP实现)</li>\n<li>每接受到一个重复ACK报文，拥塞窗口(cwnd)临时+1</li>\n<li>接收到正确的ACK报文时，cwnd被设置到减半门限(ssthresh&#x2F;2)</li>\n</ol>\n<p>拥塞控制的流程图：</p>\n<p>  <img src=\"https://chenqwwq.oss-cn-hangzhou.aliyuncs.com/note/%E6%8B%A5%E5%A1%9E%E6%8E%A7%E5%88%B6.jpg\" alt=\"img\"></p>\n<h3 id=\"TCP-Reno和TCP-Tahoe\"><a href=\"#TCP-Reno和TCP-Tahoe\" class=\"headerlink\" title=\"TCP Reno和TCP Tahoe\"></a>TCP Reno和TCP Tahoe</h3><p>TCP Reno和TCP Tahoe是两种不同的拥塞控制算法。</p>\n<p><strong>两种算法对于拥塞的判断都是根据重传超时或者重复确认。</strong></p>\n<p>如果发生重传超时两种算法的处理逻辑一致，都会将拥塞窗口设置为1MSS，然后重新开始慢开始算法。</p>\n<p>但是对于重复确认来说两种算法不同：</p>\n<p>Tahoe算法在收到超过阈值的重复ACK之后先触发的快速重传算法，<strong>将慢开始门限设置为当前拥塞窗口(cwnd)的一半，拥塞窗口变为1MSS，再重新开始慢开始算法。</strong></p>\n<p>Reno不同的在于快速重传之后的处理，首先慢开始门限是减半，变为当前慢开始门限的一半+3MSS，而且跳过慢开始阶段，直接以减半的慢开始门限作为拥塞窗口(cwnd)，直接跑拥塞避免。</p>\n","site":{"data":{}},"more":"<h1 id=\"TCP-协议（一\"><a href=\"#TCP-协议（一\" class=\"headerlink\" title=\"TCP 协议（一\"></a>TCP 协议（一</h1><ul>\n<li>基于《TCP&#x2F;IP详解 卷一》和谢希仁《计算机网络（第6版）》的简单整理和总结。</li>\n</ul>\n<p>TCP是一种面向连接的，基于字节流的，可靠的传输控制协议。</p>\n<p>属于OSI七层模型中的传输层。</p>\n<h2 id=\"内容梳理\"><a href=\"#内容梳理\" class=\"headerlink\" title=\"内容梳理\"></a>内容梳理</h2><p><img src=\"https://chenqwwq.oss-cn-hangzhou.aliyuncs.com/note/TCP%E6%A8%A1%E5%9D%97%E6%95%B4%E7%90%86.png\" alt=\"1569166769008\"></p>\n<ul>\n<li>TCP的内容模块整理，方便记忆。</li>\n</ul>\n<h2 id=\"一、TCP报文首部\"><a href=\"#一、TCP报文首部\" class=\"headerlink\" title=\"一、TCP报文首部\"></a>一、TCP报文首部</h2><p><img src=\"https://chenqwwq.oss-cn-hangzhou.aliyuncs.com/note/TCP%E9%A6%96%E9%83%A8%E6%A0%BC%E5%BC%8F.png\"></p>\n<p>TCP首部大小在20~60字节，其中标准长度为20个字节。</p>\n<p><strong>源端口和目的端口</strong></p>\n<p>TCP的四元组为源IP，源端口，目的IP，目的端口，<strong>TCP首部中的源端口和目的端口结合IP首部中的源和目的IP地址组成了一个连接的四元组。</strong></p>\n<p><strong>序号&#x2F;序列号(SEQ)</strong></p>\n<p>在一个TCP连接中唯一标识TCP报文段，是重传机制的重要字段。</p>\n<p>自ISN（初始序列号）起，单调递增。</p>\n<p><strong>确认号(ACK)</strong></p>\n<p>接收端发送给发送端，是期望对方下一个报文段的第一个字节的序号。</p>\n<p><strong>值为N的ACK报文表示的是序号在N之前的报文全部已经收到，希望收到序号N的报文。</strong></p>\n<p><strong>数据偏移</strong></p>\n<p>表示TCP数据部分相对于整个TCP报文段来说的偏移量，可以简单理解为TCP首部的长度。</p>\n<p><strong>控制位</strong></p>\n<ol>\n<li>URG - 紧急，置位后首部紧急指针生效</li>\n<li>ACK - 确认，置位后确认号生效</li>\n<li>PSH - 推送，置位后接收方应尽快给应用程序推送该段数据</li>\n<li>RST - 重置，置位后表示该报文为重置报文，取消连接</li>\n<li>SYN - 初始化，置位表示为初始化报文，用于初始化TCP连接</li>\n<li>FIN - 结束，职位表示当前端结束数据传输工作</li>\n</ol>\n<p><strong>URG之前还有CWR - 拥塞窗口 以及 ECE - ECN回显，但是在一些TCP的实现里面并没有实现这两位。</strong></p>\n<p><strong>窗口</strong></p>\n<p><strong>通常在ACK报文中附带，作为接收方对发送方的背压，是影响发送端发送速率的因素之一。</strong></p>\n<p>占16位，单位为字节，所以在没有<strong>窗口缩放</strong>选项的情况下，最大为65535字节。</p>\n<p><strong>校验和</strong></p>\n<p>报文段正确性校验使用占两位。</p>\n<p>校验范围包括首部和数据部分，和UDP一样需要再生成12字节的伪首部参与计算。</p>\n<p>伪首部包括源和目的IP，保证通信双方的正确性。</p>\n<p><strong>紧急指针</strong></p>\n<p>只有在<strong>URG控制位</strong>置位的情况下生效。</p>\n<p>表示紧急报文在<strong>报文段序列号字段</strong>上的正偏移，序列号超过紧急指针的即为正常数据。</p>\n<p>零窗口的情况下也可以发送紧急报文。</p>\n<p><strong>选项</strong></p>\n<p><strong>1. MSS - 最大报文段长度</strong></p>\n<p>连接中每个TCP报文段的<strong>数据字段</strong>的最大长度，不包含首部。</p>\n<p>在SYN报文中协商，双方都可以指定自己的MSS，甚至可以不同，默认为536字节。</p>\n<p><strong>2. SACK - 选择确认</strong></p>\n<p>当接收方接受到乱序数据时，就会在接收窗口产生缺口。</p>\n<p>设置SACK选项就是为了描述这些缺口信息，使发送方更好，更准确的重传这些缺口数据。</p>\n<p><strong>3. WSCALE&#x2F;WSOPT - 窗口缩放</strong></p>\n<p>由于首部的<strong>窗口大小</strong>字段仅占16位，所以影响的范围也仅在0~2^16(65535)之间。</p>\n<p>该选项就是为了增加窗口大小字段的范围，从16位提升至30位。</p>\n<p>该选项只能出现在一个SYN报文段中，而SYN报文仅仅在初始化时通信双方各发一次，由此可知：</p>\n<p><strong>连接建立之后窗口缩放的比例因子是与方向绑定的</strong>，通信双方的比例因子可以不同。</p>\n<p><strong>4. TSOPT - 时间戳选项</strong> </p>\n<p>该选项要求发送方在每一个报文中添加2个4字节的单调递增的时间戳数值。</p>\n<p>分别是：<strong>TSval&#x2F;TSV 发送时间戳 以及 TSecr&#x2F;TSER 时间戳回显</strong>。</p>\n<p>该选项的设置可以很好的解决重传的二义性，也能更加精确的计算RTT。</p>\n<p><strong>5. 其他</strong></p>\n<p>另外的还有<strong>认证选项</strong>以及<strong>用户超时选项</strong>等等。</p>\n<h2 id=\"二、连接管理\"><a href=\"#二、连接管理\" class=\"headerlink\" title=\"二、连接管理\"></a>二、连接管理</h2><h3 id=\"建立连接\"><a href=\"#建立连接\" class=\"headerlink\" title=\"建立连接\"></a>建立连接</h3><p>稍微有点常识的程序猿应该都知道，TCP建立连接的时候需要往返发送三个报文。</p>\n<p>   <img src=\"https://chenqwwq.oss-cn-hangzhou.aliyuncs.com/note/TCP%E6%89%93%E5%BC%80%E8%BF%9E%E6%8E%A5.png\" alt=\"1568818645296\"></p>\n<p>连接发起者(客户端)会向服务端发送一个<strong>SYN报文</strong>，报文中除了目的端口，还包括ISN(初始序列号)以及部分选项字段。</p>\n<p>服务端接受后会回复一个<strong>SYN报文</strong>作为响应，然后将接收到的SEQ+1，作为报文的ACK值，并指明服务端的的初始序列号等信息。</p>\n<p>客户端响应一个ACK报文，同样的将服务端SYN报文中的SEQ+1作为ACK值。</p>\n<h4 id=\"为什么要三次握手\"><a href=\"#为什么要三次握手\" class=\"headerlink\" title=\"为什么要三次握手\"></a>为什么要三次握手</h4><p>首先明确，<strong>三次握手的主要目的是交换双方的ISN以及选项。</strong></p>\n<p>这些字段，例如是否启用SACK等都将是数据传输时的重要属性。</p>\n<p>交换双方的信息至少需要两次握手，而第三次握手则是为了<strong>防止已失效的连接请求又被转发到了服务端</strong>。</p>\n<p>意思就是如果客户端在收到服务端的SYN+ACK报文时就建立一个连接，那么在重传时将会出现先后多条连接的情况。</p>\n<p>我感觉可能防止建立重复连接的功能可能是意外之喜。</p>\n<p>另外<strong>可以发现SYN报文也占用了一个序列号。</strong></p>\n<h3 id=\"初始序列号-ISN\"><a href=\"#初始序列号-ISN\" class=\"headerlink\" title=\"初始序列号 - ISN\"></a>初始序列号 - ISN</h3><p>在发送用于建立连接的SYN报文时，通信的双方都会选择一个初始化序列号。</p>\n<p>每个连接都会有不同的初始化序列号。</p>\n<p>《TCP&#x2F;IP详解》原文13.2章节:<strong>此外，为了确认客户端的SYN，服务器将其包含的ISN(c)数值加1后作为返回的ACK数值。因此，每发送一个SYN，序列号都会自动加1。这样如果出现丢失的情况，该SYN段将会重传</strong>。</p>\n<p>wireshark测试下发现，客户端SYN报文的SEQ（也就是ISN）在重传时也不会改变。</p>\n<h3 id=\"关闭连接\"><a href=\"#关闭连接\" class=\"headerlink\" title=\"关闭连接\"></a>关闭连接</h3><p>相对来说关闭连接的四次挥手就好理解多了。</p>\n<p>   <img src=\"https://chenqwwq.oss-cn-hangzhou.aliyuncs.com/note/TCP%E5%85%B3%E9%97%AD%E8%BF%9E%E6%8E%A5.png\" alt=\"1568820312811\"></p>\n<ol>\n<li>连接的主动关闭方，发送一个FIN。</li>\n<li>被动方回复一个ACK。</li>\n<li>被动方主动发送一个FIN。</li>\n<li>主动方回复一个ACK</li>\n</ol>\n<h4 id=\"为什么要四次挥手\"><a href=\"#为什么要四次挥手\" class=\"headerlink\" title=\"为什么要四次挥手\"></a>为什么要四次挥手</h4><p>和三次握手的区别，四次握手中被动关闭方的FIN报文和ACK拆开了，而三次握手的SYN报文和ACK是一起发出的。</p>\n<p>至于为什么要拆开，我的理解是因为<strong>半关闭状态</strong>的存在，作为一个全双工的协议，连接的双方都可以互相发送数据。</p>\n<p>半关闭状态是指TCP连接双方，有一端发送了FIN，而另一端还在继续传输数据，此时的主动关闭方仍然会对接收的数据作ACK的响应。 </p>\n<p>一方发送了FIN报文就表示己方的数据发送完毕了，<strong>因此就分别需要两个FIN报文和两个ACK才足以完整的关闭一条(全双工)连接。</strong></p>\n<h3 id=\"同时打开和关闭\"><a href=\"#同时打开和关闭\" class=\"headerlink\" title=\"同时打开和关闭\"></a>同时打开和关闭</h3><h4 id=\"同时打开\"><a href=\"#同时打开\" class=\"headerlink\" title=\"同时打开\"></a>同时打开</h4><p>通信双方在收到对方的SYN报文之前，都先发送了SYN报文，此时这种情况就叫做<strong>同时打开</strong>。</p>\n<p>算是一种很少出现的特殊情况，但是TCP也能支持，并建立一条正常的连接。</p>\n<pre><code>![](https://chenbxxx.oss-cn-beijing.aliyuncs.com/TCP同时打开.png)\n</code></pre>\n<p><font size=\"1\">我的画图软件不能支持斜线，只能靠盗图了</font></p>\n<p>如图可见，通信的双方同时向对方发送一个SYN，并附带上自己的ISN(SEQ)。</p>\n<p>接收方接受之后同样也同时作为被动发起方恢复一个ACK。</p>\n<p><strong>此时通信双方即为客户端也为服务端，状态的变化一致，且回复的ACK中ISN与SYN中的一致。</strong></p>\n<p>通信双方经历了相同的状态变更:<code>SYN_SENT</code> -&gt; <code>SYN_RCVD</code> -&gt; <code>ESTABLISHED</code></p>\n<p><font size=\"2\">我感觉TCP内部的实现中应该也是以SEQ作为参考依据。</font></p>\n<h4 id=\"同时关闭\"><a href=\"#同时关闭\" class=\"headerlink\" title=\"同时关闭\"></a>同时关闭</h4><p>  <img src=\"https://chenqwwq.oss-cn-hangzhou.aliyuncs.com/note/TCP%E5%90%8C%E6%97%B6%E5%85%B3%E9%97%AD.png\"></p>\n<p>和同时打开差不多，<strong>同时关闭是在收到对方的FIN之前，向对方发送了自己的FIN报文。</strong></p>\n<p>同样的通信双方经历了相同的状态变更:<code>FIN_WAIT_1</code> -&gt; <code>CLOSING</code> -&gt; <code>TIME_WAIT</code></p>\n<p>可以看到双方是都需要等待一个2MSL的。</p>\n<h3 id=\"半打开，半关闭，半连接\"><a href=\"#半打开，半关闭，半连接\" class=\"headerlink\" title=\"半打开，半关闭，半连接\"></a>半打开，半关闭，半连接</h3><p>以上是TCP连接中的三种特殊状态，就简单的叙述一下吧。</p>\n<p>半连接是指<strong>服务端发送了SYN+ACK报文之后，等待客户端的ACK报文的这段时间</strong></p>\n<p>半连接有类似的攻击手段:大量的请求发送到服务端但是永远不回复最后的ACK，导致服务端存在大量的半连接。</p>\n<p>半打开是指<strong>如果一方已经关闭或异常终止连接，而另一方却不知道。</strong></p>\n<p>半关闭上面也有提到过，<strong>通信的一方主动发送FIN之后表示本方不会再主动发送任何数据，但仍然可以接受对方的数据并响应的情况。</strong></p>\n<h2 id=\"三、TCP的有限状态机\"><a href=\"#三、TCP的有限状态机\" class=\"headerlink\" title=\"三、TCP的有限状态机\"></a>三、TCP的有限状态机</h2><p><img src=\"https://chenqwwq.oss-cn-hangzhou.aliyuncs.com/note/TCP%E6%9C%89%E9%99%90%E7%8A%B6%E6%80%81%E6%9C%BA.png\"></p>\n<p>上图即为《TCP&#x2F;IP详解 卷一》中的原图。</p>\n<p>图中基本包含了全部的TCP连接状态变更，包括典型、非典型。</p>\n<h3 id=\"ESTABLISHED\"><a href=\"#ESTABLISHED\" class=\"headerlink\" title=\"ESTABLISHED\"></a>ESTABLISHED</h3><p><code>ESTABLISHED</code>状态是通信双方正常传输数据的状态。</p>\n<p>作为三次握手的终点和四次挥手的起点。</p>\n<h3 id=\"TIME-WAIT状态\"><a href=\"#TIME-WAIT状态\" class=\"headerlink\" title=\"TIME_WAIT状态\"></a>TIME_WAIT状态</h3><p><strong><code>TIME_WAIT</code>状态是主动关闭方在连接关闭的最后阶段必须经历的。</strong></p>\n<p>在<strong>WAIT_TIME</strong>状态下，主动关闭方会判断本次的四元组不可用，所以此时就算对端重新请求SYN（接收到ACK释放连接之后），也会被拒绝。</p>\n<p>进入该状态时，<strong>TCP会设置时间等待计时器(TIME_WAIT timer)，并等待2MSL的时间才会真正的释放连接，RFC793中建议为2min。</strong></p>\n<p>MSL(Maximum Segment Lifetime)，也可以称为最大报文生存时间，<strong>是报文在所有链路中存在的最大时间，超过就会被丢弃。</strong></p>\n<p>这么做的目的有以下两个：</p>\n<ol>\n<li>为了保证最后的ACK能够到达被动关闭方。</li>\n</ol>\n<p>从有限状态机的图中也可以看到，被动关闭方的连接真正释放是在收到最后一个ACK之后，所以必须要保证ACK的正确发送。</p>\n<p><strong>等待2MSL能够有效避免最终的ACK丢失的情况，ACK不会主动重传，但是对端的FIN会重传直到收到正确的ACK为止。</strong></p>\n<p>2MSL可以粗略的看做是己方ACK发送的时间加上对方FIN重传的时间。</p>\n<p>当一个报连接处于<code>TIME_WAIT</code>状态时，任何延迟到达的报文都会被丢弃，只接收FIN报文。</p>\n<p>另外<strong>TIME_WAIT</strong>的状态是从最后一个ACK发送开始，所以重新响应ACK之后，<strong>TIME_WAIT</strong>也会重新计时。</p>\n<ol start=\"2\">\n<li>保证相同四元组额前后连接报文不混淆</li>\n</ol>\n<p><strong>等待2MSL，就可以使本次连接的报文在链路中全部消失。</strong></p>\n<p>期间TCP会将本次四元组定义为不可用，阻止重连。</p>\n<p>如果不等待，相同四元组的连接如果重连，就有可能导致旧报文发送到新连接的情况，造成数据混乱。</p>\n<p>2MSL是相对保守的处理方式，在ISN能超过上一次连接的最大序列号或者启用了时间戳选项的时候，感觉上可以跳过。</p>\n<h3 id=\"CLOSING-状态\"><a href=\"#CLOSING-状态\" class=\"headerlink\" title=\"CLOSING 状态\"></a>CLOSING 状态</h3><p><code>CLOSING</code>状态是TCP的非典型状态<font size=2>(一般情况下不会出现）</font>。</p>\n<p>只有在上文提到过地<strong>同时关闭</strong>的情况下才会出现，同时关闭的通信双方在接收到对方的FIN，在发送ACK之后进入到<code>CLOSING</code>状态。</p>\n<p>处于<code>CLOSING</code>状态下的通信双方在接收到对方的ACK之后，都会进入<code>TIME_WAIT</code>状态。</p>\n<h2 id=\"四、TCP的重传机制\"><a href=\"#四、TCP的重传机制\" class=\"headerlink\" title=\"四、TCP的重传机制\"></a>四、TCP的重传机制</h2><p>TCP协议往下就是网络层的IP协议，但是IP协议并不提供任何可靠传输的服务，所以我们可以简单认为TCP所处链路都是不可靠的。</p>\n<p>但是TCP介绍中也说了，它提供的是<strong>可靠的传输服务</strong>，因此也就要求TCP协议自身来补足IP协议中的不可靠部分。</p>\n<h3 id=\"可靠传输的基础\"><a href=\"#可靠传输的基础\" class=\"headerlink\" title=\"可靠传输的基础\"></a>可靠传输的基础</h3><p><strong>TCP的重传机制是基于<code>连续ARQ协议</code>实现的。</strong></p>\n<p>维基百科对<code>ARQ</code>的解释如下：</p>\n<blockquote>\n<p>ARQ协议，即自动重传请求（Automatic Repeat-reQuest），是OSI模型中数据链路层和传输层的错误纠正协议之一。它通过使用确认和超时这两个机制，在不可靠服务的基础上实现可靠的信息传输。如果发送方在发送后一段时间之内没有收到确认帧，它通常会重新发送。</p>\n</blockquote>\n<h4 id=\"停止等待ARQ协议\"><a href=\"#停止等待ARQ协议\" class=\"headerlink\" title=\"停止等待ARQ协议\"></a>停止等待ARQ协议</h4><p> <img src=\"https://chenqwwq.oss-cn-hangzhou.aliyuncs.com/note/%E5%81%9C%E6%AD%A2%E7%AD%89%E5%BE%85ARQ.png\"></p>\n<p><strong>一个分组一个分组的发送，在收到确认之前不会发送下一个分组，如果出现超时就重传丢失分组。</strong></p>\n<p>该协议能够完全保证通信的可靠新，但是显而易见的<strong>该协议的利用率很成问题</strong>，在发送完一个分组到确认到达的这段时间信道都是空闲的。</p>\n<p>即使整个链路十分可靠，依旧要等待确认信息的到达。</p>\n<p>而且判断分组是否丢失的算法就是<strong>在一定时间内，是否收到接受的确认信息</strong>，过于粗暴很容易出现伪重传的情况。</p>\n<h4 id=\"连续ARQ协议\"><a href=\"#连续ARQ协议\" class=\"headerlink\" title=\"连续ARQ协议\"></a>连续ARQ协议</h4><p><code>连续ARQ协议</code>可以说是对<code>停止等待ARQ协议</code>的优化。</p>\n<p><strong>在停止等待ARQ协议之上，每次发送多个报文，并等待这些分组的确认信息</strong></p>\n<p> <img src=\"https://chenqwwq.oss-cn-hangzhou.aliyuncs.com/note/%E8%BF%9E%E7%BB%ADARQ.png\"></p>\n<p>连续ARQ协议虽然提高了信道利用率，但是仍然会存在<strong>回退N</strong>等问题。</p>\n<h3 id=\"确认机制\"><a href=\"#确认机制\" class=\"headerlink\" title=\"确认机制\"></a>确认机制</h3><p><strong>确认机制指的就是接收端在收到一个正确的报文时，会给发送端回传一个ACK，表明报文已经到达。</strong></p>\n<h4 id=\"延迟确认-x2F-累计确认机制\"><a href=\"#延迟确认-x2F-累计确认机制\" class=\"headerlink\" title=\"延迟确认&#x2F;累计确认机制\"></a>延迟确认&#x2F;累计确认机制</h4><p><strong>接收端在收到数据之后，并不会立马回传ACK，而是会延迟一定的时间(延迟确认)，发送的时候会以最大有序报文的序号作为ACK的数值(累计确认)。</strong></p>\n<p>这样的目的很明确就是<strong>减少ACK报文的数量，降低ACK造成的网络负担</strong>。</p>\n<h4 id=\"选择确认SACK\"><a href=\"#选择确认SACK\" class=\"headerlink\" title=\"选择确认SACK\"></a>选择确认SACK</h4><p>选择确认是TCP首部中的选项，启用SACK功能需要通信双方事先确认，之前也说过SACK字段是为了<strong>描述接收端的接收缺口，帮助发送方更加准确的重传丢失报文。</strong></p>\n<p>可以在一个ACK报文中，指明多个缺口信息(最多三个)，普通的ACK报文可以看做是单个的缺口信息。</p>\n<h3 id=\"超时重传\"><a href=\"#超时重传\" class=\"headerlink\" title=\"超时重传\"></a>超时重传</h3><p><strong>超时重传又可以称为基于计时器的重传。</strong></p>\n<p>TCP每发送一个报文，都会设定一个<strong>重传计时器</strong>，若在计时器超时时都没有收到确认消息，就会触发重传操作。</p>\n<p>超时重传的整体逻辑并不复杂，但是<strong>超时时间的选择</strong>却是TCP最难的问题之一。</p>\n<p>简单超时时间设置，比如SYN的重传 - <strong>每次SYN重传的超时时间都是上一次的简单加倍</strong>，比如说上次过了2s之后重传报文，这次就应该等待4s或者6s，这种方式称为<strong>二进制指数退避</strong>。</p>\n<p>复杂一点的设置就会根据报文的RTT推算RTO。</p>\n<blockquote>\n<p>RTT （报文段往返时间）- 从报文发出到接受到该报文的ACK所花费的总时间。</p>\n<p>RTO （超时重传时间）- 从报文发出到重传报文所花费的时间，也就是所谓的重传超时时间。</p>\n</blockquote>\n<p><font size=1>这里并不是很懂，就先空着了</font></p>\n<h3 id=\"快速重传\"><a href=\"#快速重传\" class=\"headerlink\" title=\"快速重传\"></a>快速重传</h3><p>快速重传是基于接收端反馈信息的重传模式。</p>\n<p><strong>首先在TCP中，接收方如果收到一个失序的报文段就会立即发送重复的ACK，而不会选择延迟或者累积。</strong></p>\n<p>因此如果接收端的接收缓存中出现缺口，那么后续到达的报文就会 重复确认同一个报文。</p>\n<p>简单的举个例子：</p>\n<p>接收端的缓存中存在的是报文1,2,3,4，且还未发送ACK，如果此时报文6到达，那么接收端就会立马发送一个ACK&#x3D;5的报文，如果报文5一直没有到达，那么在报文7,8,9到达时，都会发送一个ACK&#x3D;5的重复确认报文。</p>\n<p><strong>发送方接收到的重复确认报文达到一定阈值(通常为3)之后，就会立马重传确认报文中指定缺失的报文。</strong></p>\n<p>快速重传同时也是拥塞控制中的重要算法。</p>\n<h3 id=\"伪重传的判定和响应\"><a href=\"#伪重传的判定和响应\" class=\"headerlink\" title=\"伪重传的判定和响应\"></a>伪重传的判定和响应</h3><p>伪重传就是指在没有发生数据丢失时，但仍然进行了重传的情况。</p>\n<p>导致伪重传的原因有超时时间误差，包失序，包重复或者ACK丢失等。</p>\n<p>判定是否是伪重传的方法有以下集中：</p>\n<ol>\n<li><p><strong>DSACK 重复的SACK</strong></p>\n<p>对SACK的增强，<strong>可以在第一次SACK块中可以指明接收端中重复收到的报文端序列号。</strong></p>\n</li>\n<li><p><strong>Eifel检测算法</strong></p>\n<p>该算法需要首部中的时间戳选项支持。</p>\n<p>TCP会在重传的的时候记录下重传报文的TSV，当接收到重传报文是会对比回显TSER和保存的TSV对比。</p>\n<p>如果TSER &lt; TSV，则表示是伪重传。</p>\n</li>\n</ol>\n<p>DSACK只能在接收到重传的ACK之后才能判断此次是否是伪重传，而Eifel检测算法是在第一个ACK到达时，就能判断出来，可能此时重传报文都还没传输到接收端。</p>\n<h3 id=\"重复、失序以及重新组包\"><a href=\"#重复、失序以及重新组包\" class=\"headerlink\" title=\"重复、失序以及重新组包\"></a>重复、失序以及重新组包</h3><h4 id=\"失序\"><a href=\"#失序\" class=\"headerlink\" title=\"失序\"></a>失序</h4><p>包失序可能由IP协议或者链路状态引起，因为IP协议不能保证包的有序发送，而且就算是有序发送但是在动态的网络中也不能保证包有序的到达接收端。</p>\n<p>上文也有提到过，当接收到一个失序的报文时，接收端会立马响应一个ACK。</p>\n<p>少量的失序并不会造成什么影响，但如果失序报文间隔的报文数目超过快速重传的阈值，就会触发重传，还是伪重传。</p>\n<h4 id=\"重复\"><a href=\"#重复\" class=\"headerlink\" title=\"重复\"></a>重复</h4><p>《TCP&#x2F;IP详解 卷一》中也说了IP协议可能出现单次包传输多次的情况，因此也就产生了重复问题。</p>\n<p>重复次数过多也就会触发重传。</p>\n<h4 id=\"重新组包\"><a href=\"#重新组包\" class=\"headerlink\" title=\"重新组包\"></a>重新组包</h4><p>当TCP重传报文时，它并不需要完全重传相同的报文，为了提高性能等原因，可能会发送更大的包。</p>\n<h2 id=\"五、窗口管理\"><a href=\"#五、窗口管理\" class=\"headerlink\" title=\"五、窗口管理\"></a>五、窗口管理</h2><p>TCP协议中采用滑动窗口机制来实现流量控制。<font size=1>(所以窗口管理也是流量控制的关键)</font></p>\n<p><strong>接受端和发送端各自都会维护一个发送窗口结构和一个接受窗口结构。</strong></p>\n<p>窗口结构以字节为单位</p>\n<p>上文也说过TCP首部中窗口字段，是接收端回传给发送端的，并以此作为背压控制发送方的发送窗口大小，这也被称作<strong>通告窗口</strong>。</p>\n<h3 id=\"TCP的流量控制\"><a href=\"#TCP的流量控制\" class=\"headerlink\" title=\"TCP的流量控制\"></a>TCP的流量控制</h3><p>因为TCP的流量控制基本是上基于窗口实现的，所以这块内容我也放到这里了。</p>\n<p><strong>流量控制的的主要目的就是在保持相对较高的传输速率的同时，还要保障收发速度平衡。</strong></p>\n<p>TCP的流量控制机制就是<strong>通过调节ACK数据包中的窗口大小字段实现的</strong>，这种方法在控制发送方速率的同时，也明确了接收方的缓存信息，防止接收方的缓存溢出。</p>\n<h3 id=\"发送端窗口结构\"><a href=\"#发送端窗口结构\" class=\"headerlink\" title=\"发送端窗口结构\"></a>发送端窗口结构</h3><p> <img src=\"/home/chen/.config/Typora/typora-user-images/1569251203979.png\" alt=\"1569251203979\"></p>\n<p>上图即为发送端的窗口结构。</p>\n<p>中间的发送窗口即为活动窗口，TCP会按照顺序发送区间内的报文。</p>\n<p>当接收到返回的数据ACK时，活动窗口也随之右移动，左右两边的相对运动就控制着窗口的大小。</p>\n<p>窗口的活动有图中三种：</p>\n<ol>\n<li><p>关闭（close）-  活动窗口左边界右移，<strong>当收到ACK数据时会进行此操作，使窗口减小。</strong></p>\n</li>\n<li><p>打开（open）-  活动窗口的右边界右移，<strong>当接收的报文被处理时会触发此操作，使窗口增大。</strong></p>\n<p>程序也需要TCP报文中的窗口大小字段判断窗口具体增大多少。</p>\n</li>\n<li><p>收缩（shrink）-  活动窗口的右边界左移动，使窗口减小，<strong>TCP的协议中强烈不建议此操作。</strong></p>\n</li>\n</ol>\n<p><strong>窗口的左边界明确说明不能左移,因为它代表的是已经被确认的数据</strong></p>\n<h3 id=\"接收端窗口结构\"><a href=\"#接收端窗口结构\" class=\"headerlink\" title=\"接收端窗口结构\"></a>接收端窗口结构</h3><p> <img src=\"/home/chen/.config/Typora/typora-user-images/1569252451692.png\" alt=\"1569252451692\"></p>\n<p>对比于发送端，接收端的窗口结构简单很多，<strong>对于活动窗口(接收窗口)内部并不进行细分</strong>。</p>\n<p>如果到达的报文在<strong>接受已确认或者无法接受</strong>范围，则会被丢弃。</p>\n<p>在接受窗口范围内会被缓存，只有在最左边的数据接收到之后整个窗口才能右移。</p>\n<p>同样的接受窗口的左边界不能左移。</p>\n<h3 id=\"零窗口问题\"><a href=\"#零窗口问题\" class=\"headerlink\" title=\"零窗口问题\"></a>零窗口问题</h3><p>当持续收到ACK，但是应用程序并没有及时处理收到的数据(持续关闭，未打开)时，如果左右边界重合，就会出现所谓的<strong>零窗口</strong>现象。</p>\n<p><strong>在接收端窗口扩大重新获得可用窗口空间时，会给发送端发送一个窗口更新报文(window update)，通知其可以继续发送数据。</strong></p>\n<p><strong>送端也会采用一个持续计时器的机制，当计时器超时就会发送窗口探测报文(window probe)，强制要求接收端响应一个ACK报文(首部中包含窗口大小字段)。</strong></p>\n<h3 id=\"Nagle算法\"><a href=\"#Nagle算法\" class=\"headerlink\" title=\"Nagle算法\"></a>Nagle算法</h3><p><strong>Nagle算法通过减少包发送量来增加网络传输的效率。</strong></p>\n<p><strong>小数据包问题</strong>  -  即TCP数据包中有效负载较低的问题，一个数据包中至少20字节的TCP首部以及20字节的IP首部，而真实数据甚至可能只有1字节，这就是很严重的浪费。</p>\n<p>Nagle算法规定：<strong>TCP连接中任意时刻都只能存在一个未经确认的小包，此时不能发送长度小于MSS的包，直到所有数据都ACK之后再合并（coalescing）所有待发送的数据包发送。</strong></p>\n<p>Nagle算法的规则（可参考tcp_output.c文件里tcp_nagle_check函数注释）：</p>\n<p>（1）如果包长度达到MSS，则允许发送；</p>\n<p>（2）如果该包含有FIN，则允许发送；</p>\n<p>（3）设置了TCP_NODELAY选项，则允许发送；</p>\n<p>（4）未设置TCP_CORK选项时，若所有发出去的小数据包（包长度小于MSS）均被确认，则允许发送；</p>\n<p>（5）上述条件都未满足，但发生了超时（一般为200ms），则立即发送。</p>\n<p><font size=1>这段照抄的…</font></p>\n<p>Nagle算法同时迫使TCP遵循了停止-等待协议，或者说扩展了停止-等待协议。</p>\n<p>网络良好的情况下，如果ACK回复的很快，发送端缓存也并没有积累多少数据，此时Nagle算法反而会使整体的传输时间更长。</p>\n<h3 id=\"糊涂窗口综合症（Silly-window-syndrome）\"><a href=\"#糊涂窗口综合症（Silly-window-syndrome）\" class=\"headerlink\" title=\"糊涂窗口综合症（Silly window syndrome）\"></a>糊涂窗口综合症（<strong>Silly window syndrome</strong>）</h3><p> 维基百科百科中对<a href=\"https://w.wikipedia.org/wiki/%E7%B3%8A%E6%B6%82%E7%AA%97%E5%8F%A3%E7%BB%BC%E5%90%88%E7%97%87\">糊涂窗口综合症</a>的说明如下：</p>\n<blockquote>\n<p><strong>糊涂窗口综合症</strong>（<strong>Silly window syndrome</strong>），亦称<strong>愚蠢窗口综合症</strong>、<strong>愚笨窗口综合症</strong>，是<a href=\"https://zh.wikipedia.org/wiki/%E4%BC%A0%E8%BE%93%E6%8E%A7%E5%88%B6%E5%8D%8F%E8%AE%AE\">TCP</a><a href=\"https://zh.wikipedia.org/w/index.php?title=Flow_control_(data)&action=edit&redlink=1\">流量控制</a>实现不良导致的一种<a href=\"https://zh.wikipedia.org/wiki/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C\">计算机网络</a>问题。当发送程序缓慢地创建数据，接收程序缓慢地消耗数据，或者两者同时存在时，滑动窗口运作会出现严重问题。</p>\n</blockquote>\n<p><strong>严重问题</strong>就是指的小数据包问题。</p>\n<p>举个例子：</p>\n<p>若接收端的应用程序处理数据很慢，且每次只处理1个字节的数据，那么接受端的缓存慢慢积累之后就会出现零窗口情况，而处理完1个字节之后缓存有多出了一个字节，此时如果服务端发送窗口更新报文，告诉发送端你只能发送1个字节数据的报文，可想而知效率会有多低。</p>\n<p>导致SWS出现的情况有以下几种：</p>\n<ol>\n<li>接收端通告窗口较小</li>\n<li>发送端发送的数据段较小</li>\n</ol>\n<p>两端都有可能造成SWS，所以也需要同时从两端解决问题，发送端不应该发送小的报文段<font size=1>(此时Nagle算法可以帮助发送端解决部分发送端的问题)</font>，而接收端不应该通告小的窗口。</p>\n<p>根据以上情况具体的规则应该按照发送端和接收端区分，</p>\n<p><strong>针对发送端而言应该交由Nagle算法控制发送的时间</strong>，而且只有满足以下条件，报文才能被传输：</p>\n<ol>\n<li>长度为MSS的报文可以被传输。</li>\n<li>报文长度大于接收端最大窗口值的一半可以发送</li>\n<li>某一ACK不是目前期盼的(重传?)</li>\n<li>连接禁用了Nagle算法</li>\n</ol>\n<p><strong>针对于接收端来说，不应该通告小的窗口值，在窗口增长至一个全长的报文段(MSS)或者接收端缓存空间的一半之前，不能通告该窗口。</strong></p>\n<h2 id=\"六、TCP拥塞控制\"><a href=\"#六、TCP拥塞控制\" class=\"headerlink\" title=\"六、TCP拥塞控制\"></a>六、TCP拥塞控制</h2><ul>\n<li>《TCP&#x2F;IP详解》里该段内容太复杂了，大概的瞥了眼内容，详细的等我以后有空再看吧 。</li>\n</ul>\n<p><strong>拥塞控制的目的就是为了防止过多的包进入链路中，导致链路中的路由器等设备过载而丢弃数据包，引发拥塞。</strong></p>\n<p>TCP协议中，由<strong>发送方维护</strong>一个反映网络传输能力的的变量叫做<strong>拥塞窗口</strong>(cwnd)，所以<strong>发送端的活动窗口实际值为拥塞窗口和通告窗口的较小值。</strong></p>\n<p>拥塞窗口同时</p>\n<p>因为拥塞控制是一个全局性的过程，网络传输能力也不仅仅取决于收发端，所以cwnd也无法取到一个准备的值，只能靠一步步的推测。</p>\n<h3 id=\"慢开始\"><a href=\"#慢开始\" class=\"headerlink\" title=\"慢开始\"></a>慢开始</h3><p>慢开始的目的<strong>是在不清楚网络传输能力的情况下，以少量包慢慢递增的形式进行探测。</strong></p>\n<p><strong>拥塞窗口大小在每次接收到一个正确的ACK时+1</strong>，所以拥塞窗口大小整体呈指数形式递增。</p>\n<p>假设起始的拥塞窗口为n，在每接收到一个ACK之后拥塞窗口加1，所以如果网络良好ACK全部按时收到，那么在第一个RTT时间内拥塞窗口就变为了2n，之后便是4n，以指数增长。</p>\n<p><strong>另外由于接收端的延迟确认机制，所以并不会完全按照指数增长。</strong></p>\n<p><strong>慢开始的慢并不是增长速度慢，而是初始的拥塞窗口小</strong>，在不清楚网络传输能力的情况下，并不会一下子就设置太大的拥塞窗口。</p>\n<p>慢开始的触发条件有以下几个：</p>\n<ol>\n<li>TCP连接刚初始化</li>\n<li>检测到超时重传(丢包)</li>\n<li>长时间处于空闲状态的连接</li>\n</ol>\n<p>另外慢开始还会预先设置一个慢开始门限(ssthresh)：</p>\n<ol>\n<li>当cwnd &lt; ssthresh时，执行慢开始算法</li>\n<li>当cwnd &gt; ssthresh时，改用拥塞避免算法</li>\n<li>当cwnd &#x3D; ssthresh时，慢开始和拥塞避免都可以</li>\n</ol>\n<p>慢开始门限并不是固定的，而是会随着时间变化，它代表的是TCP对最佳窗口大小的估计值。</p>\n<p><strong>慢启动状态下，TCP判断是否发生拥塞的依据就是是否有丢包。</strong></p>\n<h3 id=\"拥塞避免\"><a href=\"#拥塞避免\" class=\"headerlink\" title=\"拥塞避免\"></a>拥塞避免</h3><p><strong>拥塞避免的作用就是让cwnd缓慢的线性增长。</strong></p>\n<p>虽然是慢开始，但是指数增长的速度过于快速，所以在达到阈值之后会改用拥塞避免。</p>\n<p><strong>慢开始和拥塞避免最大的区别就在于ACK到达之后cwnd如何变化。</strong></p>\n<p>不论是在慢开始还是用三个避免阶段，只要出现重传的情况(重传就表示TCP判定出现丢包)，TCP就会认为此时的cwnd超出网络传输能力，此时会将慢启动门限(ssthresh)减半。</p>\n<h3 id=\"快恢复\"><a href=\"#快恢复\" class=\"headerlink\" title=\"快恢复\"></a>快恢复</h3><p><strong>快恢复</strong>（Fast recovery）是Reno算法新引入的一个阶段，在将丢失的分段重传后，启动一个超时定时器，并等待该丢失分段包的分段确认后，再进入拥塞控制阶段。如果仍然超时，则回到慢启动阶段。</p>\n<p>快恢复算法需要<strong>快重传</strong>配合，在接收到三个连续的ACK(触发快速重传时)，快恢复算法会执行如下流程：</p>\n<ol>\n<li>慢开始门限减半(ssthresh&#x2F;2)</li>\n<li>执行快重传算法，设置拥塞窗口(cwnd)为减半门限(ssthresh&#x2F;2) + 3MSS(也有不加的TCP实现)</li>\n<li>每接受到一个重复ACK报文，拥塞窗口(cwnd)临时+1</li>\n<li>接收到正确的ACK报文时，cwnd被设置到减半门限(ssthresh&#x2F;2)</li>\n</ol>\n<p>拥塞控制的流程图：</p>\n<p>  <img src=\"https://chenqwwq.oss-cn-hangzhou.aliyuncs.com/note/%E6%8B%A5%E5%A1%9E%E6%8E%A7%E5%88%B6.jpg\" alt=\"img\"></p>\n<h3 id=\"TCP-Reno和TCP-Tahoe\"><a href=\"#TCP-Reno和TCP-Tahoe\" class=\"headerlink\" title=\"TCP Reno和TCP Tahoe\"></a>TCP Reno和TCP Tahoe</h3><p>TCP Reno和TCP Tahoe是两种不同的拥塞控制算法。</p>\n<p><strong>两种算法对于拥塞的判断都是根据重传超时或者重复确认。</strong></p>\n<p>如果发生重传超时两种算法的处理逻辑一致，都会将拥塞窗口设置为1MSS，然后重新开始慢开始算法。</p>\n<p>但是对于重复确认来说两种算法不同：</p>\n<p>Tahoe算法在收到超过阈值的重复ACK之后先触发的快速重传算法，<strong>将慢开始门限设置为当前拥塞窗口(cwnd)的一半，拥塞窗口变为1MSS，再重新开始慢开始算法。</strong></p>\n<p>Reno不同的在于快速重传之后的处理，首先慢开始门限是减半，变为当前慢开始门限的一半+3MSS，而且跳过慢开始阶段，直接以减半的慢开始门限作为拥塞窗口(cwnd)，直接跑拥塞避免。</p>\n"},{"title":"工作总结（2022 上半年","date":"2022-06-28T15:15:09.000Z","excerpt":"算是总结下毕业到现在的工作经历吧，有点惨，但是充满希望！（Hahaha，希望别被自己奶死","index_img":"https://chenqwwq.oss-cn-hangzhou.aliyuncs.com/note/image-20220628%E4%B8%8B%E5%8D%88112402931.png","banner_img":"https://chenqwwq.oss-cn-hangzhou.aliyuncs.com/note/image-20220628%E4%B8%8B%E5%8D%88114158930.png","mermaid":true,"_content":"\n\n# 工作总结（2022 上半年\n\n之所以有个总结是因为我换工作了，2022年4月10号我正式从**学海教育**离职，这是我2018年毕业之后呆的最久的一家公司。\n\n因为我的职业起点比较低，从一家外包公司开始（杭州齐圣科技），所以毕业到现在的四年可能都算是在 IT 行业的底层挣扎，这里要不对我毕业之后的所有经历再做一个总结吧。\n\n\n\n## 凄凄惨惨的职业经历\n\n我是14年6月份入学的浙江农林大学物联网专业，大学里面就是普通的打打游戏，吃喝玩乐的生活，大一大二还有学业大三没有那么抓学业之后就不知道干啥了。\n\n先学的网络，后转的码农。\n\n### 实习、转正\n\n2018年4月入职实习并且转正的公司 - **杭州齐圣科技有限公司**，当时对外包都没有什么概念，所以也不会考虑到外包对我个人职业生涯的影响什么的了，单纯的就是想混个三方协议。\n\n入职之后，实习工作加班就不少，但是对我自己来说却是出奇的开心，因为公司在浙江树人大学（鬼知道我是不是抱着别的想法，emmm）和浙江大学城市学院边上，所以入职的小伙伴都是大学毕业或者待毕业的，同龄人聊得来日子就很开心（无知且开心。\n\n当时也没有什么技术压力，偶尔看看 HashMap 的源码以及 JUC 的源码都感觉自己牛的不行（Hahhh，属实是愚妄之巅了），印象最深刻的就是旁边的同事放了一本《深入了解 Java 虚拟机》我还上前问了一嘴什么是  Java 虚拟机。\n\n公司的架构师设计的用户中心跨服务的调用都还是个人对 HttpURLConnection 的封装，所有的 HTTP 规范都没有，所有的 bug 都是先联调在解决，现在想想当时是怎么觉得架构师牛逼的？\n\n虽然当时只有2k的实习工资，还经常联调到2点，emmm，但是就很开心。\n\n在2018年8月还是9月，也就是我拿到毕业证和学位之后就转正了，工资也到了5k（这是直接翻倍多的工资啊，很开心。\n\n<br>\n\n### 被裁\n\n在2018年10月还是11月，公司开始裁员了，好像说中美贸易战打得一些股东撤资了，并且很多项目回款困难，所以就开刀，我那时真的就是刚毕业，身无分文的情况下突然的被毕业，真的是懵了。\n\n在争取到半个月2.5k的赔偿后就离职了，很突然我也迷茫，不知道未来在哪。\n\n<br>\n\n被裁之后我就在租住的小屋里面呆了半个月（10平不到的小屋子，还是签了租金贷的，当时是真的年轻啊，社会对初入社会的人太残忍了！）。\n\n屋子朝北，还没显示器大的窗户外是走廊，下雨天衣服晒不干整个房间都是水臭和霉味，在房间里打打游戏渡过了几天之后我加入了一个 QQ 群聊 crossover 开源交流社区，我感觉这个可能是我的一个转折点。\n\n因为群里面不乏真正的大佬和已经入行几年的前辈，和他们聊天的同时我了解到了行业的情况，知道了我和高级码农的差距，同时也定下了我学习的目标。\n\n（初入社会的码农啊，连 Java 虚拟机是啥都不知道，连 Redis 都没用过，迷茫的一塌糊涂。\n\n接下来的一个星期，我直接啃完了整本的《深入了解 Java 虚拟机》，算是重新入门 Java 学习吧，后续又定了 《Java编程思想》，《Redis设计与实现》的阅读计划等等。\n\n<br>\n\n### 过渡\n\n当时被裁的时候拿到了2.5k的赔偿，但是每个月有1.3k的房租，而且还有自己的吃喝，断了收入之后已经块身无分文了（下个月房租都成问题那种，所以就又开始了找工作。\n\n这次找工作因为没有什么要求所以出奇的顺利，再面了**趣链**被挂了之后，面到了一家**杭州慧舍有限公司**，还涨了1.5k，月薪到6.5k，慧舍就是个小工作室，员工不超过30人，而且工资还是一半卡一半支付宝的（Hahahah，之前一直搞不懂为什么这么麻烦。\n\n在这里渡过了三四个月的时间，负责公司合伙人的一个外包项目的同时也抓紧时间学习（这段时间可能是我学习最快的时间了。\n\n三四个月里，看完了 《Redis设计与实现》，《MySQL技术内幕：InnoDB存储引擎》，也开始在 Leetcode 上，刷《剑指Offer系列》。\n\n加班依旧是不少了，不过我已经很习惯了，每天早起骑自行车差不多半个小时才能到公司，记得有次下班贼大的雨骑着车被疾驰而过的工程车溅了一身的泥水，但总体还是充满希望的。\n\n并且也是这段时间在 crossover 开源交流社区 认识了北枳和三岁等朋友，对我来说都是大哥，当时我是微服务和分布式都讲不清的菜🐔。\n\n<br>\n\n### 新希望\n\n过完年我就开始我的找工作之旅，第一家就是**杭州玛瑙湾科技有限公司**，面试的过程不算顺利，技术 Leader 海哥的题目我接不住啊，面试结束之后还见了 CEO，hahaha，CEO 亲切多了。\n\n但是隔天我就接到了 hr 的电话，说是面试通过了，虽然最后定薪是6k，但是我也去了，一是基于脱离外包背景，二是玛瑙湾我找实习的时候就听过，感觉上是一家不错的公司。\n\n玛瑙湾的日子真的就是加班地狱，在接手玛仔小贷之后，感觉没一天不在加班的，公司规定就是8.30才能打卡下班。\n\n这段期间我还内推了三岁来玛瑙湾，现在想想真是对不起他啊，emmmm\n\n我房子也搬到了西溪边上的蒋村花园，房租贵了500多但是房间确实大了很多，在19年6月还领养了一只猫，取名药丸。\n\n<img src=\"https://chenqwwq.oss-cn-hangzhou.aliyuncs.com/note/image-20220627160325618-20220628%E4%B8%8B%E5%8D%88111220270.png\" alt=\"image-20220627160325618\" style=\"zoom:100%;\" />\n\n<img src=\"https://chenqwwq.oss-cn-hangzhou.aliyuncs.com/note/image-20220627160350177.png\" alt=\"image-20220627160350177\" style=\"zoom:55%;\" />\n\n（猫猫小时候真可爱啊，虽然那个时候我也穷但是也还是领养了一只陪陪自己。\n\n说回玛瑙湾吧，玛瑙湾的办公区中间有一张台球桌每次加班主要干的事情就是在边上看别人打台球，所以加班也没那么累。\n\n那个时候工资不高，但是也算够用，就是没有什么结余，说到这里就不得不吐槽一下当时的 CEO 了，让我们选择平时工资高一点还是年终高一点，后者总包高一点。\n\n我当时义无反顾的选择了前者，然后就遇到了后面的事情。\n\n19年9月，中央下达了文件，要在20年6月份前清退所有的p2p公司（清退，我理解就是直接不给开了。\n\n然后我的工作性质就变了，从原来的 Java 开发工程师无比憋屈的变成了现场接待员，接待一些上门要钱要说法的用户，接待的人少部分情绪激动的感觉还有被泼一脸水的风险。\n\n19年的元旦，公司被立案了，老板好想进去了一阵子，经侦的警察拿着公司的花名册在公司内宣布：公司的人在公司退还所有欠款之前都不能离职。\n\n当时感觉是有被追缴工资的风险的，因为记得已经有先例了，但是我拿得又不高，emmmm 就很无辜。\n\n不需要现场接待之后，我又被转到了在线接待，日子相对清闲也不需要担心被用户打，但是连番的事情真的是搞的我心力交瘁。\n\n1月中旬也就是20年新年以前，公司突然宣布了解散，真的就是大会议室直接宣布的解散，然后我好像又失业了。\n\n我不怪老板，政策风险老板也没办法规避，只是感觉很难受，从实习起两年的工作经历我一分钱都没存下来，还把公积金都取光了。\n\n\n\n### 在家闲赋\n\n20年一月中旬开始在家过年顺便在家躲疫情，到三月底为止，杭州都不给我进了，自然也没办法找工作。\n\n（过年还收到了玛瑙湾老板娘的红包，Hahah，虽然艰难但是也挺温暖了。\n\n在玛瑙湾期间开始的刷题在家期间被我坚持住了，还重新看了一遍《计算机网络：自顶向下方法》重新理解一下 TCP 协议，也开始了背单词。\n\n（丢人的是我知道毕业四级都没过，高考63分的底子真的太差了，被高中词汇都很累。\n\n在家期间还发生了一件事，是差不多大年初一还是初二的时候，因为刚开始以为只回家一星期多，所以药丸就还留在杭州托一个妹子上门喂养。\n\n但是那个时候网上有谣言，说动物会传播新冠（也有说导致新冠的），所以房东阿姨竟然说让我把猫弄走不然要把猫扔出去！？？\n\n第二天没我允许的情况下进我房间，并且各种指责，我是真的烦这种，虽然房子总归属在你，但是我租了之后也没权利随便进我房间吧。\n\n后面托小姐姐帮我把猫送到了三岁的房间一起照顾（我和三岁在同个小区。\n\n\n\n### 重新开始\n\n我是差不多20年3月下旬回到的杭州，因为房东已经不允许继续养猫了，所以药丸还留在三岁家（哈哈哈，真的感谢三岁大哥帮我照顾了这么久。\n\n因为在玛瑙湾的时候只有6k的薪资，而且20年1月份的薪资也没有发，再加上公司因为资金被封2、3月份的社保都是自行缴纳的，此时我已经欠家里将近2w了。\n\n（工作两年，负债2w，真有我的。\n\n然后就是新一轮的找工作了，因为没接触过微服务体系，所以找工作也很艰难。\n\n过了两次**安恒信息**，但是死扛着10k的薪资，所以最终也没去，后面短暂入职了一家做安全的公司，开得13.5k，感觉上是不差钱的，但是去了之后发现是政府的外包（纯纯的，\n\n所以周四入职之后，下周一就离职了（Hahahah，快夸我果断，后续又面了**上海轻轻教育**等中小公司，始终没有满意的。\n\n并在后续面过了**杭州学海教育科技有限公司**，就去入职了（真没钱了！。\n\n\n\n\n\n### 学海无涯\n\n学海的日子是充实的，起码刚开始很充实，哈哈哈，在刚入职的时候就给学海搞了个P0级别的事故，差点过不了试用期，真有我的（🐮气冲天。\n\n在学海是第一次接触到 SpringCloud 那一套体系，我没有深入去看很多源码，但是建立起了对微服务的理解，以及针对的看了 OpenFeign 等一些 RPC 框架，算是有了初步的理解。\n\n（Feign 是轻量级的 HTTP 客户端，也能完成 RPC 的远程调用功能，所以我觉得也算是 RPC 框架。\n\n另外还有限流，降级，熔断的理解（emm，这里没有在实际项目中用到，但是我看了 Sentinel 的实现，还有 Hystrix 的官方文档也算有个初步的理解。\n\n学会了基于接口的单元测试，我也不清楚这算不算单元测试，以接口为对象，mock 各种场景，测试各种边界参数和正常请求，我负责的项目常年保持75%也是真的费时间。\n\n另外就是 Netty，因为负责的项目包含了公司内部的推送，虽然没单独实现过大模块但是多少参与了开发，对 Netty 的理解基本就是这两年建立起来的（还给 Netty 官方提供了几行优化代码。\n\n遗憾的是项目中没有用到 Elasticsearch，这个是我比较感兴趣的内容了。\n\n还有还有，这段时间学了 Go 的基础，还写了 mit6.824 的前四个 lab，单纯学习一门技术真的很爽啊，我对 Raft 理解基本就建立在这几个 lab 里面了。\n\n在学海期间，我背单词大计也没拉下，每天从40慢慢涨到90，从初中词汇到高中到四级到现在的考研词汇，而且一直坚持 leetcode 的每日一题，竞赛分也是突破了2000。\n\n\n\n\n\n### 新征程\n\n22年4月10日，我离开了学海。\n\n一方面是学海的薪资待遇确实低了点，和朋友们的对比让我很有薪资焦虑，再来就是双减下，我负责的模块已经逐渐边缘化，各类无效需求改来改去，我已经失去对产品的热情了，而且公司的状况感觉也是每况愈下。\n\n其实我的找工作是21年9月份开始的，那个时候面过了丁香园拒绝了，海康薪资达不到要求，网易和得物挂在了二面（都面了好久，90分钟多的面试，感觉很有希望的），有赞挂在的offer。\n\n有赞其实很有希望的，一面之后的现场面一上午就完成了二面、三面、hr面，一面的面试官都问我入职时间了，最后却没了下文，感谢信也没有，好像是锁hc了。\n\n因为有赞的关系我拒绝了丁香园，但是有赞却没有后续的，我就僵住了，心态多多少少有点崩，然后就开始了新一轮的补充学习。\n\n补充了一下 XXl-JOB的实现（网易问的），以及 Hystrix 的源码（这个我是真看不下去，Reactor 语法由衷不喜欢。\n\n然后就是今年3月份，我没想到这么难。\n\n网易简历直接挂，字节也是，挂了一轮又一轮，挂到我绝望，因为和去年相比我自信多了，我感觉网易的面试我很有信心，但是怎奈连机会都没给我。\n\n面试的机会很少，但是我都把握住了，今年过了 **达西电商**、**安恒信息**、**申通**、**政采云**，还有另外几家中小型公司，基本都拿到了翻倍的待遇。\n\n本来是打算去**申通**，一面的面试官很看好我的样子面试结束就加我微信了，而且我也有意往物流供应链的方向转，但奈何背调没有过。\n\n<br>\n\n背调这事说起来真的是一肚子火，上文我也说了我们年前解散但是手续什么都没办，回家之后因为疫情就耽搁了，到三月底我才办完手续拿到的离职证明。\n\n我和背调人员说了这个情况，但是他们好像就按照1月份提交上去了，我很奇怪我自己都没办法确认的离职他们是怎么确定的，在我流程中止后的第二天背调找我要社保记录以及薪资流水。\n\n然后我就懵了，你们是怎么确定的我离职时间，按照薪资流水我就是12月份离职的，按照社保记录我就是1月份离职的，按照办手续拿离职证明的时间我就是3月离职的。\n\n唉，最后反正是结束了，很难受但也没办法了，只能说我自己也抱着侥幸心理，希望简历好看一点。\n\n<br>\n\n最终权衡之下，选择了**政采云**。\n\n我已经入职一星期多了，但是不能说多满意，公司的项目在我目前短浅的看来并不具备多少技术难度和并发，只能说薪资待遇和公司稳定度上是满足我的要求的。\n\n<br>\n\n\n\n## 总结\n\n现在我已经不敢选择什么职业方向了，选择互联网金融可能有朋友推荐的影响，最终却暴雷了，选择教育是出于我个人对教育的看好，最终也遇到了双减。\n\n现在的我可能只期望找一家稳定的公司，刷一刷我简历的稳定程度。\n\n从毕业到现在经历了四五家公司，个人意向的离职算起来只有学海一次，也是基于行业的陌路，但是简历上真的太花了（也难免被那么多公司挂简历。\n\n<br>\n\n我需要进一步的充电学习，虽然是咸鱼但还是梦想大厂，希望自己有一天能入职字节和阿里这样的大公司。\n\n接下来应该会对 ES 以及 mit6.s081 进行集中学习，继续背单词。\n\n人菜还能怎么办呢，卷起来！\n","source":"_posts/学习生活总结（2022上半年.md","raw":"---\ntitle: 工作总结（2022 上半年\ndate: 2022-06-28 23:15:09\nexcerpt: 算是总结下毕业到现在的工作经历吧，有点惨，但是充满希望！（Hahaha，希望别被自己奶死\nindex_img: https://chenqwwq.oss-cn-hangzhou.aliyuncs.com/note/image-20220628%E4%B8%8B%E5%8D%88112402931.png\nbanner_img: https://chenqwwq.oss-cn-hangzhou.aliyuncs.com/note/image-20220628%E4%B8%8B%E5%8D%88114158930.png\nmermaid: true\ncategories:\n- 个人向记录\ntags:\n- 工作\n---\n\n\n# 工作总结（2022 上半年\n\n之所以有个总结是因为我换工作了，2022年4月10号我正式从**学海教育**离职，这是我2018年毕业之后呆的最久的一家公司。\n\n因为我的职业起点比较低，从一家外包公司开始（杭州齐圣科技），所以毕业到现在的四年可能都算是在 IT 行业的底层挣扎，这里要不对我毕业之后的所有经历再做一个总结吧。\n\n\n\n## 凄凄惨惨的职业经历\n\n我是14年6月份入学的浙江农林大学物联网专业，大学里面就是普通的打打游戏，吃喝玩乐的生活，大一大二还有学业大三没有那么抓学业之后就不知道干啥了。\n\n先学的网络，后转的码农。\n\n### 实习、转正\n\n2018年4月入职实习并且转正的公司 - **杭州齐圣科技有限公司**，当时对外包都没有什么概念，所以也不会考虑到外包对我个人职业生涯的影响什么的了，单纯的就是想混个三方协议。\n\n入职之后，实习工作加班就不少，但是对我自己来说却是出奇的开心，因为公司在浙江树人大学（鬼知道我是不是抱着别的想法，emmm）和浙江大学城市学院边上，所以入职的小伙伴都是大学毕业或者待毕业的，同龄人聊得来日子就很开心（无知且开心。\n\n当时也没有什么技术压力，偶尔看看 HashMap 的源码以及 JUC 的源码都感觉自己牛的不行（Hahhh，属实是愚妄之巅了），印象最深刻的就是旁边的同事放了一本《深入了解 Java 虚拟机》我还上前问了一嘴什么是  Java 虚拟机。\n\n公司的架构师设计的用户中心跨服务的调用都还是个人对 HttpURLConnection 的封装，所有的 HTTP 规范都没有，所有的 bug 都是先联调在解决，现在想想当时是怎么觉得架构师牛逼的？\n\n虽然当时只有2k的实习工资，还经常联调到2点，emmm，但是就很开心。\n\n在2018年8月还是9月，也就是我拿到毕业证和学位之后就转正了，工资也到了5k（这是直接翻倍多的工资啊，很开心。\n\n<br>\n\n### 被裁\n\n在2018年10月还是11月，公司开始裁员了，好像说中美贸易战打得一些股东撤资了，并且很多项目回款困难，所以就开刀，我那时真的就是刚毕业，身无分文的情况下突然的被毕业，真的是懵了。\n\n在争取到半个月2.5k的赔偿后就离职了，很突然我也迷茫，不知道未来在哪。\n\n<br>\n\n被裁之后我就在租住的小屋里面呆了半个月（10平不到的小屋子，还是签了租金贷的，当时是真的年轻啊，社会对初入社会的人太残忍了！）。\n\n屋子朝北，还没显示器大的窗户外是走廊，下雨天衣服晒不干整个房间都是水臭和霉味，在房间里打打游戏渡过了几天之后我加入了一个 QQ 群聊 crossover 开源交流社区，我感觉这个可能是我的一个转折点。\n\n因为群里面不乏真正的大佬和已经入行几年的前辈，和他们聊天的同时我了解到了行业的情况，知道了我和高级码农的差距，同时也定下了我学习的目标。\n\n（初入社会的码农啊，连 Java 虚拟机是啥都不知道，连 Redis 都没用过，迷茫的一塌糊涂。\n\n接下来的一个星期，我直接啃完了整本的《深入了解 Java 虚拟机》，算是重新入门 Java 学习吧，后续又定了 《Java编程思想》，《Redis设计与实现》的阅读计划等等。\n\n<br>\n\n### 过渡\n\n当时被裁的时候拿到了2.5k的赔偿，但是每个月有1.3k的房租，而且还有自己的吃喝，断了收入之后已经块身无分文了（下个月房租都成问题那种，所以就又开始了找工作。\n\n这次找工作因为没有什么要求所以出奇的顺利，再面了**趣链**被挂了之后，面到了一家**杭州慧舍有限公司**，还涨了1.5k，月薪到6.5k，慧舍就是个小工作室，员工不超过30人，而且工资还是一半卡一半支付宝的（Hahahah，之前一直搞不懂为什么这么麻烦。\n\n在这里渡过了三四个月的时间，负责公司合伙人的一个外包项目的同时也抓紧时间学习（这段时间可能是我学习最快的时间了。\n\n三四个月里，看完了 《Redis设计与实现》，《MySQL技术内幕：InnoDB存储引擎》，也开始在 Leetcode 上，刷《剑指Offer系列》。\n\n加班依旧是不少了，不过我已经很习惯了，每天早起骑自行车差不多半个小时才能到公司，记得有次下班贼大的雨骑着车被疾驰而过的工程车溅了一身的泥水，但总体还是充满希望的。\n\n并且也是这段时间在 crossover 开源交流社区 认识了北枳和三岁等朋友，对我来说都是大哥，当时我是微服务和分布式都讲不清的菜🐔。\n\n<br>\n\n### 新希望\n\n过完年我就开始我的找工作之旅，第一家就是**杭州玛瑙湾科技有限公司**，面试的过程不算顺利，技术 Leader 海哥的题目我接不住啊，面试结束之后还见了 CEO，hahaha，CEO 亲切多了。\n\n但是隔天我就接到了 hr 的电话，说是面试通过了，虽然最后定薪是6k，但是我也去了，一是基于脱离外包背景，二是玛瑙湾我找实习的时候就听过，感觉上是一家不错的公司。\n\n玛瑙湾的日子真的就是加班地狱，在接手玛仔小贷之后，感觉没一天不在加班的，公司规定就是8.30才能打卡下班。\n\n这段期间我还内推了三岁来玛瑙湾，现在想想真是对不起他啊，emmmm\n\n我房子也搬到了西溪边上的蒋村花园，房租贵了500多但是房间确实大了很多，在19年6月还领养了一只猫，取名药丸。\n\n<img src=\"https://chenqwwq.oss-cn-hangzhou.aliyuncs.com/note/image-20220627160325618-20220628%E4%B8%8B%E5%8D%88111220270.png\" alt=\"image-20220627160325618\" style=\"zoom:100%;\" />\n\n<img src=\"https://chenqwwq.oss-cn-hangzhou.aliyuncs.com/note/image-20220627160350177.png\" alt=\"image-20220627160350177\" style=\"zoom:55%;\" />\n\n（猫猫小时候真可爱啊，虽然那个时候我也穷但是也还是领养了一只陪陪自己。\n\n说回玛瑙湾吧，玛瑙湾的办公区中间有一张台球桌每次加班主要干的事情就是在边上看别人打台球，所以加班也没那么累。\n\n那个时候工资不高，但是也算够用，就是没有什么结余，说到这里就不得不吐槽一下当时的 CEO 了，让我们选择平时工资高一点还是年终高一点，后者总包高一点。\n\n我当时义无反顾的选择了前者，然后就遇到了后面的事情。\n\n19年9月，中央下达了文件，要在20年6月份前清退所有的p2p公司（清退，我理解就是直接不给开了。\n\n然后我的工作性质就变了，从原来的 Java 开发工程师无比憋屈的变成了现场接待员，接待一些上门要钱要说法的用户，接待的人少部分情绪激动的感觉还有被泼一脸水的风险。\n\n19年的元旦，公司被立案了，老板好想进去了一阵子，经侦的警察拿着公司的花名册在公司内宣布：公司的人在公司退还所有欠款之前都不能离职。\n\n当时感觉是有被追缴工资的风险的，因为记得已经有先例了，但是我拿得又不高，emmmm 就很无辜。\n\n不需要现场接待之后，我又被转到了在线接待，日子相对清闲也不需要担心被用户打，但是连番的事情真的是搞的我心力交瘁。\n\n1月中旬也就是20年新年以前，公司突然宣布了解散，真的就是大会议室直接宣布的解散，然后我好像又失业了。\n\n我不怪老板，政策风险老板也没办法规避，只是感觉很难受，从实习起两年的工作经历我一分钱都没存下来，还把公积金都取光了。\n\n\n\n### 在家闲赋\n\n20年一月中旬开始在家过年顺便在家躲疫情，到三月底为止，杭州都不给我进了，自然也没办法找工作。\n\n（过年还收到了玛瑙湾老板娘的红包，Hahah，虽然艰难但是也挺温暖了。\n\n在玛瑙湾期间开始的刷题在家期间被我坚持住了，还重新看了一遍《计算机网络：自顶向下方法》重新理解一下 TCP 协议，也开始了背单词。\n\n（丢人的是我知道毕业四级都没过，高考63分的底子真的太差了，被高中词汇都很累。\n\n在家期间还发生了一件事，是差不多大年初一还是初二的时候，因为刚开始以为只回家一星期多，所以药丸就还留在杭州托一个妹子上门喂养。\n\n但是那个时候网上有谣言，说动物会传播新冠（也有说导致新冠的），所以房东阿姨竟然说让我把猫弄走不然要把猫扔出去！？？\n\n第二天没我允许的情况下进我房间，并且各种指责，我是真的烦这种，虽然房子总归属在你，但是我租了之后也没权利随便进我房间吧。\n\n后面托小姐姐帮我把猫送到了三岁的房间一起照顾（我和三岁在同个小区。\n\n\n\n### 重新开始\n\n我是差不多20年3月下旬回到的杭州，因为房东已经不允许继续养猫了，所以药丸还留在三岁家（哈哈哈，真的感谢三岁大哥帮我照顾了这么久。\n\n因为在玛瑙湾的时候只有6k的薪资，而且20年1月份的薪资也没有发，再加上公司因为资金被封2、3月份的社保都是自行缴纳的，此时我已经欠家里将近2w了。\n\n（工作两年，负债2w，真有我的。\n\n然后就是新一轮的找工作了，因为没接触过微服务体系，所以找工作也很艰难。\n\n过了两次**安恒信息**，但是死扛着10k的薪资，所以最终也没去，后面短暂入职了一家做安全的公司，开得13.5k，感觉上是不差钱的，但是去了之后发现是政府的外包（纯纯的，\n\n所以周四入职之后，下周一就离职了（Hahahah，快夸我果断，后续又面了**上海轻轻教育**等中小公司，始终没有满意的。\n\n并在后续面过了**杭州学海教育科技有限公司**，就去入职了（真没钱了！。\n\n\n\n\n\n### 学海无涯\n\n学海的日子是充实的，起码刚开始很充实，哈哈哈，在刚入职的时候就给学海搞了个P0级别的事故，差点过不了试用期，真有我的（🐮气冲天。\n\n在学海是第一次接触到 SpringCloud 那一套体系，我没有深入去看很多源码，但是建立起了对微服务的理解，以及针对的看了 OpenFeign 等一些 RPC 框架，算是有了初步的理解。\n\n（Feign 是轻量级的 HTTP 客户端，也能完成 RPC 的远程调用功能，所以我觉得也算是 RPC 框架。\n\n另外还有限流，降级，熔断的理解（emm，这里没有在实际项目中用到，但是我看了 Sentinel 的实现，还有 Hystrix 的官方文档也算有个初步的理解。\n\n学会了基于接口的单元测试，我也不清楚这算不算单元测试，以接口为对象，mock 各种场景，测试各种边界参数和正常请求，我负责的项目常年保持75%也是真的费时间。\n\n另外就是 Netty，因为负责的项目包含了公司内部的推送，虽然没单独实现过大模块但是多少参与了开发，对 Netty 的理解基本就是这两年建立起来的（还给 Netty 官方提供了几行优化代码。\n\n遗憾的是项目中没有用到 Elasticsearch，这个是我比较感兴趣的内容了。\n\n还有还有，这段时间学了 Go 的基础，还写了 mit6.824 的前四个 lab，单纯学习一门技术真的很爽啊，我对 Raft 理解基本就建立在这几个 lab 里面了。\n\n在学海期间，我背单词大计也没拉下，每天从40慢慢涨到90，从初中词汇到高中到四级到现在的考研词汇，而且一直坚持 leetcode 的每日一题，竞赛分也是突破了2000。\n\n\n\n\n\n### 新征程\n\n22年4月10日，我离开了学海。\n\n一方面是学海的薪资待遇确实低了点，和朋友们的对比让我很有薪资焦虑，再来就是双减下，我负责的模块已经逐渐边缘化，各类无效需求改来改去，我已经失去对产品的热情了，而且公司的状况感觉也是每况愈下。\n\n其实我的找工作是21年9月份开始的，那个时候面过了丁香园拒绝了，海康薪资达不到要求，网易和得物挂在了二面（都面了好久，90分钟多的面试，感觉很有希望的），有赞挂在的offer。\n\n有赞其实很有希望的，一面之后的现场面一上午就完成了二面、三面、hr面，一面的面试官都问我入职时间了，最后却没了下文，感谢信也没有，好像是锁hc了。\n\n因为有赞的关系我拒绝了丁香园，但是有赞却没有后续的，我就僵住了，心态多多少少有点崩，然后就开始了新一轮的补充学习。\n\n补充了一下 XXl-JOB的实现（网易问的），以及 Hystrix 的源码（这个我是真看不下去，Reactor 语法由衷不喜欢。\n\n然后就是今年3月份，我没想到这么难。\n\n网易简历直接挂，字节也是，挂了一轮又一轮，挂到我绝望，因为和去年相比我自信多了，我感觉网易的面试我很有信心，但是怎奈连机会都没给我。\n\n面试的机会很少，但是我都把握住了，今年过了 **达西电商**、**安恒信息**、**申通**、**政采云**，还有另外几家中小型公司，基本都拿到了翻倍的待遇。\n\n本来是打算去**申通**，一面的面试官很看好我的样子面试结束就加我微信了，而且我也有意往物流供应链的方向转，但奈何背调没有过。\n\n<br>\n\n背调这事说起来真的是一肚子火，上文我也说了我们年前解散但是手续什么都没办，回家之后因为疫情就耽搁了，到三月底我才办完手续拿到的离职证明。\n\n我和背调人员说了这个情况，但是他们好像就按照1月份提交上去了，我很奇怪我自己都没办法确认的离职他们是怎么确定的，在我流程中止后的第二天背调找我要社保记录以及薪资流水。\n\n然后我就懵了，你们是怎么确定的我离职时间，按照薪资流水我就是12月份离职的，按照社保记录我就是1月份离职的，按照办手续拿离职证明的时间我就是3月离职的。\n\n唉，最后反正是结束了，很难受但也没办法了，只能说我自己也抱着侥幸心理，希望简历好看一点。\n\n<br>\n\n最终权衡之下，选择了**政采云**。\n\n我已经入职一星期多了，但是不能说多满意，公司的项目在我目前短浅的看来并不具备多少技术难度和并发，只能说薪资待遇和公司稳定度上是满足我的要求的。\n\n<br>\n\n\n\n## 总结\n\n现在我已经不敢选择什么职业方向了，选择互联网金融可能有朋友推荐的影响，最终却暴雷了，选择教育是出于我个人对教育的看好，最终也遇到了双减。\n\n现在的我可能只期望找一家稳定的公司，刷一刷我简历的稳定程度。\n\n从毕业到现在经历了四五家公司，个人意向的离职算起来只有学海一次，也是基于行业的陌路，但是简历上真的太花了（也难免被那么多公司挂简历。\n\n<br>\n\n我需要进一步的充电学习，虽然是咸鱼但还是梦想大厂，希望自己有一天能入职字节和阿里这样的大公司。\n\n接下来应该会对 ES 以及 mit6.s081 进行集中学习，继续背单词。\n\n人菜还能怎么办呢，卷起来！\n","slug":"学习生活总结（2022上半年","published":1,"updated":"2022-08-29T14:58:10.646Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clk87sjyk000uwnbvdiwwbnqz","content":"<h1 id=\"工作总结（2022-上半年\"><a href=\"#工作总结（2022-上半年\" class=\"headerlink\" title=\"工作总结（2022 上半年\"></a>工作总结（2022 上半年</h1><p>之所以有个总结是因为我换工作了，2022年4月10号我正式从<strong>学海教育</strong>离职，这是我2018年毕业之后呆的最久的一家公司。</p>\n<p>因为我的职业起点比较低，从一家外包公司开始（杭州齐圣科技），所以毕业到现在的四年可能都算是在 IT 行业的底层挣扎，这里要不对我毕业之后的所有经历再做一个总结吧。</p>\n<h2 id=\"凄凄惨惨的职业经历\"><a href=\"#凄凄惨惨的职业经历\" class=\"headerlink\" title=\"凄凄惨惨的职业经历\"></a>凄凄惨惨的职业经历</h2><p>我是14年6月份入学的浙江农林大学物联网专业，大学里面就是普通的打打游戏，吃喝玩乐的生活，大一大二还有学业大三没有那么抓学业之后就不知道干啥了。</p>\n<p>先学的网络，后转的码农。</p>\n<h3 id=\"实习、转正\"><a href=\"#实习、转正\" class=\"headerlink\" title=\"实习、转正\"></a>实习、转正</h3><p>2018年4月入职实习并且转正的公司 - <strong>杭州齐圣科技有限公司</strong>，当时对外包都没有什么概念，所以也不会考虑到外包对我个人职业生涯的影响什么的了，单纯的就是想混个三方协议。</p>\n<p>入职之后，实习工作加班就不少，但是对我自己来说却是出奇的开心，因为公司在浙江树人大学（鬼知道我是不是抱着别的想法，emmm）和浙江大学城市学院边上，所以入职的小伙伴都是大学毕业或者待毕业的，同龄人聊得来日子就很开心（无知且开心。</p>\n<p>当时也没有什么技术压力，偶尔看看 HashMap 的源码以及 JUC 的源码都感觉自己牛的不行（Hahhh，属实是愚妄之巅了），印象最深刻的就是旁边的同事放了一本《深入了解 Java 虚拟机》我还上前问了一嘴什么是  Java 虚拟机。</p>\n<p>公司的架构师设计的用户中心跨服务的调用都还是个人对 HttpURLConnection 的封装，所有的 HTTP 规范都没有，所有的 bug 都是先联调在解决，现在想想当时是怎么觉得架构师牛逼的？</p>\n<p>虽然当时只有2k的实习工资，还经常联调到2点，emmm，但是就很开心。</p>\n<p>在2018年8月还是9月，也就是我拿到毕业证和学位之后就转正了，工资也到了5k（这是直接翻倍多的工资啊，很开心。</p>\n<br>\n\n<h3 id=\"被裁\"><a href=\"#被裁\" class=\"headerlink\" title=\"被裁\"></a>被裁</h3><p>在2018年10月还是11月，公司开始裁员了，好像说中美贸易战打得一些股东撤资了，并且很多项目回款困难，所以就开刀，我那时真的就是刚毕业，身无分文的情况下突然的被毕业，真的是懵了。</p>\n<p>在争取到半个月2.5k的赔偿后就离职了，很突然我也迷茫，不知道未来在哪。</p>\n<br>\n\n<p>被裁之后我就在租住的小屋里面呆了半个月（10平不到的小屋子，还是签了租金贷的，当时是真的年轻啊，社会对初入社会的人太残忍了！）。</p>\n<p>屋子朝北，还没显示器大的窗户外是走廊，下雨天衣服晒不干整个房间都是水臭和霉味，在房间里打打游戏渡过了几天之后我加入了一个 QQ 群聊 crossover 开源交流社区，我感觉这个可能是我的一个转折点。</p>\n<p>因为群里面不乏真正的大佬和已经入行几年的前辈，和他们聊天的同时我了解到了行业的情况，知道了我和高级码农的差距，同时也定下了我学习的目标。</p>\n<p>（初入社会的码农啊，连 Java 虚拟机是啥都不知道，连 Redis 都没用过，迷茫的一塌糊涂。</p>\n<p>接下来的一个星期，我直接啃完了整本的《深入了解 Java 虚拟机》，算是重新入门 Java 学习吧，后续又定了 《Java编程思想》，《Redis设计与实现》的阅读计划等等。</p>\n<br>\n\n<h3 id=\"过渡\"><a href=\"#过渡\" class=\"headerlink\" title=\"过渡\"></a>过渡</h3><p>当时被裁的时候拿到了2.5k的赔偿，但是每个月有1.3k的房租，而且还有自己的吃喝，断了收入之后已经块身无分文了（下个月房租都成问题那种，所以就又开始了找工作。</p>\n<p>这次找工作因为没有什么要求所以出奇的顺利，再面了<strong>趣链</strong>被挂了之后，面到了一家<strong>杭州慧舍有限公司</strong>，还涨了1.5k，月薪到6.5k，慧舍就是个小工作室，员工不超过30人，而且工资还是一半卡一半支付宝的（Hahahah，之前一直搞不懂为什么这么麻烦。</p>\n<p>在这里渡过了三四个月的时间，负责公司合伙人的一个外包项目的同时也抓紧时间学习（这段时间可能是我学习最快的时间了。</p>\n<p>三四个月里，看完了 《Redis设计与实现》，《MySQL技术内幕：InnoDB存储引擎》，也开始在 Leetcode 上，刷《剑指Offer系列》。</p>\n<p>加班依旧是不少了，不过我已经很习惯了，每天早起骑自行车差不多半个小时才能到公司，记得有次下班贼大的雨骑着车被疾驰而过的工程车溅了一身的泥水，但总体还是充满希望的。</p>\n<p>并且也是这段时间在 crossover 开源交流社区 认识了北枳和三岁等朋友，对我来说都是大哥，当时我是微服务和分布式都讲不清的菜🐔。</p>\n<br>\n\n<h3 id=\"新希望\"><a href=\"#新希望\" class=\"headerlink\" title=\"新希望\"></a>新希望</h3><p>过完年我就开始我的找工作之旅，第一家就是<strong>杭州玛瑙湾科技有限公司</strong>，面试的过程不算顺利，技术 Leader 海哥的题目我接不住啊，面试结束之后还见了 CEO，hahaha，CEO 亲切多了。</p>\n<p>但是隔天我就接到了 hr 的电话，说是面试通过了，虽然最后定薪是6k，但是我也去了，一是基于脱离外包背景，二是玛瑙湾我找实习的时候就听过，感觉上是一家不错的公司。</p>\n<p>玛瑙湾的日子真的就是加班地狱，在接手玛仔小贷之后，感觉没一天不在加班的，公司规定就是8.30才能打卡下班。</p>\n<p>这段期间我还内推了三岁来玛瑙湾，现在想想真是对不起他啊，emmmm</p>\n<p>我房子也搬到了西溪边上的蒋村花园，房租贵了500多但是房间确实大了很多，在19年6月还领养了一只猫，取名药丸。</p>\n<img src=\"https://chenqwwq.oss-cn-hangzhou.aliyuncs.com/note/image-20220627160325618-20220628%E4%B8%8B%E5%8D%88111220270.png\" alt=\"image-20220627160325618\" style=\"zoom:100%;\" />\n\n<img src=\"https://chenqwwq.oss-cn-hangzhou.aliyuncs.com/note/image-20220627160350177.png\" alt=\"image-20220627160350177\" style=\"zoom:55%;\" />\n\n<p>（猫猫小时候真可爱啊，虽然那个时候我也穷但是也还是领养了一只陪陪自己。</p>\n<p>说回玛瑙湾吧，玛瑙湾的办公区中间有一张台球桌每次加班主要干的事情就是在边上看别人打台球，所以加班也没那么累。</p>\n<p>那个时候工资不高，但是也算够用，就是没有什么结余，说到这里就不得不吐槽一下当时的 CEO 了，让我们选择平时工资高一点还是年终高一点，后者总包高一点。</p>\n<p>我当时义无反顾的选择了前者，然后就遇到了后面的事情。</p>\n<p>19年9月，中央下达了文件，要在20年6月份前清退所有的p2p公司（清退，我理解就是直接不给开了。</p>\n<p>然后我的工作性质就变了，从原来的 Java 开发工程师无比憋屈的变成了现场接待员，接待一些上门要钱要说法的用户，接待的人少部分情绪激动的感觉还有被泼一脸水的风险。</p>\n<p>19年的元旦，公司被立案了，老板好想进去了一阵子，经侦的警察拿着公司的花名册在公司内宣布：公司的人在公司退还所有欠款之前都不能离职。</p>\n<p>当时感觉是有被追缴工资的风险的，因为记得已经有先例了，但是我拿得又不高，emmmm 就很无辜。</p>\n<p>不需要现场接待之后，我又被转到了在线接待，日子相对清闲也不需要担心被用户打，但是连番的事情真的是搞的我心力交瘁。</p>\n<p>1月中旬也就是20年新年以前，公司突然宣布了解散，真的就是大会议室直接宣布的解散，然后我好像又失业了。</p>\n<p>我不怪老板，政策风险老板也没办法规避，只是感觉很难受，从实习起两年的工作经历我一分钱都没存下来，还把公积金都取光了。</p>\n<h3 id=\"在家闲赋\"><a href=\"#在家闲赋\" class=\"headerlink\" title=\"在家闲赋\"></a>在家闲赋</h3><p>20年一月中旬开始在家过年顺便在家躲疫情，到三月底为止，杭州都不给我进了，自然也没办法找工作。</p>\n<p>（过年还收到了玛瑙湾老板娘的红包，Hahah，虽然艰难但是也挺温暖了。</p>\n<p>在玛瑙湾期间开始的刷题在家期间被我坚持住了，还重新看了一遍《计算机网络：自顶向下方法》重新理解一下 TCP 协议，也开始了背单词。</p>\n<p>（丢人的是我知道毕业四级都没过，高考63分的底子真的太差了，被高中词汇都很累。</p>\n<p>在家期间还发生了一件事，是差不多大年初一还是初二的时候，因为刚开始以为只回家一星期多，所以药丸就还留在杭州托一个妹子上门喂养。</p>\n<p>但是那个时候网上有谣言，说动物会传播新冠（也有说导致新冠的），所以房东阿姨竟然说让我把猫弄走不然要把猫扔出去！？？</p>\n<p>第二天没我允许的情况下进我房间，并且各种指责，我是真的烦这种，虽然房子总归属在你，但是我租了之后也没权利随便进我房间吧。</p>\n<p>后面托小姐姐帮我把猫送到了三岁的房间一起照顾（我和三岁在同个小区。</p>\n<h3 id=\"重新开始\"><a href=\"#重新开始\" class=\"headerlink\" title=\"重新开始\"></a>重新开始</h3><p>我是差不多20年3月下旬回到的杭州，因为房东已经不允许继续养猫了，所以药丸还留在三岁家（哈哈哈，真的感谢三岁大哥帮我照顾了这么久。</p>\n<p>因为在玛瑙湾的时候只有6k的薪资，而且20年1月份的薪资也没有发，再加上公司因为资金被封2、3月份的社保都是自行缴纳的，此时我已经欠家里将近2w了。</p>\n<p>（工作两年，负债2w，真有我的。</p>\n<p>然后就是新一轮的找工作了，因为没接触过微服务体系，所以找工作也很艰难。</p>\n<p>过了两次<strong>安恒信息</strong>，但是死扛着10k的薪资，所以最终也没去，后面短暂入职了一家做安全的公司，开得13.5k，感觉上是不差钱的，但是去了之后发现是政府的外包（纯纯的，</p>\n<p>所以周四入职之后，下周一就离职了（Hahahah，快夸我果断，后续又面了<strong>上海轻轻教育</strong>等中小公司，始终没有满意的。</p>\n<p>并在后续面过了<strong>杭州学海教育科技有限公司</strong>，就去入职了（真没钱了！。</p>\n<h3 id=\"学海无涯\"><a href=\"#学海无涯\" class=\"headerlink\" title=\"学海无涯\"></a>学海无涯</h3><p>学海的日子是充实的，起码刚开始很充实，哈哈哈，在刚入职的时候就给学海搞了个P0级别的事故，差点过不了试用期，真有我的（🐮气冲天。</p>\n<p>在学海是第一次接触到 SpringCloud 那一套体系，我没有深入去看很多源码，但是建立起了对微服务的理解，以及针对的看了 OpenFeign 等一些 RPC 框架，算是有了初步的理解。</p>\n<p>（Feign 是轻量级的 HTTP 客户端，也能完成 RPC 的远程调用功能，所以我觉得也算是 RPC 框架。</p>\n<p>另外还有限流，降级，熔断的理解（emm，这里没有在实际项目中用到，但是我看了 Sentinel 的实现，还有 Hystrix 的官方文档也算有个初步的理解。</p>\n<p>学会了基于接口的单元测试，我也不清楚这算不算单元测试，以接口为对象，mock 各种场景，测试各种边界参数和正常请求，我负责的项目常年保持75%也是真的费时间。</p>\n<p>另外就是 Netty，因为负责的项目包含了公司内部的推送，虽然没单独实现过大模块但是多少参与了开发，对 Netty 的理解基本就是这两年建立起来的（还给 Netty 官方提供了几行优化代码。</p>\n<p>遗憾的是项目中没有用到 Elasticsearch，这个是我比较感兴趣的内容了。</p>\n<p>还有还有，这段时间学了 Go 的基础，还写了 mit6.824 的前四个 lab，单纯学习一门技术真的很爽啊，我对 Raft 理解基本就建立在这几个 lab 里面了。</p>\n<p>在学海期间，我背单词大计也没拉下，每天从40慢慢涨到90，从初中词汇到高中到四级到现在的考研词汇，而且一直坚持 leetcode 的每日一题，竞赛分也是突破了2000。</p>\n<h3 id=\"新征程\"><a href=\"#新征程\" class=\"headerlink\" title=\"新征程\"></a>新征程</h3><p>22年4月10日，我离开了学海。</p>\n<p>一方面是学海的薪资待遇确实低了点，和朋友们的对比让我很有薪资焦虑，再来就是双减下，我负责的模块已经逐渐边缘化，各类无效需求改来改去，我已经失去对产品的热情了，而且公司的状况感觉也是每况愈下。</p>\n<p>其实我的找工作是21年9月份开始的，那个时候面过了丁香园拒绝了，海康薪资达不到要求，网易和得物挂在了二面（都面了好久，90分钟多的面试，感觉很有希望的），有赞挂在的offer。</p>\n<p>有赞其实很有希望的，一面之后的现场面一上午就完成了二面、三面、hr面，一面的面试官都问我入职时间了，最后却没了下文，感谢信也没有，好像是锁hc了。</p>\n<p>因为有赞的关系我拒绝了丁香园，但是有赞却没有后续的，我就僵住了，心态多多少少有点崩，然后就开始了新一轮的补充学习。</p>\n<p>补充了一下 XXl-JOB的实现（网易问的），以及 Hystrix 的源码（这个我是真看不下去，Reactor 语法由衷不喜欢。</p>\n<p>然后就是今年3月份，我没想到这么难。</p>\n<p>网易简历直接挂，字节也是，挂了一轮又一轮，挂到我绝望，因为和去年相比我自信多了，我感觉网易的面试我很有信心，但是怎奈连机会都没给我。</p>\n<p>面试的机会很少，但是我都把握住了，今年过了 <strong>达西电商</strong>、<strong>安恒信息</strong>、<strong>申通</strong>、<strong>政采云</strong>，还有另外几家中小型公司，基本都拿到了翻倍的待遇。</p>\n<p>本来是打算去<strong>申通</strong>，一面的面试官很看好我的样子面试结束就加我微信了，而且我也有意往物流供应链的方向转，但奈何背调没有过。</p>\n<br>\n\n<p>背调这事说起来真的是一肚子火，上文我也说了我们年前解散但是手续什么都没办，回家之后因为疫情就耽搁了，到三月底我才办完手续拿到的离职证明。</p>\n<p>我和背调人员说了这个情况，但是他们好像就按照1月份提交上去了，我很奇怪我自己都没办法确认的离职他们是怎么确定的，在我流程中止后的第二天背调找我要社保记录以及薪资流水。</p>\n<p>然后我就懵了，你们是怎么确定的我离职时间，按照薪资流水我就是12月份离职的，按照社保记录我就是1月份离职的，按照办手续拿离职证明的时间我就是3月离职的。</p>\n<p>唉，最后反正是结束了，很难受但也没办法了，只能说我自己也抱着侥幸心理，希望简历好看一点。</p>\n<br>\n\n<p>最终权衡之下，选择了<strong>政采云</strong>。</p>\n<p>我已经入职一星期多了，但是不能说多满意，公司的项目在我目前短浅的看来并不具备多少技术难度和并发，只能说薪资待遇和公司稳定度上是满足我的要求的。</p>\n<br>\n\n\n\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>现在我已经不敢选择什么职业方向了，选择互联网金融可能有朋友推荐的影响，最终却暴雷了，选择教育是出于我个人对教育的看好，最终也遇到了双减。</p>\n<p>现在的我可能只期望找一家稳定的公司，刷一刷我简历的稳定程度。</p>\n<p>从毕业到现在经历了四五家公司，个人意向的离职算起来只有学海一次，也是基于行业的陌路，但是简历上真的太花了（也难免被那么多公司挂简历。</p>\n<br>\n\n<p>我需要进一步的充电学习，虽然是咸鱼但还是梦想大厂，希望自己有一天能入职字节和阿里这样的大公司。</p>\n<p>接下来应该会对 ES 以及 mit6.s081 进行集中学习，继续背单词。</p>\n<p>人菜还能怎么办呢，卷起来！</p>\n","site":{"data":{}},"more":"<h1 id=\"工作总结（2022-上半年\"><a href=\"#工作总结（2022-上半年\" class=\"headerlink\" title=\"工作总结（2022 上半年\"></a>工作总结（2022 上半年</h1><p>之所以有个总结是因为我换工作了，2022年4月10号我正式从<strong>学海教育</strong>离职，这是我2018年毕业之后呆的最久的一家公司。</p>\n<p>因为我的职业起点比较低，从一家外包公司开始（杭州齐圣科技），所以毕业到现在的四年可能都算是在 IT 行业的底层挣扎，这里要不对我毕业之后的所有经历再做一个总结吧。</p>\n<h2 id=\"凄凄惨惨的职业经历\"><a href=\"#凄凄惨惨的职业经历\" class=\"headerlink\" title=\"凄凄惨惨的职业经历\"></a>凄凄惨惨的职业经历</h2><p>我是14年6月份入学的浙江农林大学物联网专业，大学里面就是普通的打打游戏，吃喝玩乐的生活，大一大二还有学业大三没有那么抓学业之后就不知道干啥了。</p>\n<p>先学的网络，后转的码农。</p>\n<h3 id=\"实习、转正\"><a href=\"#实习、转正\" class=\"headerlink\" title=\"实习、转正\"></a>实习、转正</h3><p>2018年4月入职实习并且转正的公司 - <strong>杭州齐圣科技有限公司</strong>，当时对外包都没有什么概念，所以也不会考虑到外包对我个人职业生涯的影响什么的了，单纯的就是想混个三方协议。</p>\n<p>入职之后，实习工作加班就不少，但是对我自己来说却是出奇的开心，因为公司在浙江树人大学（鬼知道我是不是抱着别的想法，emmm）和浙江大学城市学院边上，所以入职的小伙伴都是大学毕业或者待毕业的，同龄人聊得来日子就很开心（无知且开心。</p>\n<p>当时也没有什么技术压力，偶尔看看 HashMap 的源码以及 JUC 的源码都感觉自己牛的不行（Hahhh，属实是愚妄之巅了），印象最深刻的就是旁边的同事放了一本《深入了解 Java 虚拟机》我还上前问了一嘴什么是  Java 虚拟机。</p>\n<p>公司的架构师设计的用户中心跨服务的调用都还是个人对 HttpURLConnection 的封装，所有的 HTTP 规范都没有，所有的 bug 都是先联调在解决，现在想想当时是怎么觉得架构师牛逼的？</p>\n<p>虽然当时只有2k的实习工资，还经常联调到2点，emmm，但是就很开心。</p>\n<p>在2018年8月还是9月，也就是我拿到毕业证和学位之后就转正了，工资也到了5k（这是直接翻倍多的工资啊，很开心。</p>\n<br>\n\n<h3 id=\"被裁\"><a href=\"#被裁\" class=\"headerlink\" title=\"被裁\"></a>被裁</h3><p>在2018年10月还是11月，公司开始裁员了，好像说中美贸易战打得一些股东撤资了，并且很多项目回款困难，所以就开刀，我那时真的就是刚毕业，身无分文的情况下突然的被毕业，真的是懵了。</p>\n<p>在争取到半个月2.5k的赔偿后就离职了，很突然我也迷茫，不知道未来在哪。</p>\n<br>\n\n<p>被裁之后我就在租住的小屋里面呆了半个月（10平不到的小屋子，还是签了租金贷的，当时是真的年轻啊，社会对初入社会的人太残忍了！）。</p>\n<p>屋子朝北，还没显示器大的窗户外是走廊，下雨天衣服晒不干整个房间都是水臭和霉味，在房间里打打游戏渡过了几天之后我加入了一个 QQ 群聊 crossover 开源交流社区，我感觉这个可能是我的一个转折点。</p>\n<p>因为群里面不乏真正的大佬和已经入行几年的前辈，和他们聊天的同时我了解到了行业的情况，知道了我和高级码农的差距，同时也定下了我学习的目标。</p>\n<p>（初入社会的码农啊，连 Java 虚拟机是啥都不知道，连 Redis 都没用过，迷茫的一塌糊涂。</p>\n<p>接下来的一个星期，我直接啃完了整本的《深入了解 Java 虚拟机》，算是重新入门 Java 学习吧，后续又定了 《Java编程思想》，《Redis设计与实现》的阅读计划等等。</p>\n<br>\n\n<h3 id=\"过渡\"><a href=\"#过渡\" class=\"headerlink\" title=\"过渡\"></a>过渡</h3><p>当时被裁的时候拿到了2.5k的赔偿，但是每个月有1.3k的房租，而且还有自己的吃喝，断了收入之后已经块身无分文了（下个月房租都成问题那种，所以就又开始了找工作。</p>\n<p>这次找工作因为没有什么要求所以出奇的顺利，再面了<strong>趣链</strong>被挂了之后，面到了一家<strong>杭州慧舍有限公司</strong>，还涨了1.5k，月薪到6.5k，慧舍就是个小工作室，员工不超过30人，而且工资还是一半卡一半支付宝的（Hahahah，之前一直搞不懂为什么这么麻烦。</p>\n<p>在这里渡过了三四个月的时间，负责公司合伙人的一个外包项目的同时也抓紧时间学习（这段时间可能是我学习最快的时间了。</p>\n<p>三四个月里，看完了 《Redis设计与实现》，《MySQL技术内幕：InnoDB存储引擎》，也开始在 Leetcode 上，刷《剑指Offer系列》。</p>\n<p>加班依旧是不少了，不过我已经很习惯了，每天早起骑自行车差不多半个小时才能到公司，记得有次下班贼大的雨骑着车被疾驰而过的工程车溅了一身的泥水，但总体还是充满希望的。</p>\n<p>并且也是这段时间在 crossover 开源交流社区 认识了北枳和三岁等朋友，对我来说都是大哥，当时我是微服务和分布式都讲不清的菜🐔。</p>\n<br>\n\n<h3 id=\"新希望\"><a href=\"#新希望\" class=\"headerlink\" title=\"新希望\"></a>新希望</h3><p>过完年我就开始我的找工作之旅，第一家就是<strong>杭州玛瑙湾科技有限公司</strong>，面试的过程不算顺利，技术 Leader 海哥的题目我接不住啊，面试结束之后还见了 CEO，hahaha，CEO 亲切多了。</p>\n<p>但是隔天我就接到了 hr 的电话，说是面试通过了，虽然最后定薪是6k，但是我也去了，一是基于脱离外包背景，二是玛瑙湾我找实习的时候就听过，感觉上是一家不错的公司。</p>\n<p>玛瑙湾的日子真的就是加班地狱，在接手玛仔小贷之后，感觉没一天不在加班的，公司规定就是8.30才能打卡下班。</p>\n<p>这段期间我还内推了三岁来玛瑙湾，现在想想真是对不起他啊，emmmm</p>\n<p>我房子也搬到了西溪边上的蒋村花园，房租贵了500多但是房间确实大了很多，在19年6月还领养了一只猫，取名药丸。</p>\n<img src=\"https://chenqwwq.oss-cn-hangzhou.aliyuncs.com/note/image-20220627160325618-20220628%E4%B8%8B%E5%8D%88111220270.png\" alt=\"image-20220627160325618\" style=\"zoom:100%;\" />\n\n<img src=\"https://chenqwwq.oss-cn-hangzhou.aliyuncs.com/note/image-20220627160350177.png\" alt=\"image-20220627160350177\" style=\"zoom:55%;\" />\n\n<p>（猫猫小时候真可爱啊，虽然那个时候我也穷但是也还是领养了一只陪陪自己。</p>\n<p>说回玛瑙湾吧，玛瑙湾的办公区中间有一张台球桌每次加班主要干的事情就是在边上看别人打台球，所以加班也没那么累。</p>\n<p>那个时候工资不高，但是也算够用，就是没有什么结余，说到这里就不得不吐槽一下当时的 CEO 了，让我们选择平时工资高一点还是年终高一点，后者总包高一点。</p>\n<p>我当时义无反顾的选择了前者，然后就遇到了后面的事情。</p>\n<p>19年9月，中央下达了文件，要在20年6月份前清退所有的p2p公司（清退，我理解就是直接不给开了。</p>\n<p>然后我的工作性质就变了，从原来的 Java 开发工程师无比憋屈的变成了现场接待员，接待一些上门要钱要说法的用户，接待的人少部分情绪激动的感觉还有被泼一脸水的风险。</p>\n<p>19年的元旦，公司被立案了，老板好想进去了一阵子，经侦的警察拿着公司的花名册在公司内宣布：公司的人在公司退还所有欠款之前都不能离职。</p>\n<p>当时感觉是有被追缴工资的风险的，因为记得已经有先例了，但是我拿得又不高，emmmm 就很无辜。</p>\n<p>不需要现场接待之后，我又被转到了在线接待，日子相对清闲也不需要担心被用户打，但是连番的事情真的是搞的我心力交瘁。</p>\n<p>1月中旬也就是20年新年以前，公司突然宣布了解散，真的就是大会议室直接宣布的解散，然后我好像又失业了。</p>\n<p>我不怪老板，政策风险老板也没办法规避，只是感觉很难受，从实习起两年的工作经历我一分钱都没存下来，还把公积金都取光了。</p>\n<h3 id=\"在家闲赋\"><a href=\"#在家闲赋\" class=\"headerlink\" title=\"在家闲赋\"></a>在家闲赋</h3><p>20年一月中旬开始在家过年顺便在家躲疫情，到三月底为止，杭州都不给我进了，自然也没办法找工作。</p>\n<p>（过年还收到了玛瑙湾老板娘的红包，Hahah，虽然艰难但是也挺温暖了。</p>\n<p>在玛瑙湾期间开始的刷题在家期间被我坚持住了，还重新看了一遍《计算机网络：自顶向下方法》重新理解一下 TCP 协议，也开始了背单词。</p>\n<p>（丢人的是我知道毕业四级都没过，高考63分的底子真的太差了，被高中词汇都很累。</p>\n<p>在家期间还发生了一件事，是差不多大年初一还是初二的时候，因为刚开始以为只回家一星期多，所以药丸就还留在杭州托一个妹子上门喂养。</p>\n<p>但是那个时候网上有谣言，说动物会传播新冠（也有说导致新冠的），所以房东阿姨竟然说让我把猫弄走不然要把猫扔出去！？？</p>\n<p>第二天没我允许的情况下进我房间，并且各种指责，我是真的烦这种，虽然房子总归属在你，但是我租了之后也没权利随便进我房间吧。</p>\n<p>后面托小姐姐帮我把猫送到了三岁的房间一起照顾（我和三岁在同个小区。</p>\n<h3 id=\"重新开始\"><a href=\"#重新开始\" class=\"headerlink\" title=\"重新开始\"></a>重新开始</h3><p>我是差不多20年3月下旬回到的杭州，因为房东已经不允许继续养猫了，所以药丸还留在三岁家（哈哈哈，真的感谢三岁大哥帮我照顾了这么久。</p>\n<p>因为在玛瑙湾的时候只有6k的薪资，而且20年1月份的薪资也没有发，再加上公司因为资金被封2、3月份的社保都是自行缴纳的，此时我已经欠家里将近2w了。</p>\n<p>（工作两年，负债2w，真有我的。</p>\n<p>然后就是新一轮的找工作了，因为没接触过微服务体系，所以找工作也很艰难。</p>\n<p>过了两次<strong>安恒信息</strong>，但是死扛着10k的薪资，所以最终也没去，后面短暂入职了一家做安全的公司，开得13.5k，感觉上是不差钱的，但是去了之后发现是政府的外包（纯纯的，</p>\n<p>所以周四入职之后，下周一就离职了（Hahahah，快夸我果断，后续又面了<strong>上海轻轻教育</strong>等中小公司，始终没有满意的。</p>\n<p>并在后续面过了<strong>杭州学海教育科技有限公司</strong>，就去入职了（真没钱了！。</p>\n<h3 id=\"学海无涯\"><a href=\"#学海无涯\" class=\"headerlink\" title=\"学海无涯\"></a>学海无涯</h3><p>学海的日子是充实的，起码刚开始很充实，哈哈哈，在刚入职的时候就给学海搞了个P0级别的事故，差点过不了试用期，真有我的（🐮气冲天。</p>\n<p>在学海是第一次接触到 SpringCloud 那一套体系，我没有深入去看很多源码，但是建立起了对微服务的理解，以及针对的看了 OpenFeign 等一些 RPC 框架，算是有了初步的理解。</p>\n<p>（Feign 是轻量级的 HTTP 客户端，也能完成 RPC 的远程调用功能，所以我觉得也算是 RPC 框架。</p>\n<p>另外还有限流，降级，熔断的理解（emm，这里没有在实际项目中用到，但是我看了 Sentinel 的实现，还有 Hystrix 的官方文档也算有个初步的理解。</p>\n<p>学会了基于接口的单元测试，我也不清楚这算不算单元测试，以接口为对象，mock 各种场景，测试各种边界参数和正常请求，我负责的项目常年保持75%也是真的费时间。</p>\n<p>另外就是 Netty，因为负责的项目包含了公司内部的推送，虽然没单独实现过大模块但是多少参与了开发，对 Netty 的理解基本就是这两年建立起来的（还给 Netty 官方提供了几行优化代码。</p>\n<p>遗憾的是项目中没有用到 Elasticsearch，这个是我比较感兴趣的内容了。</p>\n<p>还有还有，这段时间学了 Go 的基础，还写了 mit6.824 的前四个 lab，单纯学习一门技术真的很爽啊，我对 Raft 理解基本就建立在这几个 lab 里面了。</p>\n<p>在学海期间，我背单词大计也没拉下，每天从40慢慢涨到90，从初中词汇到高中到四级到现在的考研词汇，而且一直坚持 leetcode 的每日一题，竞赛分也是突破了2000。</p>\n<h3 id=\"新征程\"><a href=\"#新征程\" class=\"headerlink\" title=\"新征程\"></a>新征程</h3><p>22年4月10日，我离开了学海。</p>\n<p>一方面是学海的薪资待遇确实低了点，和朋友们的对比让我很有薪资焦虑，再来就是双减下，我负责的模块已经逐渐边缘化，各类无效需求改来改去，我已经失去对产品的热情了，而且公司的状况感觉也是每况愈下。</p>\n<p>其实我的找工作是21年9月份开始的，那个时候面过了丁香园拒绝了，海康薪资达不到要求，网易和得物挂在了二面（都面了好久，90分钟多的面试，感觉很有希望的），有赞挂在的offer。</p>\n<p>有赞其实很有希望的，一面之后的现场面一上午就完成了二面、三面、hr面，一面的面试官都问我入职时间了，最后却没了下文，感谢信也没有，好像是锁hc了。</p>\n<p>因为有赞的关系我拒绝了丁香园，但是有赞却没有后续的，我就僵住了，心态多多少少有点崩，然后就开始了新一轮的补充学习。</p>\n<p>补充了一下 XXl-JOB的实现（网易问的），以及 Hystrix 的源码（这个我是真看不下去，Reactor 语法由衷不喜欢。</p>\n<p>然后就是今年3月份，我没想到这么难。</p>\n<p>网易简历直接挂，字节也是，挂了一轮又一轮，挂到我绝望，因为和去年相比我自信多了，我感觉网易的面试我很有信心，但是怎奈连机会都没给我。</p>\n<p>面试的机会很少，但是我都把握住了，今年过了 <strong>达西电商</strong>、<strong>安恒信息</strong>、<strong>申通</strong>、<strong>政采云</strong>，还有另外几家中小型公司，基本都拿到了翻倍的待遇。</p>\n<p>本来是打算去<strong>申通</strong>，一面的面试官很看好我的样子面试结束就加我微信了，而且我也有意往物流供应链的方向转，但奈何背调没有过。</p>\n<br>\n\n<p>背调这事说起来真的是一肚子火，上文我也说了我们年前解散但是手续什么都没办，回家之后因为疫情就耽搁了，到三月底我才办完手续拿到的离职证明。</p>\n<p>我和背调人员说了这个情况，但是他们好像就按照1月份提交上去了，我很奇怪我自己都没办法确认的离职他们是怎么确定的，在我流程中止后的第二天背调找我要社保记录以及薪资流水。</p>\n<p>然后我就懵了，你们是怎么确定的我离职时间，按照薪资流水我就是12月份离职的，按照社保记录我就是1月份离职的，按照办手续拿离职证明的时间我就是3月离职的。</p>\n<p>唉，最后反正是结束了，很难受但也没办法了，只能说我自己也抱着侥幸心理，希望简历好看一点。</p>\n<br>\n\n<p>最终权衡之下，选择了<strong>政采云</strong>。</p>\n<p>我已经入职一星期多了，但是不能说多满意，公司的项目在我目前短浅的看来并不具备多少技术难度和并发，只能说薪资待遇和公司稳定度上是满足我的要求的。</p>\n<br>\n\n\n\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>现在我已经不敢选择什么职业方向了，选择互联网金融可能有朋友推荐的影响，最终却暴雷了，选择教育是出于我个人对教育的看好，最终也遇到了双减。</p>\n<p>现在的我可能只期望找一家稳定的公司，刷一刷我简历的稳定程度。</p>\n<p>从毕业到现在经历了四五家公司，个人意向的离职算起来只有学海一次，也是基于行业的陌路，但是简历上真的太花了（也难免被那么多公司挂简历。</p>\n<br>\n\n<p>我需要进一步的充电学习，虽然是咸鱼但还是梦想大厂，希望自己有一天能入职字节和阿里这样的大公司。</p>\n<p>接下来应该会对 ES 以及 mit6.s081 进行集中学习，继续背单词。</p>\n<p>人菜还能怎么办呢，卷起来！</p>\n"},{"title":"浅析 JVM 类加载子系统","date":"2021-06-05T07:42:06.000Z","excerpt":"Java 的类加载子系统负责从网络或者本地文件等多途径获取以 .class 结尾的字节码文件，并解析成基本的 Class 类。","index_img":"https://chenqwwq.oss-cn-hangzhou.aliyuncs.com/note/JVM%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%AD%90%E7%B3%BB%E7%BB%9F-7942505.png","banner_img":"https://chenqwwq.oss-cn-hangzhou.aliyuncs.com/note/JVM%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%AD%90%E7%B3%BB%E7%BB%9F-7942505.png","mermaid":true,"_content":"\n\n\n# 类加载子系统\n\n\n\n## 思维导图\n\n![JVM 类加载子系统](https://chenqwwq.oss-cn-hangzhou.aliyuncs.com/note/JVM%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%AD%90%E7%B3%BB%E7%BB%9F-7942505.png)\n\n\n\n<br>\n\n<br>\n\n## 概述\n\nJava 的类加载子系统负责从网络或者本地文件等多途径获取以 .class 结尾的字节码文件，并解析成基本的 Class 类型。\n\n加载子系统只负责类的加载，保证类的安全性，执行还是交给执行子系统的。\n\n<br>\n\n<br>\n\n\n\n\n\n## 类加载的流程\n\n```mermaid\ngraph LR\n\n subgraph B [链接]\n D[验证] --> E[准备]\n E --> F[解析]\n end\n\nA[ 加载] --> D\nF --> H[初始化]\n```\n\n\n\n**实际的类加载流程是交叉进行的，并不是线程执行，**例如加载到二进制流之后，验证就会开始文件结构验证。\n\n<br>\n\n- 加载\n\n加载就是通过**类的全限定名**获取该类的字节码文件的二进制流，并将其转化为运行时的数据结构，也就是 Class 文件。\n\n<br>\n\n- 验证\n\n验证是指对二进制流的验证，验证是否满足 JVM 的规范，是否会威胁到 JVM 自身的运行。\n\n验证细分有以下四个部分：**文件结构验证，元数据验证，字节码验证，符号引用验证**。\n\n在文件结构验证时候，二进制流就转化为了运行时数据结构，以后的验证都是对运行时结构的验证。\n\n符号引用验证会在解析的时候执行。\n\n<br>\n\n- 准备\n\n准备过程是给类变量分配空间的过程，并且回给类变量赋系统初值。\n\n系统初值是指 JVM 默认的值，例如 boolean 类型默认会为 false 等。\n\n<br>\n\n- 解析\n\n解析是对符号引用的解析，确保符号引用是全部有效，并将其转化为直接引用。\n\nClass 文件常量池中就包含了一部分的符号引用。\n\n<br>\n\n- 初始化\n\n初始化是执行 `<cinit>` 的过程。\n\n`<cinit>`  就是从类文件中收集的包括静态初始化快，字面量初始化等等的语句。\n\n> 有一个注意点是静态初始化块是从上到下顺序加载并执行的，并且先于构造函数的 <init> 执行。\n\n<br>\n\n<br>\n\n### Class 加载和卸载\n\n- 加载的时机\n\n1. 创建类实例对象的时候，通过 new，reflect 等途径 \n2. 调用类的静态方法或者访问类的静态变量的时候\n3. 初始化子类时发现父类未加载，会先加载父类\n\n> 不全，代补充。\n\n<br>\n\n- 卸载的时机\n\n1. 该类所有的实例都已被回收\n2. 该类的 ClassLoader 已经被回收\n3. 该类的 Class 对象没有在任何地方被引用\n\n<br>\n\n### Class 对象的存放\n\n类加载器加载 Class 文件，输出一个 Class 类，该类的信息都保存在**元空间**（1.8及以上版本），元空间是一片直接内存，会以 ClassLoader 为单位划分区域，每个 ClassLoader 还会保存各自加载过的类。\n\n装载过程中，字面量，常量会加入到各自的运行时常量池，部分符号引用此时会被解析为直接引用，另外还会保存一份虚方法表。\n\n<br>\n\n<br>\n\n## 基本的类加载器\n\n```mermaid\ngraph TD\nA[Bootstrap ClassLoader] --> B[Extension ClassLoader] \nB --> C[Application ClassLoader]\n```\n\n\n\n以上是 JDK 中提供的三种基础的类加载器。\n\n- Bootstrap ClassLoader \n\n该类加载器使用 C 语言实现，直接内置在 JVM，用于加载 Java 核心库，例如 rt.jar 或者 bootstrap 目录下的依赖。\n\n并且出于安全考虑，该加载器只会加载 java，javax，sun 开头的类。\n\n<br>\n\n- Extension ClassLoader\n\n扩展的类加载器，使用 Java 语言编写，具体实现为 sun.misc.Launcher$ExtClassLoader。\n\n用于加载 /jre/lib/ext 下的类库，以 Bootstrap ClassLoader 为其父类\n\n<br>\n\n- Application ClassLoader\n\n应用类加载器，具体实现为 sun.misc.Launcher$AppClassLoader。\n\n用于加载 CLASSPATH 目录下的类，为 ExtClassLoader 的子类。\n\n<br>\n\n> Bootstrap 和 Extension 两个加载器扫描的类的目录已经被限定死了，这是后续 SPI 等实现必须要通过 TCCL 的原因之一。\n\n<br>\n\n> 还有一点重要的，Java 中判断两个 Class 是否相等，除了其本身还需要判断对应的类加载器是否一致，同个 Class 文件被不同的 ClassLoader 装载就是不同的 Class 对象。\n\n<br>\n\n## ClassLoader 的基础实现\n\nExtClassLoader 和 AppClassLoader 都定义在 sun.misc.Launcher 中的，Launcher 是 Java 程序启动的起点。\n\n<br>\n\n### Launcher 的初始化\n\n介绍 ExtClassLoader 和 AppClassLoader 两种基本类加载器的创建过程。\n\n> Bootstrap 是内置在 JVM 中的，Java 程序启动的时候就是由 Bootstrap 先加载 Launcher 对象。\n\n<br>\n\n<img src=\"https://chenqwwq.oss-cn-hangzhou.aliyuncs.com/note/Launcher%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0-7942515.png\" alt=\"Launcher构造函数\" style=\"zoom:67%;\" />\n\n上图， Launcher 的构造函数中主要就包含了以下三个逻辑：\n\n- 创建 ExtClassLoader\n- 以 ExtClassLoader 为参数，创建 AppClassLoader\n- **设置当前线程上下文加载器为 AppClassLoader**\n\n<br>\n\n<br>\n\n### ClassLoader 的实现\n\nAppClassLoader 和 ExtClassLoader 都继承于 URLClassLoader，而 URLClassLoader 又是继承与 ClassLoader 的。\n\nClassLoader 中分别有以下几种重点方法：\n\n| 方法名                                  | 作用                                                         |\n| --------------------------------------- | ------------------------------------------------------------ |\n| loadClass(String,boolean)               | 加载指定的 Class 文件的二进制流数据，boolean 表示是否对 Class 对象进行解析 |\n| findClass(String)                       | 搜索 Class 文件，入参为类的全限定名                          |\n| defineClass(byte[] b, int off, int len) | 该方法用于将 byte 字节流解析成 Class 对象，入参就是 byte 数组。 |\n| resolveClass(Class≺?≻ c)                | 解析并初始化 Class 类                                        |\n\n<br>\n\n#### #loadClass(String)\n\n该方法是 ClassLoader 中最主要的方法，**双亲委派机制** 就是在该方法中实现的，`ClassLoader.loadClass` 也是常用的用于加载某个类的常用方法。\n\n> 有个容易忽略的点是，该方法可以获得 Class 类，但是并不会触发 Class 类的初始化，也就是类加载的最后一步。\n>\n> 但 Class.forName 会触发类的初始化，\n\n<br>\n\n```java\n// ClassLoader#loadClass\nprotected Class<?> loadClass(String name, boolean resolve)\n    throws ClassNotFoundException\n{\n    synchronized (getClassLoadingLock(name)) {\n        // First, check if the class has already been loaded\n        // 通过缓存查找是否被该类加载器加载过。\n        Class<?> c = findLoadedClass(name);\n        if (c == null) {\n            long t0 = System.nanoTime();\n            try {\n                if (parent != null) {\n                    // 通过父类加载器，加载 name 类\n                    c = parent.loadClass(name, false);\n                } else {\n                    // 直接通过 Bootstrap 加载类\n                    c = findBootstrapClassOrNull(name);\n                }\n\t\t\t...\n\t\t\t\n            // 都找不到\n            if (c == null) {\n                ...\n                // 调用 findClass 方法获取 Class 类\n                c = findClass(name);\n\t\t\t\t...\n            }\n        }\n        // 是否需要解析\n        if (resolve) {\n            // 需要就调用 resolveClass \n            resolveClass(c);\n        }\n        return c;\n    }\n}\n```\n\n从上面的代码可以大概的看出类加载的逻辑:\n\n1. **尝试从缓存中获取 Class**\n2. **通过 父类 或者 Bootstrap 获取 Class**\n3. **通过 findClass 方法获取 Class**\n\n以上三种就是 Class 对象的主要获取方式，之后根据参数会判断是否需要调用 resolveClass 方法进行解析。\n\n最后调用的 findClass 方法在 ClassLoader 中是一个空方法，也就是模板方法，等待子类继承实现，URLClassLoader 就实现了该方法。\n\n另外在方法的注释上也表明，**实现者推荐开发者实现 findClass 方法，而并不推荐直接重写 loadClass 方法。**\n\n<br>\n\n<br>\n\n## 双亲委派机制\n\n上文说的，ClassLoader#loadClass 方法中实现了双亲委派机制的基础逻辑。\n\n**所有加载的类都会优先由父类加载，从下往上传递类加载任务，如果父类无法加载再由子类进行加载。**\n\n> 实现中可以看到，即使没有父类加载器，也会先从 Bootstrap 加载目标类，这就保证了 Java 核心类库的安全。\n\n<br>\n\n双亲委派的优势:\n\n1. 避免了类的重复加载，父子之间就是一条责任链，父类加载过的类不需要子类重新加载。\n2. 提高了程序的安全性，类似 java.lang.String 就只能通过 Bootstrap 加载\n\n> 代补充。\n\n双亲委派机制的层次性是自下而上的，下级的类加载器共享上级的类加载器所加载的类，但是下级加载的类堆上级是不可见的。\n\n<br>\n\n<br>\n\n## 线程上下文类加载器\n\n在 Launcher 的构造函数中就出现了相关逻辑，**设置了 AppClassLoader 作为当前线程的上下文加载器**。\n\n线程上下文加载器可以当做是将类加载器和线程绑定，在线程中保存一份加载器的引用，因此在任何地方都可以获取到当期线程的上下文类加载器。\n\n```java\n// 获取当前线程上下文类加载器的方法\nThread.currentThread().getContextClassLoader();\n```\n\n**该方法的出现就是为了打破双亲委派机制**。\n\n在双亲委派机制中，类加载的任务是从下往上传递的，但是总有一些意外情况，比如 Java 核心类库中的类需要加载第三方类库的实现，比如 ServiceLoader 实现的 SPI 机制。\n\nJava 核心类库都是通过 Bootstrap 实现的，但是因为 Bootstrap 被限定了目录以及类路径前缀，所以无法被用来加载 ServiceLoader，此时就可以通过 线程上下文类加载器 实现高层的类加载器调用底层去加载类的逻辑。\n\n<br>\n\n> 非常重要的一点：\n>\n> **类优先由触发类加载的类所属的类加载器加载。**\n\n<br>\n\n<br>\n\n## 打破双亲委派机制的实例\n\n### Tomcat 的类加载机制\n\nTomcat 作为一个 Web Servlet 容器，肯定需要装载多个 Web 应用，多个应用之间的依赖库不可能完全一致，可能出现同个依赖不同版本的情况，也可能出现两个应用之间类名相同的情况，这个时候就需要在多个 WebApp 之间做类上的隔离，另外同一个应用不可能说相同的依赖还需要重复加载几次，所以也存在依赖复用的情况。\n\n另外 Tomcat 还提供了 Jsp 的热加载功能，动态的卸载和加载 Jsp 类。\n\n> JSP 最后会被转化为 Class 然后执行输出。\n\n```mermaid\ngraph TD\nA[Bootstrap ClassLoader] --> B[Extension ClassLoader] \nB --> C[Application ClassLoader]\nC --> D[Common ClassLoader]\nD --> E[Catalina ClassLoader]\nD --> F[Shared ClassLoader]\nF --> G[WebApp ClassLoader]\nG --> H[Jsp ClassLoader]\n```\n\n\n\n\n\n所以 Tomcat 设计了如上的一套类加载体系。\n\n除开三种基础的类加载器，Common 就是 Tomcat 中最上层的，他加载的类对所有的 Web 应用共享，并且对 Tomcat 自身也是共享的。\n\nCatalina 负责加载的是 Tomcat 专用的一些类，比如 Tomcat 中的 Connector 等一些基础组件，这些对 Web 应用来说是不可见的，是隔离开的。\n\nShared 负责加载的是所有的 Web 引用共享的类，它和 Catalina 相隔离，互相不可见。\n\nWebApp 负责加载当应用的类库，一个应用就对应这一个 WebApp 类加载器，相互之间隔离互相不影响，并且共享 Shared 类加载器加载的共用类。\n\nJsp 比较特别，它是每一个类一个类加载器，用于在 Jsp 文件修改之后做热更新。\n\n> Common，Catalina 以及 Shared 都有指定的目录，不过不是本文的重点就不说了。\n\n<br>\n\n**通过以上的体系，Tomcat 实现了类之间隔离和共享的关系区分。**\n\n实现上 Catalina 和 Common 以及 Shared 都是 URLClassLoader，还是遵从的双亲委派机制的。\n\n但是 WebApp 是单独实现的，继承了 URLClassLoader，并重写了 loadClass 方法，在查找了当前的 ClassLoader 的缓存之后，并没有直接使用父类加载器加载，而是继续在本地查找，找不到再去父类查找。\n\n<br>\n\n### JDK 的 SPI 实现 - JDBC Driver 实现的加载\n\nJDBC 的核心类定义在 Java 的核心库，由 Bootstrap 加载，但是三方的实现却是在 ClassPath 里，需要使用 Application 来加载。\n\n在 Java 的核心类加载三方实现的时候默认就是从  Application 加载，此时就会出现 ClassNotFound。\n\n<br>\n\n**JDBC 就在采用的方法就是 TCCL (Thread Context Class Loader) 线程上下文类加载器。**\n\n在核心类中获取当前线程中绑定的类加载器，由此优先高级别类加载器调用低级别类加载器的实现。\n\n<br>\n\n参考 DriverManager 获取 Driver 的实现。\n\n首先该类的静态初始化块中就包含了 Driver 的类加载流程。\n\n<img src=\"https://chenqwwq.oss-cn-hangzhou.aliyuncs.com/note/DriverManager%E7%9A%84%E9%9D%99%E6%80%81%E5%88%9D%E5%A7%8B%E5%8C%96%E5%9D%97-7942519.png\" alt=\"DriverManager 的静态初始化块\" style=\"zoom:80%;\" />\n\n在 loadInitialDrivers 方法中调用了 ServiceLoader 的 load 方法：\n\n<img src=\"https://chenqwwq.oss-cn-hangzhou.aliyuncs.com/note/DriverManager11loadInitialDrivers-7942521.png\" alt=\"loadInitialDrivers\" style=\"zoom:67%;\" />\n\n\n\n而在 ServiceLoader 中就包含了对线程上下文类加载器的调用：\n\n<img src=\"https://chenqwwq.oss-cn-hangzhou.aliyuncs.com/note/ServerLoader11load-7942523.png\" alt=\"ServerLoader#load\" style=\"zoom:67%;\" />\n\n\n\n<br>\n\n<br>\n\n### Spring 的类加载机制\n\nSpring 的类加载场景比较复杂，所以基本是统一采用 TCCL 来实现类加载，Spring 研究不多，待补充。\n","source":"_posts/浅析-JVM-类加载子系统.md","raw":"---\ntitle: 浅析 JVM 类加载子系统\ndate: 2021-06-05 15:42:06\nexcerpt: Java 的类加载子系统负责从网络或者本地文件等多途径获取以 .class 结尾的字节码文件，并解析成基本的 Class 类。\nindex_img: https://chenqwwq.oss-cn-hangzhou.aliyuncs.com/note/JVM%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%AD%90%E7%B3%BB%E7%BB%9F-7942505.png\nbanner_img: https://chenqwwq.oss-cn-hangzhou.aliyuncs.com/note/JVM%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%AD%90%E7%B3%BB%E7%BB%9F-7942505.png\nmermaid: true\ncategories:\n- java\ntags:\n- jvm\n---\n\n\n\n# 类加载子系统\n\n\n\n## 思维导图\n\n![JVM 类加载子系统](https://chenqwwq.oss-cn-hangzhou.aliyuncs.com/note/JVM%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%AD%90%E7%B3%BB%E7%BB%9F-7942505.png)\n\n\n\n<br>\n\n<br>\n\n## 概述\n\nJava 的类加载子系统负责从网络或者本地文件等多途径获取以 .class 结尾的字节码文件，并解析成基本的 Class 类型。\n\n加载子系统只负责类的加载，保证类的安全性，执行还是交给执行子系统的。\n\n<br>\n\n<br>\n\n\n\n\n\n## 类加载的流程\n\n```mermaid\ngraph LR\n\n subgraph B [链接]\n D[验证] --> E[准备]\n E --> F[解析]\n end\n\nA[ 加载] --> D\nF --> H[初始化]\n```\n\n\n\n**实际的类加载流程是交叉进行的，并不是线程执行，**例如加载到二进制流之后，验证就会开始文件结构验证。\n\n<br>\n\n- 加载\n\n加载就是通过**类的全限定名**获取该类的字节码文件的二进制流，并将其转化为运行时的数据结构，也就是 Class 文件。\n\n<br>\n\n- 验证\n\n验证是指对二进制流的验证，验证是否满足 JVM 的规范，是否会威胁到 JVM 自身的运行。\n\n验证细分有以下四个部分：**文件结构验证，元数据验证，字节码验证，符号引用验证**。\n\n在文件结构验证时候，二进制流就转化为了运行时数据结构，以后的验证都是对运行时结构的验证。\n\n符号引用验证会在解析的时候执行。\n\n<br>\n\n- 准备\n\n准备过程是给类变量分配空间的过程，并且回给类变量赋系统初值。\n\n系统初值是指 JVM 默认的值，例如 boolean 类型默认会为 false 等。\n\n<br>\n\n- 解析\n\n解析是对符号引用的解析，确保符号引用是全部有效，并将其转化为直接引用。\n\nClass 文件常量池中就包含了一部分的符号引用。\n\n<br>\n\n- 初始化\n\n初始化是执行 `<cinit>` 的过程。\n\n`<cinit>`  就是从类文件中收集的包括静态初始化快，字面量初始化等等的语句。\n\n> 有一个注意点是静态初始化块是从上到下顺序加载并执行的，并且先于构造函数的 <init> 执行。\n\n<br>\n\n<br>\n\n### Class 加载和卸载\n\n- 加载的时机\n\n1. 创建类实例对象的时候，通过 new，reflect 等途径 \n2. 调用类的静态方法或者访问类的静态变量的时候\n3. 初始化子类时发现父类未加载，会先加载父类\n\n> 不全，代补充。\n\n<br>\n\n- 卸载的时机\n\n1. 该类所有的实例都已被回收\n2. 该类的 ClassLoader 已经被回收\n3. 该类的 Class 对象没有在任何地方被引用\n\n<br>\n\n### Class 对象的存放\n\n类加载器加载 Class 文件，输出一个 Class 类，该类的信息都保存在**元空间**（1.8及以上版本），元空间是一片直接内存，会以 ClassLoader 为单位划分区域，每个 ClassLoader 还会保存各自加载过的类。\n\n装载过程中，字面量，常量会加入到各自的运行时常量池，部分符号引用此时会被解析为直接引用，另外还会保存一份虚方法表。\n\n<br>\n\n<br>\n\n## 基本的类加载器\n\n```mermaid\ngraph TD\nA[Bootstrap ClassLoader] --> B[Extension ClassLoader] \nB --> C[Application ClassLoader]\n```\n\n\n\n以上是 JDK 中提供的三种基础的类加载器。\n\n- Bootstrap ClassLoader \n\n该类加载器使用 C 语言实现，直接内置在 JVM，用于加载 Java 核心库，例如 rt.jar 或者 bootstrap 目录下的依赖。\n\n并且出于安全考虑，该加载器只会加载 java，javax，sun 开头的类。\n\n<br>\n\n- Extension ClassLoader\n\n扩展的类加载器，使用 Java 语言编写，具体实现为 sun.misc.Launcher$ExtClassLoader。\n\n用于加载 /jre/lib/ext 下的类库，以 Bootstrap ClassLoader 为其父类\n\n<br>\n\n- Application ClassLoader\n\n应用类加载器，具体实现为 sun.misc.Launcher$AppClassLoader。\n\n用于加载 CLASSPATH 目录下的类，为 ExtClassLoader 的子类。\n\n<br>\n\n> Bootstrap 和 Extension 两个加载器扫描的类的目录已经被限定死了，这是后续 SPI 等实现必须要通过 TCCL 的原因之一。\n\n<br>\n\n> 还有一点重要的，Java 中判断两个 Class 是否相等，除了其本身还需要判断对应的类加载器是否一致，同个 Class 文件被不同的 ClassLoader 装载就是不同的 Class 对象。\n\n<br>\n\n## ClassLoader 的基础实现\n\nExtClassLoader 和 AppClassLoader 都定义在 sun.misc.Launcher 中的，Launcher 是 Java 程序启动的起点。\n\n<br>\n\n### Launcher 的初始化\n\n介绍 ExtClassLoader 和 AppClassLoader 两种基本类加载器的创建过程。\n\n> Bootstrap 是内置在 JVM 中的，Java 程序启动的时候就是由 Bootstrap 先加载 Launcher 对象。\n\n<br>\n\n<img src=\"https://chenqwwq.oss-cn-hangzhou.aliyuncs.com/note/Launcher%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0-7942515.png\" alt=\"Launcher构造函数\" style=\"zoom:67%;\" />\n\n上图， Launcher 的构造函数中主要就包含了以下三个逻辑：\n\n- 创建 ExtClassLoader\n- 以 ExtClassLoader 为参数，创建 AppClassLoader\n- **设置当前线程上下文加载器为 AppClassLoader**\n\n<br>\n\n<br>\n\n### ClassLoader 的实现\n\nAppClassLoader 和 ExtClassLoader 都继承于 URLClassLoader，而 URLClassLoader 又是继承与 ClassLoader 的。\n\nClassLoader 中分别有以下几种重点方法：\n\n| 方法名                                  | 作用                                                         |\n| --------------------------------------- | ------------------------------------------------------------ |\n| loadClass(String,boolean)               | 加载指定的 Class 文件的二进制流数据，boolean 表示是否对 Class 对象进行解析 |\n| findClass(String)                       | 搜索 Class 文件，入参为类的全限定名                          |\n| defineClass(byte[] b, int off, int len) | 该方法用于将 byte 字节流解析成 Class 对象，入参就是 byte 数组。 |\n| resolveClass(Class≺?≻ c)                | 解析并初始化 Class 类                                        |\n\n<br>\n\n#### #loadClass(String)\n\n该方法是 ClassLoader 中最主要的方法，**双亲委派机制** 就是在该方法中实现的，`ClassLoader.loadClass` 也是常用的用于加载某个类的常用方法。\n\n> 有个容易忽略的点是，该方法可以获得 Class 类，但是并不会触发 Class 类的初始化，也就是类加载的最后一步。\n>\n> 但 Class.forName 会触发类的初始化，\n\n<br>\n\n```java\n// ClassLoader#loadClass\nprotected Class<?> loadClass(String name, boolean resolve)\n    throws ClassNotFoundException\n{\n    synchronized (getClassLoadingLock(name)) {\n        // First, check if the class has already been loaded\n        // 通过缓存查找是否被该类加载器加载过。\n        Class<?> c = findLoadedClass(name);\n        if (c == null) {\n            long t0 = System.nanoTime();\n            try {\n                if (parent != null) {\n                    // 通过父类加载器，加载 name 类\n                    c = parent.loadClass(name, false);\n                } else {\n                    // 直接通过 Bootstrap 加载类\n                    c = findBootstrapClassOrNull(name);\n                }\n\t\t\t...\n\t\t\t\n            // 都找不到\n            if (c == null) {\n                ...\n                // 调用 findClass 方法获取 Class 类\n                c = findClass(name);\n\t\t\t\t...\n            }\n        }\n        // 是否需要解析\n        if (resolve) {\n            // 需要就调用 resolveClass \n            resolveClass(c);\n        }\n        return c;\n    }\n}\n```\n\n从上面的代码可以大概的看出类加载的逻辑:\n\n1. **尝试从缓存中获取 Class**\n2. **通过 父类 或者 Bootstrap 获取 Class**\n3. **通过 findClass 方法获取 Class**\n\n以上三种就是 Class 对象的主要获取方式，之后根据参数会判断是否需要调用 resolveClass 方法进行解析。\n\n最后调用的 findClass 方法在 ClassLoader 中是一个空方法，也就是模板方法，等待子类继承实现，URLClassLoader 就实现了该方法。\n\n另外在方法的注释上也表明，**实现者推荐开发者实现 findClass 方法，而并不推荐直接重写 loadClass 方法。**\n\n<br>\n\n<br>\n\n## 双亲委派机制\n\n上文说的，ClassLoader#loadClass 方法中实现了双亲委派机制的基础逻辑。\n\n**所有加载的类都会优先由父类加载，从下往上传递类加载任务，如果父类无法加载再由子类进行加载。**\n\n> 实现中可以看到，即使没有父类加载器，也会先从 Bootstrap 加载目标类，这就保证了 Java 核心类库的安全。\n\n<br>\n\n双亲委派的优势:\n\n1. 避免了类的重复加载，父子之间就是一条责任链，父类加载过的类不需要子类重新加载。\n2. 提高了程序的安全性，类似 java.lang.String 就只能通过 Bootstrap 加载\n\n> 代补充。\n\n双亲委派机制的层次性是自下而上的，下级的类加载器共享上级的类加载器所加载的类，但是下级加载的类堆上级是不可见的。\n\n<br>\n\n<br>\n\n## 线程上下文类加载器\n\n在 Launcher 的构造函数中就出现了相关逻辑，**设置了 AppClassLoader 作为当前线程的上下文加载器**。\n\n线程上下文加载器可以当做是将类加载器和线程绑定，在线程中保存一份加载器的引用，因此在任何地方都可以获取到当期线程的上下文类加载器。\n\n```java\n// 获取当前线程上下文类加载器的方法\nThread.currentThread().getContextClassLoader();\n```\n\n**该方法的出现就是为了打破双亲委派机制**。\n\n在双亲委派机制中，类加载的任务是从下往上传递的，但是总有一些意外情况，比如 Java 核心类库中的类需要加载第三方类库的实现，比如 ServiceLoader 实现的 SPI 机制。\n\nJava 核心类库都是通过 Bootstrap 实现的，但是因为 Bootstrap 被限定了目录以及类路径前缀，所以无法被用来加载 ServiceLoader，此时就可以通过 线程上下文类加载器 实现高层的类加载器调用底层去加载类的逻辑。\n\n<br>\n\n> 非常重要的一点：\n>\n> **类优先由触发类加载的类所属的类加载器加载。**\n\n<br>\n\n<br>\n\n## 打破双亲委派机制的实例\n\n### Tomcat 的类加载机制\n\nTomcat 作为一个 Web Servlet 容器，肯定需要装载多个 Web 应用，多个应用之间的依赖库不可能完全一致，可能出现同个依赖不同版本的情况，也可能出现两个应用之间类名相同的情况，这个时候就需要在多个 WebApp 之间做类上的隔离，另外同一个应用不可能说相同的依赖还需要重复加载几次，所以也存在依赖复用的情况。\n\n另外 Tomcat 还提供了 Jsp 的热加载功能，动态的卸载和加载 Jsp 类。\n\n> JSP 最后会被转化为 Class 然后执行输出。\n\n```mermaid\ngraph TD\nA[Bootstrap ClassLoader] --> B[Extension ClassLoader] \nB --> C[Application ClassLoader]\nC --> D[Common ClassLoader]\nD --> E[Catalina ClassLoader]\nD --> F[Shared ClassLoader]\nF --> G[WebApp ClassLoader]\nG --> H[Jsp ClassLoader]\n```\n\n\n\n\n\n所以 Tomcat 设计了如上的一套类加载体系。\n\n除开三种基础的类加载器，Common 就是 Tomcat 中最上层的，他加载的类对所有的 Web 应用共享，并且对 Tomcat 自身也是共享的。\n\nCatalina 负责加载的是 Tomcat 专用的一些类，比如 Tomcat 中的 Connector 等一些基础组件，这些对 Web 应用来说是不可见的，是隔离开的。\n\nShared 负责加载的是所有的 Web 引用共享的类，它和 Catalina 相隔离，互相不可见。\n\nWebApp 负责加载当应用的类库，一个应用就对应这一个 WebApp 类加载器，相互之间隔离互相不影响，并且共享 Shared 类加载器加载的共用类。\n\nJsp 比较特别，它是每一个类一个类加载器，用于在 Jsp 文件修改之后做热更新。\n\n> Common，Catalina 以及 Shared 都有指定的目录，不过不是本文的重点就不说了。\n\n<br>\n\n**通过以上的体系，Tomcat 实现了类之间隔离和共享的关系区分。**\n\n实现上 Catalina 和 Common 以及 Shared 都是 URLClassLoader，还是遵从的双亲委派机制的。\n\n但是 WebApp 是单独实现的，继承了 URLClassLoader，并重写了 loadClass 方法，在查找了当前的 ClassLoader 的缓存之后，并没有直接使用父类加载器加载，而是继续在本地查找，找不到再去父类查找。\n\n<br>\n\n### JDK 的 SPI 实现 - JDBC Driver 实现的加载\n\nJDBC 的核心类定义在 Java 的核心库，由 Bootstrap 加载，但是三方的实现却是在 ClassPath 里，需要使用 Application 来加载。\n\n在 Java 的核心类加载三方实现的时候默认就是从  Application 加载，此时就会出现 ClassNotFound。\n\n<br>\n\n**JDBC 就在采用的方法就是 TCCL (Thread Context Class Loader) 线程上下文类加载器。**\n\n在核心类中获取当前线程中绑定的类加载器，由此优先高级别类加载器调用低级别类加载器的实现。\n\n<br>\n\n参考 DriverManager 获取 Driver 的实现。\n\n首先该类的静态初始化块中就包含了 Driver 的类加载流程。\n\n<img src=\"https://chenqwwq.oss-cn-hangzhou.aliyuncs.com/note/DriverManager%E7%9A%84%E9%9D%99%E6%80%81%E5%88%9D%E5%A7%8B%E5%8C%96%E5%9D%97-7942519.png\" alt=\"DriverManager 的静态初始化块\" style=\"zoom:80%;\" />\n\n在 loadInitialDrivers 方法中调用了 ServiceLoader 的 load 方法：\n\n<img src=\"https://chenqwwq.oss-cn-hangzhou.aliyuncs.com/note/DriverManager11loadInitialDrivers-7942521.png\" alt=\"loadInitialDrivers\" style=\"zoom:67%;\" />\n\n\n\n而在 ServiceLoader 中就包含了对线程上下文类加载器的调用：\n\n<img src=\"https://chenqwwq.oss-cn-hangzhou.aliyuncs.com/note/ServerLoader11load-7942523.png\" alt=\"ServerLoader#load\" style=\"zoom:67%;\" />\n\n\n\n<br>\n\n<br>\n\n### Spring 的类加载机制\n\nSpring 的类加载场景比较复杂，所以基本是统一采用 TCCL 来实现类加载，Spring 研究不多，待补充。\n","slug":"浅析-JVM-类加载子系统","published":1,"updated":"2022-03-23T03:01:06.253Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clk87sjyk000vwnbv1w192xub","content":"<h1 id=\"类加载子系统\"><a href=\"#类加载子系统\" class=\"headerlink\" title=\"类加载子系统\"></a>类加载子系统</h1><h2 id=\"思维导图\"><a href=\"#思维导图\" class=\"headerlink\" title=\"思维导图\"></a>思维导图</h2><p><img src=\"https://chenqwwq.oss-cn-hangzhou.aliyuncs.com/note/JVM%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%AD%90%E7%B3%BB%E7%BB%9F-7942505.png\" alt=\"JVM 类加载子系统\"></p>\n<br>\n\n<br>\n\n<h2 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h2><p>Java 的类加载子系统负责从网络或者本地文件等多途径获取以 .class 结尾的字节码文件，并解析成基本的 Class 类型。</p>\n<p>加载子系统只负责类的加载，保证类的安全性，执行还是交给执行子系统的。</p>\n<br>\n\n<br>\n\n\n\n\n\n<h2 id=\"类加载的流程\"><a href=\"#类加载的流程\" class=\"headerlink\" title=\"类加载的流程\"></a>类加载的流程</h2><div class=\"hljs code-wrapper\"><pre class=\"mermaid\">graph LR\n\n subgraph B [链接]\n D[验证] --> E[准备]\n E --> F[解析]\n end\n\nA[ 加载] --> D\nF --> H[初始化]</pre></div>\n\n\n\n<p><strong>实际的类加载流程是交叉进行的，并不是线程执行，</strong>例如加载到二进制流之后，验证就会开始文件结构验证。</p>\n<br>\n\n<ul>\n<li>加载</li>\n</ul>\n<p>加载就是通过<strong>类的全限定名</strong>获取该类的字节码文件的二进制流，并将其转化为运行时的数据结构，也就是 Class 文件。</p>\n<br>\n\n<ul>\n<li>验证</li>\n</ul>\n<p>验证是指对二进制流的验证，验证是否满足 JVM 的规范，是否会威胁到 JVM 自身的运行。</p>\n<p>验证细分有以下四个部分：<strong>文件结构验证，元数据验证，字节码验证，符号引用验证</strong>。</p>\n<p>在文件结构验证时候，二进制流就转化为了运行时数据结构，以后的验证都是对运行时结构的验证。</p>\n<p>符号引用验证会在解析的时候执行。</p>\n<br>\n\n<ul>\n<li>准备</li>\n</ul>\n<p>准备过程是给类变量分配空间的过程，并且回给类变量赋系统初值。</p>\n<p>系统初值是指 JVM 默认的值，例如 boolean 类型默认会为 false 等。</p>\n<br>\n\n<ul>\n<li>解析</li>\n</ul>\n<p>解析是对符号引用的解析，确保符号引用是全部有效，并将其转化为直接引用。</p>\n<p>Class 文件常量池中就包含了一部分的符号引用。</p>\n<br>\n\n<ul>\n<li>初始化</li>\n</ul>\n<p>初始化是执行 <code>&lt;cinit&gt;</code> 的过程。</p>\n<p><code>&lt;cinit&gt;</code>  就是从类文件中收集的包括静态初始化快，字面量初始化等等的语句。</p>\n<blockquote>\n<p>有一个注意点是静态初始化块是从上到下顺序加载并执行的，并且先于构造函数的 <init> 执行。</p>\n</blockquote>\n<br>\n\n<br>\n\n<h3 id=\"Class-加载和卸载\"><a href=\"#Class-加载和卸载\" class=\"headerlink\" title=\"Class 加载和卸载\"></a>Class 加载和卸载</h3><ul>\n<li>加载的时机</li>\n</ul>\n<ol>\n<li>创建类实例对象的时候，通过 new，reflect 等途径 </li>\n<li>调用类的静态方法或者访问类的静态变量的时候</li>\n<li>初始化子类时发现父类未加载，会先加载父类</li>\n</ol>\n<blockquote>\n<p>不全，代补充。</p>\n</blockquote>\n<br>\n\n<ul>\n<li>卸载的时机</li>\n</ul>\n<ol>\n<li>该类所有的实例都已被回收</li>\n<li>该类的 ClassLoader 已经被回收</li>\n<li>该类的 Class 对象没有在任何地方被引用</li>\n</ol>\n<br>\n\n<h3 id=\"Class-对象的存放\"><a href=\"#Class-对象的存放\" class=\"headerlink\" title=\"Class 对象的存放\"></a>Class 对象的存放</h3><p>类加载器加载 Class 文件，输出一个 Class 类，该类的信息都保存在<strong>元空间</strong>（1.8及以上版本），元空间是一片直接内存，会以 ClassLoader 为单位划分区域，每个 ClassLoader 还会保存各自加载过的类。</p>\n<p>装载过程中，字面量，常量会加入到各自的运行时常量池，部分符号引用此时会被解析为直接引用，另外还会保存一份虚方法表。</p>\n<br>\n\n<br>\n\n<h2 id=\"基本的类加载器\"><a href=\"#基本的类加载器\" class=\"headerlink\" title=\"基本的类加载器\"></a>基本的类加载器</h2><div class=\"hljs code-wrapper\"><pre class=\"mermaid\">graph TD\nA[Bootstrap ClassLoader] --> B[Extension ClassLoader] \nB --> C[Application ClassLoader]</pre></div>\n\n\n\n<p>以上是 JDK 中提供的三种基础的类加载器。</p>\n<ul>\n<li>Bootstrap ClassLoader</li>\n</ul>\n<p>该类加载器使用 C 语言实现，直接内置在 JVM，用于加载 Java 核心库，例如 rt.jar 或者 bootstrap 目录下的依赖。</p>\n<p>并且出于安全考虑，该加载器只会加载 java，javax，sun 开头的类。</p>\n<br>\n\n<ul>\n<li>Extension ClassLoader</li>\n</ul>\n<p>扩展的类加载器，使用 Java 语言编写，具体实现为 sun.misc.Launcher$ExtClassLoader。</p>\n<p>用于加载 &#x2F;jre&#x2F;lib&#x2F;ext 下的类库，以 Bootstrap ClassLoader 为其父类</p>\n<br>\n\n<ul>\n<li>Application ClassLoader</li>\n</ul>\n<p>应用类加载器，具体实现为 sun.misc.Launcher$AppClassLoader。</p>\n<p>用于加载 CLASSPATH 目录下的类，为 ExtClassLoader 的子类。</p>\n<br>\n\n<blockquote>\n<p>Bootstrap 和 Extension 两个加载器扫描的类的目录已经被限定死了，这是后续 SPI 等实现必须要通过 TCCL 的原因之一。</p>\n</blockquote>\n<br>\n\n<blockquote>\n<p>还有一点重要的，Java 中判断两个 Class 是否相等，除了其本身还需要判断对应的类加载器是否一致，同个 Class 文件被不同的 ClassLoader 装载就是不同的 Class 对象。</p>\n</blockquote>\n<br>\n\n<h2 id=\"ClassLoader-的基础实现\"><a href=\"#ClassLoader-的基础实现\" class=\"headerlink\" title=\"ClassLoader 的基础实现\"></a>ClassLoader 的基础实现</h2><p>ExtClassLoader 和 AppClassLoader 都定义在 sun.misc.Launcher 中的，Launcher 是 Java 程序启动的起点。</p>\n<br>\n\n<h3 id=\"Launcher-的初始化\"><a href=\"#Launcher-的初始化\" class=\"headerlink\" title=\"Launcher 的初始化\"></a>Launcher 的初始化</h3><p>介绍 ExtClassLoader 和 AppClassLoader 两种基本类加载器的创建过程。</p>\n<blockquote>\n<p>Bootstrap 是内置在 JVM 中的，Java 程序启动的时候就是由 Bootstrap 先加载 Launcher 对象。</p>\n</blockquote>\n<br>\n\n<img src=\"https://chenqwwq.oss-cn-hangzhou.aliyuncs.com/note/Launcher%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0-7942515.png\" alt=\"Launcher构造函数\" style=\"zoom:67%;\" />\n\n<p>上图， Launcher 的构造函数中主要就包含了以下三个逻辑：</p>\n<ul>\n<li>创建 ExtClassLoader</li>\n<li>以 ExtClassLoader 为参数，创建 AppClassLoader</li>\n<li><strong>设置当前线程上下文加载器为 AppClassLoader</strong></li>\n</ul>\n<br>\n\n<br>\n\n<h3 id=\"ClassLoader-的实现\"><a href=\"#ClassLoader-的实现\" class=\"headerlink\" title=\"ClassLoader 的实现\"></a>ClassLoader 的实现</h3><p>AppClassLoader 和 ExtClassLoader 都继承于 URLClassLoader，而 URLClassLoader 又是继承与 ClassLoader 的。</p>\n<p>ClassLoader 中分别有以下几种重点方法：</p>\n<table>\n<thead>\n<tr>\n<th>方法名</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>loadClass(String,boolean)</td>\n<td>加载指定的 Class 文件的二进制流数据，boolean 表示是否对 Class 对象进行解析</td>\n</tr>\n<tr>\n<td>findClass(String)</td>\n<td>搜索 Class 文件，入参为类的全限定名</td>\n</tr>\n<tr>\n<td>defineClass(byte[] b, int off, int len)</td>\n<td>该方法用于将 byte 字节流解析成 Class 对象，入参就是 byte 数组。</td>\n</tr>\n<tr>\n<td>resolveClass(Class≺?≻ c)</td>\n<td>解析并初始化 Class 类</td>\n</tr>\n</tbody></table>\n<br>\n\n<h4 id=\"loadClass-String\"><a href=\"#loadClass-String\" class=\"headerlink\" title=\"#loadClass(String)\"></a>#loadClass(String)</h4><p>该方法是 ClassLoader 中最主要的方法，<strong>双亲委派机制</strong> 就是在该方法中实现的，<code>ClassLoader.loadClass</code> 也是常用的用于加载某个类的常用方法。</p>\n<blockquote>\n<p>有个容易忽略的点是，该方法可以获得 Class 类，但是并不会触发 Class 类的初始化，也就是类加载的最后一步。</p>\n<p>但 Class.forName 会触发类的初始化，</p>\n</blockquote>\n<br>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">// ClassLoader#loadClass</span><br><span class=\"hljs-keyword\">protected</span> Class&lt;?&gt; loadClass(String name, <span class=\"hljs-type\">boolean</span> resolve)<br>    <span class=\"hljs-keyword\">throws</span> ClassNotFoundException<br>&#123;<br>    <span class=\"hljs-keyword\">synchronized</span> (getClassLoadingLock(name)) &#123;<br>        <span class=\"hljs-comment\">// First, check if the class has already been loaded</span><br>        <span class=\"hljs-comment\">// 通过缓存查找是否被该类加载器加载过。</span><br>        Class&lt;?&gt; c = findLoadedClass(name);<br>        <span class=\"hljs-keyword\">if</span> (c == <span class=\"hljs-literal\">null</span>) &#123;<br>            <span class=\"hljs-type\">long</span> <span class=\"hljs-variable\">t0</span> <span class=\"hljs-operator\">=</span> System.nanoTime();<br>            <span class=\"hljs-keyword\">try</span> &#123;<br>                <span class=\"hljs-keyword\">if</span> (parent != <span class=\"hljs-literal\">null</span>) &#123;<br>                    <span class=\"hljs-comment\">// 通过父类加载器，加载 name 类</span><br>                    c = parent.loadClass(name, <span class=\"hljs-literal\">false</span>);<br>                &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>                    <span class=\"hljs-comment\">// 直接通过 Bootstrap 加载类</span><br>                    c = findBootstrapClassOrNull(name);<br>                &#125;<br>\t\t\t...<br>\t\t\t<br>            <span class=\"hljs-comment\">// 都找不到</span><br>            <span class=\"hljs-keyword\">if</span> (c == <span class=\"hljs-literal\">null</span>) &#123;<br>                ...<br>                <span class=\"hljs-comment\">// 调用 findClass 方法获取 Class 类</span><br>                c = findClass(name);<br>\t\t\t\t...<br>            &#125;<br>        &#125;<br>        <span class=\"hljs-comment\">// 是否需要解析</span><br>        <span class=\"hljs-keyword\">if</span> (resolve) &#123;<br>            <span class=\"hljs-comment\">// 需要就调用 resolveClass </span><br>            resolveClass(c);<br>        &#125;<br>        <span class=\"hljs-keyword\">return</span> c;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure>\n\n<p>从上面的代码可以大概的看出类加载的逻辑:</p>\n<ol>\n<li><strong>尝试从缓存中获取 Class</strong></li>\n<li><strong>通过 父类 或者 Bootstrap 获取 Class</strong></li>\n<li><strong>通过 findClass 方法获取 Class</strong></li>\n</ol>\n<p>以上三种就是 Class 对象的主要获取方式，之后根据参数会判断是否需要调用 resolveClass 方法进行解析。</p>\n<p>最后调用的 findClass 方法在 ClassLoader 中是一个空方法，也就是模板方法，等待子类继承实现，URLClassLoader 就实现了该方法。</p>\n<p>另外在方法的注释上也表明，<strong>实现者推荐开发者实现 findClass 方法，而并不推荐直接重写 loadClass 方法。</strong></p>\n<br>\n\n<br>\n\n<h2 id=\"双亲委派机制\"><a href=\"#双亲委派机制\" class=\"headerlink\" title=\"双亲委派机制\"></a>双亲委派机制</h2><p>上文说的，ClassLoader#loadClass 方法中实现了双亲委派机制的基础逻辑。</p>\n<p><strong>所有加载的类都会优先由父类加载，从下往上传递类加载任务，如果父类无法加载再由子类进行加载。</strong></p>\n<blockquote>\n<p>实现中可以看到，即使没有父类加载器，也会先从 Bootstrap 加载目标类，这就保证了 Java 核心类库的安全。</p>\n</blockquote>\n<br>\n\n<p>双亲委派的优势:</p>\n<ol>\n<li>避免了类的重复加载，父子之间就是一条责任链，父类加载过的类不需要子类重新加载。</li>\n<li>提高了程序的安全性，类似 java.lang.String 就只能通过 Bootstrap 加载</li>\n</ol>\n<blockquote>\n<p>代补充。</p>\n</blockquote>\n<p>双亲委派机制的层次性是自下而上的，下级的类加载器共享上级的类加载器所加载的类，但是下级加载的类堆上级是不可见的。</p>\n<br>\n\n<br>\n\n<h2 id=\"线程上下文类加载器\"><a href=\"#线程上下文类加载器\" class=\"headerlink\" title=\"线程上下文类加载器\"></a>线程上下文类加载器</h2><p>在 Launcher 的构造函数中就出现了相关逻辑，<strong>设置了 AppClassLoader 作为当前线程的上下文加载器</strong>。</p>\n<p>线程上下文加载器可以当做是将类加载器和线程绑定，在线程中保存一份加载器的引用，因此在任何地方都可以获取到当期线程的上下文类加载器。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">// 获取当前线程上下文类加载器的方法</span><br>Thread.currentThread().getContextClassLoader();<br></code></pre></div></td></tr></table></figure>\n\n<p><strong>该方法的出现就是为了打破双亲委派机制</strong>。</p>\n<p>在双亲委派机制中，类加载的任务是从下往上传递的，但是总有一些意外情况，比如 Java 核心类库中的类需要加载第三方类库的实现，比如 ServiceLoader 实现的 SPI 机制。</p>\n<p>Java 核心类库都是通过 Bootstrap 实现的，但是因为 Bootstrap 被限定了目录以及类路径前缀，所以无法被用来加载 ServiceLoader，此时就可以通过 线程上下文类加载器 实现高层的类加载器调用底层去加载类的逻辑。</p>\n<br>\n\n<blockquote>\n<p>非常重要的一点：</p>\n<p><strong>类优先由触发类加载的类所属的类加载器加载。</strong></p>\n</blockquote>\n<br>\n\n<br>\n\n<h2 id=\"打破双亲委派机制的实例\"><a href=\"#打破双亲委派机制的实例\" class=\"headerlink\" title=\"打破双亲委派机制的实例\"></a>打破双亲委派机制的实例</h2><h3 id=\"Tomcat-的类加载机制\"><a href=\"#Tomcat-的类加载机制\" class=\"headerlink\" title=\"Tomcat 的类加载机制\"></a>Tomcat 的类加载机制</h3><p>Tomcat 作为一个 Web Servlet 容器，肯定需要装载多个 Web 应用，多个应用之间的依赖库不可能完全一致，可能出现同个依赖不同版本的情况，也可能出现两个应用之间类名相同的情况，这个时候就需要在多个 WebApp 之间做类上的隔离，另外同一个应用不可能说相同的依赖还需要重复加载几次，所以也存在依赖复用的情况。</p>\n<p>另外 Tomcat 还提供了 Jsp 的热加载功能，动态的卸载和加载 Jsp 类。</p>\n<blockquote>\n<p>JSP 最后会被转化为 Class 然后执行输出。</p>\n</blockquote>\n<div class=\"hljs code-wrapper\"><pre class=\"mermaid\">graph TD\nA[Bootstrap ClassLoader] --> B[Extension ClassLoader] \nB --> C[Application ClassLoader]\nC --> D[Common ClassLoader]\nD --> E[Catalina ClassLoader]\nD --> F[Shared ClassLoader]\nF --> G[WebApp ClassLoader]\nG --> H[Jsp ClassLoader]</pre></div>\n\n\n\n\n\n<p>所以 Tomcat 设计了如上的一套类加载体系。</p>\n<p>除开三种基础的类加载器，Common 就是 Tomcat 中最上层的，他加载的类对所有的 Web 应用共享，并且对 Tomcat 自身也是共享的。</p>\n<p>Catalina 负责加载的是 Tomcat 专用的一些类，比如 Tomcat 中的 Connector 等一些基础组件，这些对 Web 应用来说是不可见的，是隔离开的。</p>\n<p>Shared 负责加载的是所有的 Web 引用共享的类，它和 Catalina 相隔离，互相不可见。</p>\n<p>WebApp 负责加载当应用的类库，一个应用就对应这一个 WebApp 类加载器，相互之间隔离互相不影响，并且共享 Shared 类加载器加载的共用类。</p>\n<p>Jsp 比较特别，它是每一个类一个类加载器，用于在 Jsp 文件修改之后做热更新。</p>\n<blockquote>\n<p>Common，Catalina 以及 Shared 都有指定的目录，不过不是本文的重点就不说了。</p>\n</blockquote>\n<br>\n\n<p><strong>通过以上的体系，Tomcat 实现了类之间隔离和共享的关系区分。</strong></p>\n<p>实现上 Catalina 和 Common 以及 Shared 都是 URLClassLoader，还是遵从的双亲委派机制的。</p>\n<p>但是 WebApp 是单独实现的，继承了 URLClassLoader，并重写了 loadClass 方法，在查找了当前的 ClassLoader 的缓存之后，并没有直接使用父类加载器加载，而是继续在本地查找，找不到再去父类查找。</p>\n<br>\n\n<h3 id=\"JDK-的-SPI-实现-JDBC-Driver-实现的加载\"><a href=\"#JDK-的-SPI-实现-JDBC-Driver-实现的加载\" class=\"headerlink\" title=\"JDK 的 SPI 实现 - JDBC Driver 实现的加载\"></a>JDK 的 SPI 实现 - JDBC Driver 实现的加载</h3><p>JDBC 的核心类定义在 Java 的核心库，由 Bootstrap 加载，但是三方的实现却是在 ClassPath 里，需要使用 Application 来加载。</p>\n<p>在 Java 的核心类加载三方实现的时候默认就是从  Application 加载，此时就会出现 ClassNotFound。</p>\n<br>\n\n<p><strong>JDBC 就在采用的方法就是 TCCL (Thread Context Class Loader) 线程上下文类加载器。</strong></p>\n<p>在核心类中获取当前线程中绑定的类加载器，由此优先高级别类加载器调用低级别类加载器的实现。</p>\n<br>\n\n<p>参考 DriverManager 获取 Driver 的实现。</p>\n<p>首先该类的静态初始化块中就包含了 Driver 的类加载流程。</p>\n<img src=\"https://chenqwwq.oss-cn-hangzhou.aliyuncs.com/note/DriverManager%E7%9A%84%E9%9D%99%E6%80%81%E5%88%9D%E5%A7%8B%E5%8C%96%E5%9D%97-7942519.png\" alt=\"DriverManager 的静态初始化块\" style=\"zoom:80%;\" />\n\n<p>在 loadInitialDrivers 方法中调用了 ServiceLoader 的 load 方法：</p>\n<img src=\"https://chenqwwq.oss-cn-hangzhou.aliyuncs.com/note/DriverManager11loadInitialDrivers-7942521.png\" alt=\"loadInitialDrivers\" style=\"zoom:67%;\" />\n\n\n\n<p>而在 ServiceLoader 中就包含了对线程上下文类加载器的调用：</p>\n<img src=\"https://chenqwwq.oss-cn-hangzhou.aliyuncs.com/note/ServerLoader11load-7942523.png\" alt=\"ServerLoader#load\" style=\"zoom:67%;\" />\n\n\n\n<br>\n\n<br>\n\n<h3 id=\"Spring-的类加载机制\"><a href=\"#Spring-的类加载机制\" class=\"headerlink\" title=\"Spring 的类加载机制\"></a>Spring 的类加载机制</h3><p>Spring 的类加载场景比较复杂，所以基本是统一采用 TCCL 来实现类加载，Spring 研究不多，待补充。</p>\n","site":{"data":{}},"more":"<h1 id=\"类加载子系统\"><a href=\"#类加载子系统\" class=\"headerlink\" title=\"类加载子系统\"></a>类加载子系统</h1><h2 id=\"思维导图\"><a href=\"#思维导图\" class=\"headerlink\" title=\"思维导图\"></a>思维导图</h2><p><img src=\"https://chenqwwq.oss-cn-hangzhou.aliyuncs.com/note/JVM%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%AD%90%E7%B3%BB%E7%BB%9F-7942505.png\" alt=\"JVM 类加载子系统\"></p>\n<br>\n\n<br>\n\n<h2 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h2><p>Java 的类加载子系统负责从网络或者本地文件等多途径获取以 .class 结尾的字节码文件，并解析成基本的 Class 类型。</p>\n<p>加载子系统只负责类的加载，保证类的安全性，执行还是交给执行子系统的。</p>\n<br>\n\n<br>\n\n\n\n\n\n<h2 id=\"类加载的流程\"><a href=\"#类加载的流程\" class=\"headerlink\" title=\"类加载的流程\"></a>类加载的流程</h2><pre class=\"mermaid\">graph LR\n\n subgraph B [链接]\n D[验证] --> E[准备]\n E --> F[解析]\n end\n\nA[ 加载] --> D\nF --> H[初始化]</pre>\n\n\n\n<p><strong>实际的类加载流程是交叉进行的，并不是线程执行，</strong>例如加载到二进制流之后，验证就会开始文件结构验证。</p>\n<br>\n\n<ul>\n<li>加载</li>\n</ul>\n<p>加载就是通过<strong>类的全限定名</strong>获取该类的字节码文件的二进制流，并将其转化为运行时的数据结构，也就是 Class 文件。</p>\n<br>\n\n<ul>\n<li>验证</li>\n</ul>\n<p>验证是指对二进制流的验证，验证是否满足 JVM 的规范，是否会威胁到 JVM 自身的运行。</p>\n<p>验证细分有以下四个部分：<strong>文件结构验证，元数据验证，字节码验证，符号引用验证</strong>。</p>\n<p>在文件结构验证时候，二进制流就转化为了运行时数据结构，以后的验证都是对运行时结构的验证。</p>\n<p>符号引用验证会在解析的时候执行。</p>\n<br>\n\n<ul>\n<li>准备</li>\n</ul>\n<p>准备过程是给类变量分配空间的过程，并且回给类变量赋系统初值。</p>\n<p>系统初值是指 JVM 默认的值，例如 boolean 类型默认会为 false 等。</p>\n<br>\n\n<ul>\n<li>解析</li>\n</ul>\n<p>解析是对符号引用的解析，确保符号引用是全部有效，并将其转化为直接引用。</p>\n<p>Class 文件常量池中就包含了一部分的符号引用。</p>\n<br>\n\n<ul>\n<li>初始化</li>\n</ul>\n<p>初始化是执行 <code>&lt;cinit&gt;</code> 的过程。</p>\n<p><code>&lt;cinit&gt;</code>  就是从类文件中收集的包括静态初始化快，字面量初始化等等的语句。</p>\n<blockquote>\n<p>有一个注意点是静态初始化块是从上到下顺序加载并执行的，并且先于构造函数的 <init> 执行。</p>\n</blockquote>\n<br>\n\n<br>\n\n<h3 id=\"Class-加载和卸载\"><a href=\"#Class-加载和卸载\" class=\"headerlink\" title=\"Class 加载和卸载\"></a>Class 加载和卸载</h3><ul>\n<li>加载的时机</li>\n</ul>\n<ol>\n<li>创建类实例对象的时候，通过 new，reflect 等途径 </li>\n<li>调用类的静态方法或者访问类的静态变量的时候</li>\n<li>初始化子类时发现父类未加载，会先加载父类</li>\n</ol>\n<blockquote>\n<p>不全，代补充。</p>\n</blockquote>\n<br>\n\n<ul>\n<li>卸载的时机</li>\n</ul>\n<ol>\n<li>该类所有的实例都已被回收</li>\n<li>该类的 ClassLoader 已经被回收</li>\n<li>该类的 Class 对象没有在任何地方被引用</li>\n</ol>\n<br>\n\n<h3 id=\"Class-对象的存放\"><a href=\"#Class-对象的存放\" class=\"headerlink\" title=\"Class 对象的存放\"></a>Class 对象的存放</h3><p>类加载器加载 Class 文件，输出一个 Class 类，该类的信息都保存在<strong>元空间</strong>（1.8及以上版本），元空间是一片直接内存，会以 ClassLoader 为单位划分区域，每个 ClassLoader 还会保存各自加载过的类。</p>\n<p>装载过程中，字面量，常量会加入到各自的运行时常量池，部分符号引用此时会被解析为直接引用，另外还会保存一份虚方法表。</p>\n<br>\n\n<br>\n\n<h2 id=\"基本的类加载器\"><a href=\"#基本的类加载器\" class=\"headerlink\" title=\"基本的类加载器\"></a>基本的类加载器</h2><pre class=\"mermaid\">graph TD\nA[Bootstrap ClassLoader] --> B[Extension ClassLoader] \nB --> C[Application ClassLoader]</pre>\n\n\n\n<p>以上是 JDK 中提供的三种基础的类加载器。</p>\n<ul>\n<li>Bootstrap ClassLoader</li>\n</ul>\n<p>该类加载器使用 C 语言实现，直接内置在 JVM，用于加载 Java 核心库，例如 rt.jar 或者 bootstrap 目录下的依赖。</p>\n<p>并且出于安全考虑，该加载器只会加载 java，javax，sun 开头的类。</p>\n<br>\n\n<ul>\n<li>Extension ClassLoader</li>\n</ul>\n<p>扩展的类加载器，使用 Java 语言编写，具体实现为 sun.misc.Launcher$ExtClassLoader。</p>\n<p>用于加载 &#x2F;jre&#x2F;lib&#x2F;ext 下的类库，以 Bootstrap ClassLoader 为其父类</p>\n<br>\n\n<ul>\n<li>Application ClassLoader</li>\n</ul>\n<p>应用类加载器，具体实现为 sun.misc.Launcher$AppClassLoader。</p>\n<p>用于加载 CLASSPATH 目录下的类，为 ExtClassLoader 的子类。</p>\n<br>\n\n<blockquote>\n<p>Bootstrap 和 Extension 两个加载器扫描的类的目录已经被限定死了，这是后续 SPI 等实现必须要通过 TCCL 的原因之一。</p>\n</blockquote>\n<br>\n\n<blockquote>\n<p>还有一点重要的，Java 中判断两个 Class 是否相等，除了其本身还需要判断对应的类加载器是否一致，同个 Class 文件被不同的 ClassLoader 装载就是不同的 Class 对象。</p>\n</blockquote>\n<br>\n\n<h2 id=\"ClassLoader-的基础实现\"><a href=\"#ClassLoader-的基础实现\" class=\"headerlink\" title=\"ClassLoader 的基础实现\"></a>ClassLoader 的基础实现</h2><p>ExtClassLoader 和 AppClassLoader 都定义在 sun.misc.Launcher 中的，Launcher 是 Java 程序启动的起点。</p>\n<br>\n\n<h3 id=\"Launcher-的初始化\"><a href=\"#Launcher-的初始化\" class=\"headerlink\" title=\"Launcher 的初始化\"></a>Launcher 的初始化</h3><p>介绍 ExtClassLoader 和 AppClassLoader 两种基本类加载器的创建过程。</p>\n<blockquote>\n<p>Bootstrap 是内置在 JVM 中的，Java 程序启动的时候就是由 Bootstrap 先加载 Launcher 对象。</p>\n</blockquote>\n<br>\n\n<img src=\"https://chenqwwq.oss-cn-hangzhou.aliyuncs.com/note/Launcher%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0-7942515.png\" alt=\"Launcher构造函数\" style=\"zoom:67%;\" />\n\n<p>上图， Launcher 的构造函数中主要就包含了以下三个逻辑：</p>\n<ul>\n<li>创建 ExtClassLoader</li>\n<li>以 ExtClassLoader 为参数，创建 AppClassLoader</li>\n<li><strong>设置当前线程上下文加载器为 AppClassLoader</strong></li>\n</ul>\n<br>\n\n<br>\n\n<h3 id=\"ClassLoader-的实现\"><a href=\"#ClassLoader-的实现\" class=\"headerlink\" title=\"ClassLoader 的实现\"></a>ClassLoader 的实现</h3><p>AppClassLoader 和 ExtClassLoader 都继承于 URLClassLoader，而 URLClassLoader 又是继承与 ClassLoader 的。</p>\n<p>ClassLoader 中分别有以下几种重点方法：</p>\n<table>\n<thead>\n<tr>\n<th>方法名</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>loadClass(String,boolean)</td>\n<td>加载指定的 Class 文件的二进制流数据，boolean 表示是否对 Class 对象进行解析</td>\n</tr>\n<tr>\n<td>findClass(String)</td>\n<td>搜索 Class 文件，入参为类的全限定名</td>\n</tr>\n<tr>\n<td>defineClass(byte[] b, int off, int len)</td>\n<td>该方法用于将 byte 字节流解析成 Class 对象，入参就是 byte 数组。</td>\n</tr>\n<tr>\n<td>resolveClass(Class≺?≻ c)</td>\n<td>解析并初始化 Class 类</td>\n</tr>\n</tbody></table>\n<br>\n\n<h4 id=\"loadClass-String\"><a href=\"#loadClass-String\" class=\"headerlink\" title=\"#loadClass(String)\"></a>#loadClass(String)</h4><p>该方法是 ClassLoader 中最主要的方法，<strong>双亲委派机制</strong> 就是在该方法中实现的，<code>ClassLoader.loadClass</code> 也是常用的用于加载某个类的常用方法。</p>\n<blockquote>\n<p>有个容易忽略的点是，该方法可以获得 Class 类，但是并不会触发 Class 类的初始化，也就是类加载的最后一步。</p>\n<p>但 Class.forName 会触发类的初始化，</p>\n</blockquote>\n<br>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">// ClassLoader#loadClass</span><br><span class=\"hljs-keyword\">protected</span> Class&lt;?&gt; loadClass(String name, <span class=\"hljs-type\">boolean</span> resolve)<br>    <span class=\"hljs-keyword\">throws</span> ClassNotFoundException<br>&#123;<br>    <span class=\"hljs-keyword\">synchronized</span> (getClassLoadingLock(name)) &#123;<br>        <span class=\"hljs-comment\">// First, check if the class has already been loaded</span><br>        <span class=\"hljs-comment\">// 通过缓存查找是否被该类加载器加载过。</span><br>        Class&lt;?&gt; c = findLoadedClass(name);<br>        <span class=\"hljs-keyword\">if</span> (c == <span class=\"hljs-literal\">null</span>) &#123;<br>            <span class=\"hljs-type\">long</span> <span class=\"hljs-variable\">t0</span> <span class=\"hljs-operator\">=</span> System.nanoTime();<br>            <span class=\"hljs-keyword\">try</span> &#123;<br>                <span class=\"hljs-keyword\">if</span> (parent != <span class=\"hljs-literal\">null</span>) &#123;<br>                    <span class=\"hljs-comment\">// 通过父类加载器，加载 name 类</span><br>                    c = parent.loadClass(name, <span class=\"hljs-literal\">false</span>);<br>                &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>                    <span class=\"hljs-comment\">// 直接通过 Bootstrap 加载类</span><br>                    c = findBootstrapClassOrNull(name);<br>                &#125;<br>\t\t\t...<br>\t\t\t<br>            <span class=\"hljs-comment\">// 都找不到</span><br>            <span class=\"hljs-keyword\">if</span> (c == <span class=\"hljs-literal\">null</span>) &#123;<br>                ...<br>                <span class=\"hljs-comment\">// 调用 findClass 方法获取 Class 类</span><br>                c = findClass(name);<br>\t\t\t\t...<br>            &#125;<br>        &#125;<br>        <span class=\"hljs-comment\">// 是否需要解析</span><br>        <span class=\"hljs-keyword\">if</span> (resolve) &#123;<br>            <span class=\"hljs-comment\">// 需要就调用 resolveClass </span><br>            resolveClass(c);<br>        &#125;<br>        <span class=\"hljs-keyword\">return</span> c;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>从上面的代码可以大概的看出类加载的逻辑:</p>\n<ol>\n<li><strong>尝试从缓存中获取 Class</strong></li>\n<li><strong>通过 父类 或者 Bootstrap 获取 Class</strong></li>\n<li><strong>通过 findClass 方法获取 Class</strong></li>\n</ol>\n<p>以上三种就是 Class 对象的主要获取方式，之后根据参数会判断是否需要调用 resolveClass 方法进行解析。</p>\n<p>最后调用的 findClass 方法在 ClassLoader 中是一个空方法，也就是模板方法，等待子类继承实现，URLClassLoader 就实现了该方法。</p>\n<p>另外在方法的注释上也表明，<strong>实现者推荐开发者实现 findClass 方法，而并不推荐直接重写 loadClass 方法。</strong></p>\n<br>\n\n<br>\n\n<h2 id=\"双亲委派机制\"><a href=\"#双亲委派机制\" class=\"headerlink\" title=\"双亲委派机制\"></a>双亲委派机制</h2><p>上文说的，ClassLoader#loadClass 方法中实现了双亲委派机制的基础逻辑。</p>\n<p><strong>所有加载的类都会优先由父类加载，从下往上传递类加载任务，如果父类无法加载再由子类进行加载。</strong></p>\n<blockquote>\n<p>实现中可以看到，即使没有父类加载器，也会先从 Bootstrap 加载目标类，这就保证了 Java 核心类库的安全。</p>\n</blockquote>\n<br>\n\n<p>双亲委派的优势:</p>\n<ol>\n<li>避免了类的重复加载，父子之间就是一条责任链，父类加载过的类不需要子类重新加载。</li>\n<li>提高了程序的安全性，类似 java.lang.String 就只能通过 Bootstrap 加载</li>\n</ol>\n<blockquote>\n<p>代补充。</p>\n</blockquote>\n<p>双亲委派机制的层次性是自下而上的，下级的类加载器共享上级的类加载器所加载的类，但是下级加载的类堆上级是不可见的。</p>\n<br>\n\n<br>\n\n<h2 id=\"线程上下文类加载器\"><a href=\"#线程上下文类加载器\" class=\"headerlink\" title=\"线程上下文类加载器\"></a>线程上下文类加载器</h2><p>在 Launcher 的构造函数中就出现了相关逻辑，<strong>设置了 AppClassLoader 作为当前线程的上下文加载器</strong>。</p>\n<p>线程上下文加载器可以当做是将类加载器和线程绑定，在线程中保存一份加载器的引用，因此在任何地方都可以获取到当期线程的上下文类加载器。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">// 获取当前线程上下文类加载器的方法</span><br>Thread.currentThread().getContextClassLoader();<br></code></pre></td></tr></table></figure>\n\n<p><strong>该方法的出现就是为了打破双亲委派机制</strong>。</p>\n<p>在双亲委派机制中，类加载的任务是从下往上传递的，但是总有一些意外情况，比如 Java 核心类库中的类需要加载第三方类库的实现，比如 ServiceLoader 实现的 SPI 机制。</p>\n<p>Java 核心类库都是通过 Bootstrap 实现的，但是因为 Bootstrap 被限定了目录以及类路径前缀，所以无法被用来加载 ServiceLoader，此时就可以通过 线程上下文类加载器 实现高层的类加载器调用底层去加载类的逻辑。</p>\n<br>\n\n<blockquote>\n<p>非常重要的一点：</p>\n<p><strong>类优先由触发类加载的类所属的类加载器加载。</strong></p>\n</blockquote>\n<br>\n\n<br>\n\n<h2 id=\"打破双亲委派机制的实例\"><a href=\"#打破双亲委派机制的实例\" class=\"headerlink\" title=\"打破双亲委派机制的实例\"></a>打破双亲委派机制的实例</h2><h3 id=\"Tomcat-的类加载机制\"><a href=\"#Tomcat-的类加载机制\" class=\"headerlink\" title=\"Tomcat 的类加载机制\"></a>Tomcat 的类加载机制</h3><p>Tomcat 作为一个 Web Servlet 容器，肯定需要装载多个 Web 应用，多个应用之间的依赖库不可能完全一致，可能出现同个依赖不同版本的情况，也可能出现两个应用之间类名相同的情况，这个时候就需要在多个 WebApp 之间做类上的隔离，另外同一个应用不可能说相同的依赖还需要重复加载几次，所以也存在依赖复用的情况。</p>\n<p>另外 Tomcat 还提供了 Jsp 的热加载功能，动态的卸载和加载 Jsp 类。</p>\n<blockquote>\n<p>JSP 最后会被转化为 Class 然后执行输出。</p>\n</blockquote>\n<pre class=\"mermaid\">graph TD\nA[Bootstrap ClassLoader] --> B[Extension ClassLoader] \nB --> C[Application ClassLoader]\nC --> D[Common ClassLoader]\nD --> E[Catalina ClassLoader]\nD --> F[Shared ClassLoader]\nF --> G[WebApp ClassLoader]\nG --> H[Jsp ClassLoader]</pre>\n\n\n\n\n\n<p>所以 Tomcat 设计了如上的一套类加载体系。</p>\n<p>除开三种基础的类加载器，Common 就是 Tomcat 中最上层的，他加载的类对所有的 Web 应用共享，并且对 Tomcat 自身也是共享的。</p>\n<p>Catalina 负责加载的是 Tomcat 专用的一些类，比如 Tomcat 中的 Connector 等一些基础组件，这些对 Web 应用来说是不可见的，是隔离开的。</p>\n<p>Shared 负责加载的是所有的 Web 引用共享的类，它和 Catalina 相隔离，互相不可见。</p>\n<p>WebApp 负责加载当应用的类库，一个应用就对应这一个 WebApp 类加载器，相互之间隔离互相不影响，并且共享 Shared 类加载器加载的共用类。</p>\n<p>Jsp 比较特别，它是每一个类一个类加载器，用于在 Jsp 文件修改之后做热更新。</p>\n<blockquote>\n<p>Common，Catalina 以及 Shared 都有指定的目录，不过不是本文的重点就不说了。</p>\n</blockquote>\n<br>\n\n<p><strong>通过以上的体系，Tomcat 实现了类之间隔离和共享的关系区分。</strong></p>\n<p>实现上 Catalina 和 Common 以及 Shared 都是 URLClassLoader，还是遵从的双亲委派机制的。</p>\n<p>但是 WebApp 是单独实现的，继承了 URLClassLoader，并重写了 loadClass 方法，在查找了当前的 ClassLoader 的缓存之后，并没有直接使用父类加载器加载，而是继续在本地查找，找不到再去父类查找。</p>\n<br>\n\n<h3 id=\"JDK-的-SPI-实现-JDBC-Driver-实现的加载\"><a href=\"#JDK-的-SPI-实现-JDBC-Driver-实现的加载\" class=\"headerlink\" title=\"JDK 的 SPI 实现 - JDBC Driver 实现的加载\"></a>JDK 的 SPI 实现 - JDBC Driver 实现的加载</h3><p>JDBC 的核心类定义在 Java 的核心库，由 Bootstrap 加载，但是三方的实现却是在 ClassPath 里，需要使用 Application 来加载。</p>\n<p>在 Java 的核心类加载三方实现的时候默认就是从  Application 加载，此时就会出现 ClassNotFound。</p>\n<br>\n\n<p><strong>JDBC 就在采用的方法就是 TCCL (Thread Context Class Loader) 线程上下文类加载器。</strong></p>\n<p>在核心类中获取当前线程中绑定的类加载器，由此优先高级别类加载器调用低级别类加载器的实现。</p>\n<br>\n\n<p>参考 DriverManager 获取 Driver 的实现。</p>\n<p>首先该类的静态初始化块中就包含了 Driver 的类加载流程。</p>\n<img src=\"https://chenqwwq.oss-cn-hangzhou.aliyuncs.com/note/DriverManager%E7%9A%84%E9%9D%99%E6%80%81%E5%88%9D%E5%A7%8B%E5%8C%96%E5%9D%97-7942519.png\" alt=\"DriverManager 的静态初始化块\" style=\"zoom:80%;\" />\n\n<p>在 loadInitialDrivers 方法中调用了 ServiceLoader 的 load 方法：</p>\n<img src=\"https://chenqwwq.oss-cn-hangzhou.aliyuncs.com/note/DriverManager11loadInitialDrivers-7942521.png\" alt=\"loadInitialDrivers\" style=\"zoom:67%;\" />\n\n\n\n<p>而在 ServiceLoader 中就包含了对线程上下文类加载器的调用：</p>\n<img src=\"https://chenqwwq.oss-cn-hangzhou.aliyuncs.com/note/ServerLoader11load-7942523.png\" alt=\"ServerLoader#load\" style=\"zoom:67%;\" />\n\n\n\n<br>\n\n<br>\n\n<h3 id=\"Spring-的类加载机制\"><a href=\"#Spring-的类加载机制\" class=\"headerlink\" title=\"Spring 的类加载机制\"></a>Spring 的类加载机制</h3><p>Spring 的类加载场景比较复杂，所以基本是统一采用 TCCL 来实现类加载，Spring 研究不多，待补充。</p>\n"},{"title":"浅析 Redis 的主从模式","excerpt":"Redis 的主从模式和 Sentinel 分别解决的是 Redis 的读性能瓶颈以及单点故障问题。","index_img":"https://chenqwwq.oss-cn-hangzhou.aliyuncs.com/note/redis-master-slaver-7942494.png","banner_img":"https://chenqwwq.oss-cn-hangzhou.aliyuncs.com/note/redis-master-slaver-7942494.png","date":"2021-05-27T16:24:35.000Z","_content":"\n\n\n# Redis 的主从复制\n\n\n\n## 概述\n\nRedis 的主从复制是 Redis 官方推出的分布式机制，解决了部分集群问题。\n\n官方后续的一些分布式的实现，包括 Sentinel 以及 Cluster 等，多多少少都用到了复制的功能。\n\n\n\n\n\n## 思维脑图\n\n![redis-master-slaver](https://chenqwwq.oss-cn-hangzhou.aliyuncs.com/note/redis-master-slaver-7942494.png)\n\n\n\n\n\n## 相关实现\n\n### 查看节点主从信息\n\n通过指令 `info replication`，可以单独查看服务器此时的主从信息。如下：\n\n![redis-info-replication](https://chenqwwq.oss-cn-hangzhou.aliyuncs.com/note/redis_info_replication_master-7942497.png)\n\n> role 表示当前节点的身份，master 表示是主节点\n>\n> connected_slave 表示当前的子节点数，以及 slave0 就表示子节点信息。\n\n<br>\n\n\n\n### 主从关系的建立\n\nRedis 服务器可以通过 `SLAVEOF <ip> <port>` 命令或者配置文件中 `slavof <ip> <port>` 的方式，建立主从关系。\n\n被复制的服务器称为主服务器，当前服务器则称为从服务器。\n\n需要注意的是，Redis 只支持一主多从的方式，一个从服务器只能对应一个主服务器。\n\n<br>\n\n\n\n**建立主从关系之后，从服务器就无法再执行写命令了，而是完全同步主服务器的数据。**\n\n> 即使在执行 AOF 或者 RDB 文件的过程中发现有过期的键也不会主动删除，只能等主服务器的同步。\n>\n> 因为无法执行命令，无法写入，所以**主从模式仅仅只扩展了读属性，写入瓶颈依然存在。**\n\n<br>\n\n\n\n该种主从复制模型非常适合读多写少的环境，复制相当于为主服务器中的数据创建多个复本，也算是一种**容错策略**。\n\n单点的写入也一定程度上保证了一致性的要求。\n\n> 这里的一致性都是指最终一致性，**因为命令的扩散也会有延迟**，卡着延迟从从服务器中读取就会有数据不一致的问题。\n>\n> 因此如果对一致性的要求很高，或者必须要强一致性，建议不要从从服务器读取。\n\n\n\n复制模式可以分为**数据同步**以及**命令传播**两个阶段。\n\n数据同步就是从服务器刚开始连接时的操作，全盘同步主服务器上的数据。\n\n命令传播就是主服务器将本地执行过的命令再发送到从服务器(主服务器以客户端的身份发送命令到从服务器)。\n\n<br>\n\n\n\n**Redis 中对应数据同步的命令有两个 SYNC 和 PSYNC。**\n\n### SYNC - 旧版复制\n\n旧版的数据同步就是依托于 SYNC 命令，从服务器向主服务器发送该命令表示开启同步数据流程。\n\n![redis-sync基础流程](https://chenqwwq.oss-cn-hangzhou.aliyuncs.com/note/Redis_SYNC_%E6%B5%81%E7%A8%8B-7942500.png)\n\n主服务器首次接收到 `SYNC` 命令之后，会执行 BGSAVE 命令生成 RDB 文件，并在此时开启**命令缓冲区**，记录备份期间所有执行的写命令。\n\nBGSAVE 执行完之后，会将生成的RDB文件发送给从服务器。\n\n> 此时如果于多个从服务器连接，RDB 文件是可以直接共享的。\n\n从服务器在接收到主服务器发送的 RDB 文件之后，会清空本地的所有数据，全盘载入 RDB 文件中的数据。\n\n之后主服务器还会将缓冲区中的数据发送到从服务器，从服务器执行完缓冲区中的写命令，就达到了和主服务器的完全一致。\n\n<br>\n\n\n\n> 旧版的复制很简单，主要就是生成 RDB 文件并传播指令。\n>\n> 问题就在于太过简单，**即使网络波动导致的瞬时断连，在重连之后也会进行全量同步。**\n\n<br>\n\n\n\n### PSYNC - 新版本的数据同步\n\nPSYNC 命令是对 SYNC 命令的进一步优化，主要是 SYNC 只能进行全量同步，效率真的就不高，为此在 Redis2.8 版本之后，新增加了一个 PSYNC 命令。\n\nPSYNC 命令完整的形式是 `PSYNC <runid> <offest>`，**在全量同步的基础上增加了一个增量同步的过程判断。**\n\n</br>\n\n\n\n下面是增量同步中增加的概念：\n\n1. 复制偏移量\n\n   按照字面意思也很好理解，是主从服务器各自维护的**以字节为单位**的属性，表示复制的进度。\n\n   比如当前主服务器的复制偏移量为10000，在发送了50个字节的内容之后，就变为了10050，可以认为是主从服务器数据不一致性程度的表示。\n\n   在 Sentinel 执行故障转移的时候也会以复制偏移量作为主要的参考依据。\n\n   > 一定程度上，复制偏移量就表示从节点数据的完整性。\n\n   <br>\n\n   \n\n2. 复制缓冲区\n\n   复制缓冲区是由主服务器维护的一个固定长度的 FIFO 队列，该队列会缓存近期主服务器所执行的写命令。\n\n   <br>\n\n   \n\n3. 主服务器 run ID\n\n   run ID 唯一标识一个 Redis 服务器。\n\n   实际上不论主从在服务器启动时都会生成一个 run ID，由40位随机的16进制字符组成。\n\n   此处的 run ID 是在从服务器连接到主服务器是由主服务器下发的自身的 run ID，重连之后通过判断 run ID 来确定是否为同一个 Master。\n\n<br>\n\n\n\nPSYNC 的执行流程简述如下：\n\n1. 判断 run ID 是否相同，不相同会直接开启全量同步的逻辑，相当于直接走 SYNC。\n2. run ID 相同表示是断线重连，判断复制偏移量是否还在复制缓冲区中，如果超出表示超时时间过长，也需要走 SYNC。\n3. 如果复制偏移量未超出复制缓冲区，则直接将复制缓冲区中的命令发送到从服务器，从而避免全量同步。\n\n<br>\n\n\n\n\n\n## Q&A\n\n\n\n> Q: 主从模式的优势\n\n\n\n横向扩展了读性能\n\n备份数据，强化数据安全\n\n<br>\n\n\n\n\n\n> Q: 主从模式的存在的问题\n\n\n\n对于写性能并没有提高，可能出于一致性的考虑，Redis 的主从模式并不允许从从服务器写入。\n\n非强一致性，命令的扩散存在一定的延时，此时主从的数据并不一致。\n\n单点故障问题，因为只能从主节点写入，单点故障问题很难避免，只要主节点宕机，整个集群就不可写入。\n\n<br>\n\n\n\n\n\n> Q: PSYNC 的优化\n\nPSYNC 借由复制缓冲区实现了对断线重连的容忍机制，如果断线时间断，可以从复制缓冲区中找到缺失的命令就可以进行部分重同步，而避免每次都是全量同步。","source":"_posts/浅谈Redis的主从复制模式.md","raw":"---\ntitle: 浅析 Redis 的主从模式\nexcerpt: Redis 的主从模式和 Sentinel 分别解决的是 Redis 的读性能瓶颈以及单点故障问题。\nindex_img: https://chenqwwq.oss-cn-hangzhou.aliyuncs.com/note/redis-master-slaver-7942494.png\nbanner_img: https://chenqwwq.oss-cn-hangzhou.aliyuncs.com/note/redis-master-slaver-7942494.png\ndate: 2021-05-28 00:24:35\ncategories:\n- redis\ntags:\n- redis\n---\n\n\n\n# Redis 的主从复制\n\n\n\n## 概述\n\nRedis 的主从复制是 Redis 官方推出的分布式机制，解决了部分集群问题。\n\n官方后续的一些分布式的实现，包括 Sentinel 以及 Cluster 等，多多少少都用到了复制的功能。\n\n\n\n\n\n## 思维脑图\n\n![redis-master-slaver](https://chenqwwq.oss-cn-hangzhou.aliyuncs.com/note/redis-master-slaver-7942494.png)\n\n\n\n\n\n## 相关实现\n\n### 查看节点主从信息\n\n通过指令 `info replication`，可以单独查看服务器此时的主从信息。如下：\n\n![redis-info-replication](https://chenqwwq.oss-cn-hangzhou.aliyuncs.com/note/redis_info_replication_master-7942497.png)\n\n> role 表示当前节点的身份，master 表示是主节点\n>\n> connected_slave 表示当前的子节点数，以及 slave0 就表示子节点信息。\n\n<br>\n\n\n\n### 主从关系的建立\n\nRedis 服务器可以通过 `SLAVEOF <ip> <port>` 命令或者配置文件中 `slavof <ip> <port>` 的方式，建立主从关系。\n\n被复制的服务器称为主服务器，当前服务器则称为从服务器。\n\n需要注意的是，Redis 只支持一主多从的方式，一个从服务器只能对应一个主服务器。\n\n<br>\n\n\n\n**建立主从关系之后，从服务器就无法再执行写命令了，而是完全同步主服务器的数据。**\n\n> 即使在执行 AOF 或者 RDB 文件的过程中发现有过期的键也不会主动删除，只能等主服务器的同步。\n>\n> 因为无法执行命令，无法写入，所以**主从模式仅仅只扩展了读属性，写入瓶颈依然存在。**\n\n<br>\n\n\n\n该种主从复制模型非常适合读多写少的环境，复制相当于为主服务器中的数据创建多个复本，也算是一种**容错策略**。\n\n单点的写入也一定程度上保证了一致性的要求。\n\n> 这里的一致性都是指最终一致性，**因为命令的扩散也会有延迟**，卡着延迟从从服务器中读取就会有数据不一致的问题。\n>\n> 因此如果对一致性的要求很高，或者必须要强一致性，建议不要从从服务器读取。\n\n\n\n复制模式可以分为**数据同步**以及**命令传播**两个阶段。\n\n数据同步就是从服务器刚开始连接时的操作，全盘同步主服务器上的数据。\n\n命令传播就是主服务器将本地执行过的命令再发送到从服务器(主服务器以客户端的身份发送命令到从服务器)。\n\n<br>\n\n\n\n**Redis 中对应数据同步的命令有两个 SYNC 和 PSYNC。**\n\n### SYNC - 旧版复制\n\n旧版的数据同步就是依托于 SYNC 命令，从服务器向主服务器发送该命令表示开启同步数据流程。\n\n![redis-sync基础流程](https://chenqwwq.oss-cn-hangzhou.aliyuncs.com/note/Redis_SYNC_%E6%B5%81%E7%A8%8B-7942500.png)\n\n主服务器首次接收到 `SYNC` 命令之后，会执行 BGSAVE 命令生成 RDB 文件，并在此时开启**命令缓冲区**，记录备份期间所有执行的写命令。\n\nBGSAVE 执行完之后，会将生成的RDB文件发送给从服务器。\n\n> 此时如果于多个从服务器连接，RDB 文件是可以直接共享的。\n\n从服务器在接收到主服务器发送的 RDB 文件之后，会清空本地的所有数据，全盘载入 RDB 文件中的数据。\n\n之后主服务器还会将缓冲区中的数据发送到从服务器，从服务器执行完缓冲区中的写命令，就达到了和主服务器的完全一致。\n\n<br>\n\n\n\n> 旧版的复制很简单，主要就是生成 RDB 文件并传播指令。\n>\n> 问题就在于太过简单，**即使网络波动导致的瞬时断连，在重连之后也会进行全量同步。**\n\n<br>\n\n\n\n### PSYNC - 新版本的数据同步\n\nPSYNC 命令是对 SYNC 命令的进一步优化，主要是 SYNC 只能进行全量同步，效率真的就不高，为此在 Redis2.8 版本之后，新增加了一个 PSYNC 命令。\n\nPSYNC 命令完整的形式是 `PSYNC <runid> <offest>`，**在全量同步的基础上增加了一个增量同步的过程判断。**\n\n</br>\n\n\n\n下面是增量同步中增加的概念：\n\n1. 复制偏移量\n\n   按照字面意思也很好理解，是主从服务器各自维护的**以字节为单位**的属性，表示复制的进度。\n\n   比如当前主服务器的复制偏移量为10000，在发送了50个字节的内容之后，就变为了10050，可以认为是主从服务器数据不一致性程度的表示。\n\n   在 Sentinel 执行故障转移的时候也会以复制偏移量作为主要的参考依据。\n\n   > 一定程度上，复制偏移量就表示从节点数据的完整性。\n\n   <br>\n\n   \n\n2. 复制缓冲区\n\n   复制缓冲区是由主服务器维护的一个固定长度的 FIFO 队列，该队列会缓存近期主服务器所执行的写命令。\n\n   <br>\n\n   \n\n3. 主服务器 run ID\n\n   run ID 唯一标识一个 Redis 服务器。\n\n   实际上不论主从在服务器启动时都会生成一个 run ID，由40位随机的16进制字符组成。\n\n   此处的 run ID 是在从服务器连接到主服务器是由主服务器下发的自身的 run ID，重连之后通过判断 run ID 来确定是否为同一个 Master。\n\n<br>\n\n\n\nPSYNC 的执行流程简述如下：\n\n1. 判断 run ID 是否相同，不相同会直接开启全量同步的逻辑，相当于直接走 SYNC。\n2. run ID 相同表示是断线重连，判断复制偏移量是否还在复制缓冲区中，如果超出表示超时时间过长，也需要走 SYNC。\n3. 如果复制偏移量未超出复制缓冲区，则直接将复制缓冲区中的命令发送到从服务器，从而避免全量同步。\n\n<br>\n\n\n\n\n\n## Q&A\n\n\n\n> Q: 主从模式的优势\n\n\n\n横向扩展了读性能\n\n备份数据，强化数据安全\n\n<br>\n\n\n\n\n\n> Q: 主从模式的存在的问题\n\n\n\n对于写性能并没有提高，可能出于一致性的考虑，Redis 的主从模式并不允许从从服务器写入。\n\n非强一致性，命令的扩散存在一定的延时，此时主从的数据并不一致。\n\n单点故障问题，因为只能从主节点写入，单点故障问题很难避免，只要主节点宕机，整个集群就不可写入。\n\n<br>\n\n\n\n\n\n> Q: PSYNC 的优化\n\nPSYNC 借由复制缓冲区实现了对断线重连的容忍机制，如果断线时间断，可以从复制缓冲区中找到缺失的命令就可以进行部分重同步，而避免每次都是全量同步。","slug":"浅谈Redis的主从复制模式","published":1,"updated":"2022-03-23T03:00:40.812Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clk87sjyl000ywnbv3g3lbqdz","content":"<h1 id=\"Redis-的主从复制\"><a href=\"#Redis-的主从复制\" class=\"headerlink\" title=\"Redis 的主从复制\"></a>Redis 的主从复制</h1><h2 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h2><p>Redis 的主从复制是 Redis 官方推出的分布式机制，解决了部分集群问题。</p>\n<p>官方后续的一些分布式的实现，包括 Sentinel 以及 Cluster 等，多多少少都用到了复制的功能。</p>\n<h2 id=\"思维脑图\"><a href=\"#思维脑图\" class=\"headerlink\" title=\"思维脑图\"></a>思维脑图</h2><p><img src=\"https://chenqwwq.oss-cn-hangzhou.aliyuncs.com/note/redis-master-slaver-7942494.png\" alt=\"redis-master-slaver\"></p>\n<h2 id=\"相关实现\"><a href=\"#相关实现\" class=\"headerlink\" title=\"相关实现\"></a>相关实现</h2><h3 id=\"查看节点主从信息\"><a href=\"#查看节点主从信息\" class=\"headerlink\" title=\"查看节点主从信息\"></a>查看节点主从信息</h3><p>通过指令 <code>info replication</code>，可以单独查看服务器此时的主从信息。如下：</p>\n<p><img src=\"https://chenqwwq.oss-cn-hangzhou.aliyuncs.com/note/redis_info_replication_master-7942497.png\" alt=\"redis-info-replication\"></p>\n<blockquote>\n<p>role 表示当前节点的身份，master 表示是主节点</p>\n<p>connected_slave 表示当前的子节点数，以及 slave0 就表示子节点信息。</p>\n</blockquote>\n<br>\n\n\n\n<h3 id=\"主从关系的建立\"><a href=\"#主从关系的建立\" class=\"headerlink\" title=\"主从关系的建立\"></a>主从关系的建立</h3><p>Redis 服务器可以通过 <code>SLAVEOF &lt;ip&gt; &lt;port&gt;</code> 命令或者配置文件中 <code>slavof &lt;ip&gt; &lt;port&gt;</code> 的方式，建立主从关系。</p>\n<p>被复制的服务器称为主服务器，当前服务器则称为从服务器。</p>\n<p>需要注意的是，Redis 只支持一主多从的方式，一个从服务器只能对应一个主服务器。</p>\n<br>\n\n\n\n<p><strong>建立主从关系之后，从服务器就无法再执行写命令了，而是完全同步主服务器的数据。</strong></p>\n<blockquote>\n<p>即使在执行 AOF 或者 RDB 文件的过程中发现有过期的键也不会主动删除，只能等主服务器的同步。</p>\n<p>因为无法执行命令，无法写入，所以<strong>主从模式仅仅只扩展了读属性，写入瓶颈依然存在。</strong></p>\n</blockquote>\n<br>\n\n\n\n<p>该种主从复制模型非常适合读多写少的环境，复制相当于为主服务器中的数据创建多个复本，也算是一种<strong>容错策略</strong>。</p>\n<p>单点的写入也一定程度上保证了一致性的要求。</p>\n<blockquote>\n<p>这里的一致性都是指最终一致性，<strong>因为命令的扩散也会有延迟</strong>，卡着延迟从从服务器中读取就会有数据不一致的问题。</p>\n<p>因此如果对一致性的要求很高，或者必须要强一致性，建议不要从从服务器读取。</p>\n</blockquote>\n<p>复制模式可以分为<strong>数据同步</strong>以及<strong>命令传播</strong>两个阶段。</p>\n<p>数据同步就是从服务器刚开始连接时的操作，全盘同步主服务器上的数据。</p>\n<p>命令传播就是主服务器将本地执行过的命令再发送到从服务器(主服务器以客户端的身份发送命令到从服务器)。</p>\n<br>\n\n\n\n<p><strong>Redis 中对应数据同步的命令有两个 SYNC 和 PSYNC。</strong></p>\n<h3 id=\"SYNC-旧版复制\"><a href=\"#SYNC-旧版复制\" class=\"headerlink\" title=\"SYNC - 旧版复制\"></a>SYNC - 旧版复制</h3><p>旧版的数据同步就是依托于 SYNC 命令，从服务器向主服务器发送该命令表示开启同步数据流程。</p>\n<p><img src=\"https://chenqwwq.oss-cn-hangzhou.aliyuncs.com/note/Redis_SYNC_%E6%B5%81%E7%A8%8B-7942500.png\" alt=\"redis-sync基础流程\"></p>\n<p>主服务器首次接收到 <code>SYNC</code> 命令之后，会执行 BGSAVE 命令生成 RDB 文件，并在此时开启<strong>命令缓冲区</strong>，记录备份期间所有执行的写命令。</p>\n<p>BGSAVE 执行完之后，会将生成的RDB文件发送给从服务器。</p>\n<blockquote>\n<p>此时如果于多个从服务器连接，RDB 文件是可以直接共享的。</p>\n</blockquote>\n<p>从服务器在接收到主服务器发送的 RDB 文件之后，会清空本地的所有数据，全盘载入 RDB 文件中的数据。</p>\n<p>之后主服务器还会将缓冲区中的数据发送到从服务器，从服务器执行完缓冲区中的写命令，就达到了和主服务器的完全一致。</p>\n<br>\n\n\n\n<blockquote>\n<p>旧版的复制很简单，主要就是生成 RDB 文件并传播指令。</p>\n<p>问题就在于太过简单，<strong>即使网络波动导致的瞬时断连，在重连之后也会进行全量同步。</strong></p>\n</blockquote>\n<br>\n\n\n\n<h3 id=\"PSYNC-新版本的数据同步\"><a href=\"#PSYNC-新版本的数据同步\" class=\"headerlink\" title=\"PSYNC - 新版本的数据同步\"></a>PSYNC - 新版本的数据同步</h3><p>PSYNC 命令是对 SYNC 命令的进一步优化，主要是 SYNC 只能进行全量同步，效率真的就不高，为此在 Redis2.8 版本之后，新增加了一个 PSYNC 命令。</p>\n<p>PSYNC 命令完整的形式是 <code>PSYNC &lt;runid&gt; &lt;offest&gt;</code>，<strong>在全量同步的基础上增加了一个增量同步的过程判断。</strong></p>\n</br>\n\n\n\n<p>下面是增量同步中增加的概念：</p>\n<ol>\n<li><p>复制偏移量</p>\n<p>按照字面意思也很好理解，是主从服务器各自维护的<strong>以字节为单位</strong>的属性，表示复制的进度。</p>\n<p>比如当前主服务器的复制偏移量为10000，在发送了50个字节的内容之后，就变为了10050，可以认为是主从服务器数据不一致性程度的表示。</p>\n<p>在 Sentinel 执行故障转移的时候也会以复制偏移量作为主要的参考依据。</p>\n<blockquote>\n<p>一定程度上，复制偏移量就表示从节点数据的完整性。</p>\n</blockquote>\n<br>\n\n\n</li>\n<li><p>复制缓冲区</p>\n<p>复制缓冲区是由主服务器维护的一个固定长度的 FIFO 队列，该队列会缓存近期主服务器所执行的写命令。</p>\n<br>\n\n\n</li>\n<li><p>主服务器 run ID</p>\n<p>run ID 唯一标识一个 Redis 服务器。</p>\n<p>实际上不论主从在服务器启动时都会生成一个 run ID，由40位随机的16进制字符组成。</p>\n<p>此处的 run ID 是在从服务器连接到主服务器是由主服务器下发的自身的 run ID，重连之后通过判断 run ID 来确定是否为同一个 Master。</p>\n</li>\n</ol>\n<br>\n\n\n\n<p>PSYNC 的执行流程简述如下：</p>\n<ol>\n<li>判断 run ID 是否相同，不相同会直接开启全量同步的逻辑，相当于直接走 SYNC。</li>\n<li>run ID 相同表示是断线重连，判断复制偏移量是否还在复制缓冲区中，如果超出表示超时时间过长，也需要走 SYNC。</li>\n<li>如果复制偏移量未超出复制缓冲区，则直接将复制缓冲区中的命令发送到从服务器，从而避免全量同步。</li>\n</ol>\n<br>\n\n\n\n\n\n<h2 id=\"Q-amp-A\"><a href=\"#Q-amp-A\" class=\"headerlink\" title=\"Q&amp;A\"></a>Q&amp;A</h2><blockquote>\n<p>Q: 主从模式的优势</p>\n</blockquote>\n<p>横向扩展了读性能</p>\n<p>备份数据，强化数据安全</p>\n<br>\n\n\n\n\n\n<blockquote>\n<p>Q: 主从模式的存在的问题</p>\n</blockquote>\n<p>对于写性能并没有提高，可能出于一致性的考虑，Redis 的主从模式并不允许从从服务器写入。</p>\n<p>非强一致性，命令的扩散存在一定的延时，此时主从的数据并不一致。</p>\n<p>单点故障问题，因为只能从主节点写入，单点故障问题很难避免，只要主节点宕机，整个集群就不可写入。</p>\n<br>\n\n\n\n\n\n<blockquote>\n<p>Q: PSYNC 的优化</p>\n</blockquote>\n<p>PSYNC 借由复制缓冲区实现了对断线重连的容忍机制，如果断线时间断，可以从复制缓冲区中找到缺失的命令就可以进行部分重同步，而避免每次都是全量同步。</p>\n","site":{"data":{}},"more":"<h1 id=\"Redis-的主从复制\"><a href=\"#Redis-的主从复制\" class=\"headerlink\" title=\"Redis 的主从复制\"></a>Redis 的主从复制</h1><h2 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h2><p>Redis 的主从复制是 Redis 官方推出的分布式机制，解决了部分集群问题。</p>\n<p>官方后续的一些分布式的实现，包括 Sentinel 以及 Cluster 等，多多少少都用到了复制的功能。</p>\n<h2 id=\"思维脑图\"><a href=\"#思维脑图\" class=\"headerlink\" title=\"思维脑图\"></a>思维脑图</h2><p><img src=\"https://chenqwwq.oss-cn-hangzhou.aliyuncs.com/note/redis-master-slaver-7942494.png\" alt=\"redis-master-slaver\"></p>\n<h2 id=\"相关实现\"><a href=\"#相关实现\" class=\"headerlink\" title=\"相关实现\"></a>相关实现</h2><h3 id=\"查看节点主从信息\"><a href=\"#查看节点主从信息\" class=\"headerlink\" title=\"查看节点主从信息\"></a>查看节点主从信息</h3><p>通过指令 <code>info replication</code>，可以单独查看服务器此时的主从信息。如下：</p>\n<p><img src=\"https://chenqwwq.oss-cn-hangzhou.aliyuncs.com/note/redis_info_replication_master-7942497.png\" alt=\"redis-info-replication\"></p>\n<blockquote>\n<p>role 表示当前节点的身份，master 表示是主节点</p>\n<p>connected_slave 表示当前的子节点数，以及 slave0 就表示子节点信息。</p>\n</blockquote>\n<br>\n\n\n\n<h3 id=\"主从关系的建立\"><a href=\"#主从关系的建立\" class=\"headerlink\" title=\"主从关系的建立\"></a>主从关系的建立</h3><p>Redis 服务器可以通过 <code>SLAVEOF &lt;ip&gt; &lt;port&gt;</code> 命令或者配置文件中 <code>slavof &lt;ip&gt; &lt;port&gt;</code> 的方式，建立主从关系。</p>\n<p>被复制的服务器称为主服务器，当前服务器则称为从服务器。</p>\n<p>需要注意的是，Redis 只支持一主多从的方式，一个从服务器只能对应一个主服务器。</p>\n<br>\n\n\n\n<p><strong>建立主从关系之后，从服务器就无法再执行写命令了，而是完全同步主服务器的数据。</strong></p>\n<blockquote>\n<p>即使在执行 AOF 或者 RDB 文件的过程中发现有过期的键也不会主动删除，只能等主服务器的同步。</p>\n<p>因为无法执行命令，无法写入，所以<strong>主从模式仅仅只扩展了读属性，写入瓶颈依然存在。</strong></p>\n</blockquote>\n<br>\n\n\n\n<p>该种主从复制模型非常适合读多写少的环境，复制相当于为主服务器中的数据创建多个复本，也算是一种<strong>容错策略</strong>。</p>\n<p>单点的写入也一定程度上保证了一致性的要求。</p>\n<blockquote>\n<p>这里的一致性都是指最终一致性，<strong>因为命令的扩散也会有延迟</strong>，卡着延迟从从服务器中读取就会有数据不一致的问题。</p>\n<p>因此如果对一致性的要求很高，或者必须要强一致性，建议不要从从服务器读取。</p>\n</blockquote>\n<p>复制模式可以分为<strong>数据同步</strong>以及<strong>命令传播</strong>两个阶段。</p>\n<p>数据同步就是从服务器刚开始连接时的操作，全盘同步主服务器上的数据。</p>\n<p>命令传播就是主服务器将本地执行过的命令再发送到从服务器(主服务器以客户端的身份发送命令到从服务器)。</p>\n<br>\n\n\n\n<p><strong>Redis 中对应数据同步的命令有两个 SYNC 和 PSYNC。</strong></p>\n<h3 id=\"SYNC-旧版复制\"><a href=\"#SYNC-旧版复制\" class=\"headerlink\" title=\"SYNC - 旧版复制\"></a>SYNC - 旧版复制</h3><p>旧版的数据同步就是依托于 SYNC 命令，从服务器向主服务器发送该命令表示开启同步数据流程。</p>\n<p><img src=\"https://chenqwwq.oss-cn-hangzhou.aliyuncs.com/note/Redis_SYNC_%E6%B5%81%E7%A8%8B-7942500.png\" alt=\"redis-sync基础流程\"></p>\n<p>主服务器首次接收到 <code>SYNC</code> 命令之后，会执行 BGSAVE 命令生成 RDB 文件，并在此时开启<strong>命令缓冲区</strong>，记录备份期间所有执行的写命令。</p>\n<p>BGSAVE 执行完之后，会将生成的RDB文件发送给从服务器。</p>\n<blockquote>\n<p>此时如果于多个从服务器连接，RDB 文件是可以直接共享的。</p>\n</blockquote>\n<p>从服务器在接收到主服务器发送的 RDB 文件之后，会清空本地的所有数据，全盘载入 RDB 文件中的数据。</p>\n<p>之后主服务器还会将缓冲区中的数据发送到从服务器，从服务器执行完缓冲区中的写命令，就达到了和主服务器的完全一致。</p>\n<br>\n\n\n\n<blockquote>\n<p>旧版的复制很简单，主要就是生成 RDB 文件并传播指令。</p>\n<p>问题就在于太过简单，<strong>即使网络波动导致的瞬时断连，在重连之后也会进行全量同步。</strong></p>\n</blockquote>\n<br>\n\n\n\n<h3 id=\"PSYNC-新版本的数据同步\"><a href=\"#PSYNC-新版本的数据同步\" class=\"headerlink\" title=\"PSYNC - 新版本的数据同步\"></a>PSYNC - 新版本的数据同步</h3><p>PSYNC 命令是对 SYNC 命令的进一步优化，主要是 SYNC 只能进行全量同步，效率真的就不高，为此在 Redis2.8 版本之后，新增加了一个 PSYNC 命令。</p>\n<p>PSYNC 命令完整的形式是 <code>PSYNC &lt;runid&gt; &lt;offest&gt;</code>，<strong>在全量同步的基础上增加了一个增量同步的过程判断。</strong></p>\n</br>\n\n\n\n<p>下面是增量同步中增加的概念：</p>\n<ol>\n<li><p>复制偏移量</p>\n<p>按照字面意思也很好理解，是主从服务器各自维护的<strong>以字节为单位</strong>的属性，表示复制的进度。</p>\n<p>比如当前主服务器的复制偏移量为10000，在发送了50个字节的内容之后，就变为了10050，可以认为是主从服务器数据不一致性程度的表示。</p>\n<p>在 Sentinel 执行故障转移的时候也会以复制偏移量作为主要的参考依据。</p>\n<blockquote>\n<p>一定程度上，复制偏移量就表示从节点数据的完整性。</p>\n</blockquote>\n<br>\n\n\n</li>\n<li><p>复制缓冲区</p>\n<p>复制缓冲区是由主服务器维护的一个固定长度的 FIFO 队列，该队列会缓存近期主服务器所执行的写命令。</p>\n<br>\n\n\n</li>\n<li><p>主服务器 run ID</p>\n<p>run ID 唯一标识一个 Redis 服务器。</p>\n<p>实际上不论主从在服务器启动时都会生成一个 run ID，由40位随机的16进制字符组成。</p>\n<p>此处的 run ID 是在从服务器连接到主服务器是由主服务器下发的自身的 run ID，重连之后通过判断 run ID 来确定是否为同一个 Master。</p>\n</li>\n</ol>\n<br>\n\n\n\n<p>PSYNC 的执行流程简述如下：</p>\n<ol>\n<li>判断 run ID 是否相同，不相同会直接开启全量同步的逻辑，相当于直接走 SYNC。</li>\n<li>run ID 相同表示是断线重连，判断复制偏移量是否还在复制缓冲区中，如果超出表示超时时间过长，也需要走 SYNC。</li>\n<li>如果复制偏移量未超出复制缓冲区，则直接将复制缓冲区中的命令发送到从服务器，从而避免全量同步。</li>\n</ol>\n<br>\n\n\n\n\n\n<h2 id=\"Q-amp-A\"><a href=\"#Q-amp-A\" class=\"headerlink\" title=\"Q&amp;A\"></a>Q&amp;A</h2><blockquote>\n<p>Q: 主从模式的优势</p>\n</blockquote>\n<p>横向扩展了读性能</p>\n<p>备份数据，强化数据安全</p>\n<br>\n\n\n\n\n\n<blockquote>\n<p>Q: 主从模式的存在的问题</p>\n</blockquote>\n<p>对于写性能并没有提高，可能出于一致性的考虑，Redis 的主从模式并不允许从从服务器写入。</p>\n<p>非强一致性，命令的扩散存在一定的延时，此时主从的数据并不一致。</p>\n<p>单点故障问题，因为只能从主节点写入，单点故障问题很难避免，只要主节点宕机，整个集群就不可写入。</p>\n<br>\n\n\n\n\n\n<blockquote>\n<p>Q: PSYNC 的优化</p>\n</blockquote>\n<p>PSYNC 借由复制缓冲区实现了对断线重连的容忍机制，如果断线时间断，可以从复制缓冲区中找到缺失的命令就可以进行部分重同步，而避免每次都是全量同步。</p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"clk87sjyd0000wnbv2g2a8pr9","category_id":"clk87sjyg0002wnbv53pe47g2","_id":"clk87sjyi000bwnbv0d522xoe"},{"post_id":"clk87sjyf0001wnbv4k36fqdd","category_id":"clk87sjyi0007wnbv2s3v2cf2","_id":"clk87sjyj000fwnbva9v2h5hj"},{"post_id":"clk87sjyh0004wnbv596ubaus","category_id":"clk87sjyi000cwnbv1iwlap0q","_id":"clk87sjyj000jwnbv4p42fd6y"},{"post_id":"clk87sjyh0005wnbvf13od14v","category_id":"clk87sjyj000gwnbvf7qm7q2v","_id":"clk87sjyk000ownbvajjo4ytl"},{"post_id":"clk87sjyi0006wnbvb4uc8oft","category_id":"clk87sjyj000gwnbvf7qm7q2v","_id":"clk87sjyk000rwnbv3moz90ke"},{"post_id":"clk87sjyi000awnbvcwhj07bp","category_id":"clk87sjyj000nwnbvee9l9vfm","_id":"clk87sjyk000twnbvbil91wud"},{"post_id":"clk87sjyk000vwnbv1w192xub","category_id":"clk87sjyj000gwnbvf7qm7q2v","_id":"clk87sjyl0010wnbv1ovo194t"},{"post_id":"clk87sjyk000uwnbvdiwwbnqz","category_id":"clk87sjyk000wwnbv1dix54hg","_id":"clk87sjyl0014wnbva8g9436g"},{"post_id":"clk87sjyl000ywnbv3g3lbqdz","category_id":"clk87sjyl0011wnbv3y2ihnhs","_id":"clk87sjyl0016wnbv64cl0xey"}],"PostTag":[{"post_id":"clk87sjyd0000wnbv2g2a8pr9","tag_id":"clk87sjyh0003wnbvhoza05pb","_id":"clk87sjyi0009wnbv17hj8mth"},{"post_id":"clk87sjyf0001wnbv4k36fqdd","tag_id":"clk87sjyi0008wnbv1famapix","_id":"clk87sjyi000ewnbv87gz96d3"},{"post_id":"clk87sjyh0004wnbv596ubaus","tag_id":"clk87sjyi000dwnbv7w6qajl3","_id":"clk87sjyj000iwnbvcwkr6uvw"},{"post_id":"clk87sjyh0005wnbvf13od14v","tag_id":"clk87sjyj000hwnbv6xhe5l7j","_id":"clk87sjyj000mwnbv4q5p1olf"},{"post_id":"clk87sjyi0006wnbvb4uc8oft","tag_id":"clk87sjyj000lwnbv6zkbcl5y","_id":"clk87sjyk000qwnbv00nzg8oy"},{"post_id":"clk87sjyi000awnbvcwhj07bp","tag_id":"clk87sjyk000pwnbvc3r5448k","_id":"clk87sjyk000swnbv5ptw55s8"},{"post_id":"clk87sjyk000vwnbv1w192xub","tag_id":"clk87sjyj000hwnbv6xhe5l7j","_id":"clk87sjyl000zwnbv2zy690v5"},{"post_id":"clk87sjyk000uwnbvdiwwbnqz","tag_id":"clk87sjyl000xwnbvd5r4eg52","_id":"clk87sjyl0013wnbv8auahus3"},{"post_id":"clk87sjyl000ywnbv3g3lbqdz","tag_id":"clk87sjyl0012wnbv7uh1bnth","_id":"clk87sjyl0015wnbv8zjz2jh3"}],"Tag":[{"name":"Disruptor","_id":"clk87sjyh0003wnbvhoza05pb"},{"name":"MySQL","_id":"clk87sjyi0008wnbv1famapix"},{"name":"mq","_id":"clk87sjyi000dwnbv7w6qajl3"},{"name":"jvm","_id":"clk87sjyj000hwnbv6xhe5l7j"},{"name":"jdk","_id":"clk87sjyj000lwnbv6zkbcl5y"},{"name":"tcp","_id":"clk87sjyk000pwnbvc3r5448k"},{"name":"工作","_id":"clk87sjyl000xwnbvd5r4eg52"},{"name":"redis","_id":"clk87sjyl0012wnbv7uh1bnth"}]}}